
Turning.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003a6c  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000028  08003b7c  08003b7c  00013b7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003ba4  08003ba4  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08003ba4  08003ba4  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003ba4  08003ba4  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003ba4  08003ba4  00013ba4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003ba8  08003ba8  00013ba8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003bac  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000016c  2000000c  08003bb8  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000178  08003bb8  00020178  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b019  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001f0b  00000000  00000000  0002b04e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c38  00000000  00000000  0002cf60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000b60  00000000  00000000  0002db98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001836e  00000000  00000000  0002e6f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d4b5  00000000  00000000  00046a66  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008aa5c  00000000  00000000  00053f1b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000de977  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003458  00000000  00000000  000de9c8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	2000000c 	.word	0x2000000c
 800012c:	00000000 	.word	0x00000000
 8000130:	08003b64 	.word	0x08003b64

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000010 	.word	0x20000010
 800014c:	08003b64 	.word	0x08003b64

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	; 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	3c01      	subs	r4, #1
 800028c:	bf28      	it	cs
 800028e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000292:	d2e9      	bcs.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__aeabi_dmul>:
 80004c8:	b570      	push	{r4, r5, r6, lr}
 80004ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d6:	bf1d      	ittte	ne
 80004d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004dc:	ea94 0f0c 	teqne	r4, ip
 80004e0:	ea95 0f0c 	teqne	r5, ip
 80004e4:	f000 f8de 	bleq	80006a4 <__aeabi_dmul+0x1dc>
 80004e8:	442c      	add	r4, r5
 80004ea:	ea81 0603 	eor.w	r6, r1, r3
 80004ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004fa:	bf18      	it	ne
 80004fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000500:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000504:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000508:	d038      	beq.n	800057c <__aeabi_dmul+0xb4>
 800050a:	fba0 ce02 	umull	ip, lr, r0, r2
 800050e:	f04f 0500 	mov.w	r5, #0
 8000512:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000516:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800051a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051e:	f04f 0600 	mov.w	r6, #0
 8000522:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000526:	f09c 0f00 	teq	ip, #0
 800052a:	bf18      	it	ne
 800052c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000530:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000534:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000538:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800053c:	d204      	bcs.n	8000548 <__aeabi_dmul+0x80>
 800053e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000542:	416d      	adcs	r5, r5
 8000544:	eb46 0606 	adc.w	r6, r6, r6
 8000548:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800054c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000550:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000554:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000558:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800055c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000560:	bf88      	it	hi
 8000562:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000566:	d81e      	bhi.n	80005a6 <__aeabi_dmul+0xde>
 8000568:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800056c:	bf08      	it	eq
 800056e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000572:	f150 0000 	adcs.w	r0, r0, #0
 8000576:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800057a:	bd70      	pop	{r4, r5, r6, pc}
 800057c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000580:	ea46 0101 	orr.w	r1, r6, r1
 8000584:	ea40 0002 	orr.w	r0, r0, r2
 8000588:	ea81 0103 	eor.w	r1, r1, r3
 800058c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000590:	bfc2      	ittt	gt
 8000592:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000596:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800059a:	bd70      	popgt	{r4, r5, r6, pc}
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a0:	f04f 0e00 	mov.w	lr, #0
 80005a4:	3c01      	subs	r4, #1
 80005a6:	f300 80ab 	bgt.w	8000700 <__aeabi_dmul+0x238>
 80005aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005ae:	bfde      	ittt	le
 80005b0:	2000      	movle	r0, #0
 80005b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005b6:	bd70      	pople	{r4, r5, r6, pc}
 80005b8:	f1c4 0400 	rsb	r4, r4, #0
 80005bc:	3c20      	subs	r4, #32
 80005be:	da35      	bge.n	800062c <__aeabi_dmul+0x164>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc1b      	bgt.n	80005fc <__aeabi_dmul+0x134>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0520 	rsb	r5, r4, #32
 80005cc:	fa00 f305 	lsl.w	r3, r0, r5
 80005d0:	fa20 f004 	lsr.w	r0, r0, r4
 80005d4:	fa01 f205 	lsl.w	r2, r1, r5
 80005d8:	ea40 0002 	orr.w	r0, r0, r2
 80005dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e8:	fa21 f604 	lsr.w	r6, r1, r4
 80005ec:	eb42 0106 	adc.w	r1, r2, r6
 80005f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f4:	bf08      	it	eq
 80005f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f1c4 040c 	rsb	r4, r4, #12
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f304 	lsl.w	r3, r0, r4
 8000608:	fa20 f005 	lsr.w	r0, r0, r5
 800060c:	fa01 f204 	lsl.w	r2, r1, r4
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000618:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800061c:	f141 0100 	adc.w	r1, r1, #0
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 0520 	rsb	r5, r4, #32
 8000630:	fa00 f205 	lsl.w	r2, r0, r5
 8000634:	ea4e 0e02 	orr.w	lr, lr, r2
 8000638:	fa20 f304 	lsr.w	r3, r0, r4
 800063c:	fa01 f205 	lsl.w	r2, r1, r5
 8000640:	ea43 0302 	orr.w	r3, r3, r2
 8000644:	fa21 f004 	lsr.w	r0, r1, r4
 8000648:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800064c:	fa21 f204 	lsr.w	r2, r1, r4
 8000650:	ea20 0002 	bic.w	r0, r0, r2
 8000654:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f094 0f00 	teq	r4, #0
 8000668:	d10f      	bne.n	800068a <__aeabi_dmul+0x1c2>
 800066a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800066e:	0040      	lsls	r0, r0, #1
 8000670:	eb41 0101 	adc.w	r1, r1, r1
 8000674:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000678:	bf08      	it	eq
 800067a:	3c01      	subeq	r4, #1
 800067c:	d0f7      	beq.n	800066e <__aeabi_dmul+0x1a6>
 800067e:	ea41 0106 	orr.w	r1, r1, r6
 8000682:	f095 0f00 	teq	r5, #0
 8000686:	bf18      	it	ne
 8000688:	4770      	bxne	lr
 800068a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800068e:	0052      	lsls	r2, r2, #1
 8000690:	eb43 0303 	adc.w	r3, r3, r3
 8000694:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000698:	bf08      	it	eq
 800069a:	3d01      	subeq	r5, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1c6>
 800069e:	ea43 0306 	orr.w	r3, r3, r6
 80006a2:	4770      	bx	lr
 80006a4:	ea94 0f0c 	teq	r4, ip
 80006a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ac:	bf18      	it	ne
 80006ae:	ea95 0f0c 	teqne	r5, ip
 80006b2:	d00c      	beq.n	80006ce <__aeabi_dmul+0x206>
 80006b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b8:	bf18      	it	ne
 80006ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006be:	d1d1      	bne.n	8000664 <__aeabi_dmul+0x19c>
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c8:	f04f 0000 	mov.w	r0, #0
 80006cc:	bd70      	pop	{r4, r5, r6, pc}
 80006ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d2:	bf06      	itte	eq
 80006d4:	4610      	moveq	r0, r2
 80006d6:	4619      	moveq	r1, r3
 80006d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006dc:	d019      	beq.n	8000712 <__aeabi_dmul+0x24a>
 80006de:	ea94 0f0c 	teq	r4, ip
 80006e2:	d102      	bne.n	80006ea <__aeabi_dmul+0x222>
 80006e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e8:	d113      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006ea:	ea95 0f0c 	teq	r5, ip
 80006ee:	d105      	bne.n	80006fc <__aeabi_dmul+0x234>
 80006f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f4:	bf1c      	itt	ne
 80006f6:	4610      	movne	r0, r2
 80006f8:	4619      	movne	r1, r3
 80006fa:	d10a      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006fc:	ea81 0103 	eor.w	r1, r1, r3
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000708:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000716:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800071a:	bd70      	pop	{r4, r5, r6, pc}

0800071c <__aeabi_ddiv>:
 800071c:	b570      	push	{r4, r5, r6, lr}
 800071e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000722:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000726:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800072a:	bf1d      	ittte	ne
 800072c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000730:	ea94 0f0c 	teqne	r4, ip
 8000734:	ea95 0f0c 	teqne	r5, ip
 8000738:	f000 f8a7 	bleq	800088a <__aeabi_ddiv+0x16e>
 800073c:	eba4 0405 	sub.w	r4, r4, r5
 8000740:	ea81 0e03 	eor.w	lr, r1, r3
 8000744:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000748:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800074c:	f000 8088 	beq.w	8000860 <__aeabi_ddiv+0x144>
 8000750:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000754:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000758:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800075c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000760:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000764:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000768:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800076c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000770:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000774:	429d      	cmp	r5, r3
 8000776:	bf08      	it	eq
 8000778:	4296      	cmpeq	r6, r2
 800077a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800077e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000782:	d202      	bcs.n	800078a <__aeabi_ddiv+0x6e>
 8000784:	085b      	lsrs	r3, r3, #1
 8000786:	ea4f 0232 	mov.w	r2, r2, rrx
 800078a:	1ab6      	subs	r6, r6, r2
 800078c:	eb65 0503 	sbc.w	r5, r5, r3
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800079a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800079e:	ebb6 0e02 	subs.w	lr, r6, r2
 80007a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a6:	bf22      	ittt	cs
 80007a8:	1ab6      	subcs	r6, r6, r2
 80007aa:	4675      	movcs	r5, lr
 80007ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007be:	bf22      	ittt	cs
 80007c0:	1ab6      	subcs	r6, r6, r2
 80007c2:	4675      	movcs	r5, lr
 80007c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80007fc:	d018      	beq.n	8000830 <__aeabi_ddiv+0x114>
 80007fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000802:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000806:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800080a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000812:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000816:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800081a:	d1c0      	bne.n	800079e <__aeabi_ddiv+0x82>
 800081c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000820:	d10b      	bne.n	800083a <__aeabi_ddiv+0x11e>
 8000822:	ea41 0100 	orr.w	r1, r1, r0
 8000826:	f04f 0000 	mov.w	r0, #0
 800082a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800082e:	e7b6      	b.n	800079e <__aeabi_ddiv+0x82>
 8000830:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000834:	bf04      	itt	eq
 8000836:	4301      	orreq	r1, r0
 8000838:	2000      	moveq	r0, #0
 800083a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800083e:	bf88      	it	hi
 8000840:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000844:	f63f aeaf 	bhi.w	80005a6 <__aeabi_dmul+0xde>
 8000848:	ebb5 0c03 	subs.w	ip, r5, r3
 800084c:	bf04      	itt	eq
 800084e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000852:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000856:	f150 0000 	adcs.w	r0, r0, #0
 800085a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085e:	bd70      	pop	{r4, r5, r6, pc}
 8000860:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000864:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000868:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800086c:	bfc2      	ittt	gt
 800086e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000872:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000876:	bd70      	popgt	{r4, r5, r6, pc}
 8000878:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800087c:	f04f 0e00 	mov.w	lr, #0
 8000880:	3c01      	subs	r4, #1
 8000882:	e690      	b.n	80005a6 <__aeabi_dmul+0xde>
 8000884:	ea45 0e06 	orr.w	lr, r5, r6
 8000888:	e68d      	b.n	80005a6 <__aeabi_dmul+0xde>
 800088a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088e:	ea94 0f0c 	teq	r4, ip
 8000892:	bf08      	it	eq
 8000894:	ea95 0f0c 	teqeq	r5, ip
 8000898:	f43f af3b 	beq.w	8000712 <__aeabi_dmul+0x24a>
 800089c:	ea94 0f0c 	teq	r4, ip
 80008a0:	d10a      	bne.n	80008b8 <__aeabi_ddiv+0x19c>
 80008a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a6:	f47f af34 	bne.w	8000712 <__aeabi_dmul+0x24a>
 80008aa:	ea95 0f0c 	teq	r5, ip
 80008ae:	f47f af25 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008b2:	4610      	mov	r0, r2
 80008b4:	4619      	mov	r1, r3
 80008b6:	e72c      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008b8:	ea95 0f0c 	teq	r5, ip
 80008bc:	d106      	bne.n	80008cc <__aeabi_ddiv+0x1b0>
 80008be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c2:	f43f aefd 	beq.w	80006c0 <__aeabi_dmul+0x1f8>
 80008c6:	4610      	mov	r0, r2
 80008c8:	4619      	mov	r1, r3
 80008ca:	e722      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d0:	bf18      	it	ne
 80008d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d6:	f47f aec5 	bne.w	8000664 <__aeabi_dmul+0x19c>
 80008da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008de:	f47f af0d 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e6:	f47f aeeb 	bne.w	80006c0 <__aeabi_dmul+0x1f8>
 80008ea:	e712      	b.n	8000712 <__aeabi_dmul+0x24a>

080008ec <__aeabi_d2f>:
 80008ec:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80008f0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80008f4:	bf24      	itt	cs
 80008f6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80008fa:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80008fe:	d90d      	bls.n	800091c <__aeabi_d2f+0x30>
 8000900:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000904:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000908:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 800090c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000910:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000914:	bf08      	it	eq
 8000916:	f020 0001 	biceq.w	r0, r0, #1
 800091a:	4770      	bx	lr
 800091c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000920:	d121      	bne.n	8000966 <__aeabi_d2f+0x7a>
 8000922:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000926:	bfbc      	itt	lt
 8000928:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 800092c:	4770      	bxlt	lr
 800092e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000932:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000936:	f1c2 0218 	rsb	r2, r2, #24
 800093a:	f1c2 0c20 	rsb	ip, r2, #32
 800093e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000942:	fa20 f002 	lsr.w	r0, r0, r2
 8000946:	bf18      	it	ne
 8000948:	f040 0001 	orrne.w	r0, r0, #1
 800094c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000950:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000954:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000958:	ea40 000c 	orr.w	r0, r0, ip
 800095c:	fa23 f302 	lsr.w	r3, r3, r2
 8000960:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000964:	e7cc      	b.n	8000900 <__aeabi_d2f+0x14>
 8000966:	ea7f 5362 	mvns.w	r3, r2, asr #21
 800096a:	d107      	bne.n	800097c <__aeabi_d2f+0x90>
 800096c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000970:	bf1e      	ittt	ne
 8000972:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000976:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 800097a:	4770      	bxne	lr
 800097c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000980:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000984:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000988:	4770      	bx	lr
 800098a:	bf00      	nop

0800098c <__aeabi_frsub>:
 800098c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000990:	e002      	b.n	8000998 <__addsf3>
 8000992:	bf00      	nop

08000994 <__aeabi_fsub>:
 8000994:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000998 <__addsf3>:
 8000998:	0042      	lsls	r2, r0, #1
 800099a:	bf1f      	itttt	ne
 800099c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80009a0:	ea92 0f03 	teqne	r2, r3
 80009a4:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80009a8:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80009ac:	d06a      	beq.n	8000a84 <__addsf3+0xec>
 80009ae:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80009b2:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 80009b6:	bfc1      	itttt	gt
 80009b8:	18d2      	addgt	r2, r2, r3
 80009ba:	4041      	eorgt	r1, r0
 80009bc:	4048      	eorgt	r0, r1
 80009be:	4041      	eorgt	r1, r0
 80009c0:	bfb8      	it	lt
 80009c2:	425b      	neglt	r3, r3
 80009c4:	2b19      	cmp	r3, #25
 80009c6:	bf88      	it	hi
 80009c8:	4770      	bxhi	lr
 80009ca:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80009ce:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80009d2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80009d6:	bf18      	it	ne
 80009d8:	4240      	negne	r0, r0
 80009da:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80009de:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80009e2:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80009e6:	bf18      	it	ne
 80009e8:	4249      	negne	r1, r1
 80009ea:	ea92 0f03 	teq	r2, r3
 80009ee:	d03f      	beq.n	8000a70 <__addsf3+0xd8>
 80009f0:	f1a2 0201 	sub.w	r2, r2, #1
 80009f4:	fa41 fc03 	asr.w	ip, r1, r3
 80009f8:	eb10 000c 	adds.w	r0, r0, ip
 80009fc:	f1c3 0320 	rsb	r3, r3, #32
 8000a00:	fa01 f103 	lsl.w	r1, r1, r3
 8000a04:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000a08:	d502      	bpl.n	8000a10 <__addsf3+0x78>
 8000a0a:	4249      	negs	r1, r1
 8000a0c:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000a10:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000a14:	d313      	bcc.n	8000a3e <__addsf3+0xa6>
 8000a16:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000a1a:	d306      	bcc.n	8000a2a <__addsf3+0x92>
 8000a1c:	0840      	lsrs	r0, r0, #1
 8000a1e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000a22:	f102 0201 	add.w	r2, r2, #1
 8000a26:	2afe      	cmp	r2, #254	; 0xfe
 8000a28:	d251      	bcs.n	8000ace <__addsf3+0x136>
 8000a2a:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000a2e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000a32:	bf08      	it	eq
 8000a34:	f020 0001 	biceq.w	r0, r0, #1
 8000a38:	ea40 0003 	orr.w	r0, r0, r3
 8000a3c:	4770      	bx	lr
 8000a3e:	0049      	lsls	r1, r1, #1
 8000a40:	eb40 0000 	adc.w	r0, r0, r0
 8000a44:	3a01      	subs	r2, #1
 8000a46:	bf28      	it	cs
 8000a48:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000a4c:	d2ed      	bcs.n	8000a2a <__addsf3+0x92>
 8000a4e:	fab0 fc80 	clz	ip, r0
 8000a52:	f1ac 0c08 	sub.w	ip, ip, #8
 8000a56:	ebb2 020c 	subs.w	r2, r2, ip
 8000a5a:	fa00 f00c 	lsl.w	r0, r0, ip
 8000a5e:	bfaa      	itet	ge
 8000a60:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000a64:	4252      	neglt	r2, r2
 8000a66:	4318      	orrge	r0, r3
 8000a68:	bfbc      	itt	lt
 8000a6a:	40d0      	lsrlt	r0, r2
 8000a6c:	4318      	orrlt	r0, r3
 8000a6e:	4770      	bx	lr
 8000a70:	f092 0f00 	teq	r2, #0
 8000a74:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000a78:	bf06      	itte	eq
 8000a7a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000a7e:	3201      	addeq	r2, #1
 8000a80:	3b01      	subne	r3, #1
 8000a82:	e7b5      	b.n	80009f0 <__addsf3+0x58>
 8000a84:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000a88:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000a8c:	bf18      	it	ne
 8000a8e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000a92:	d021      	beq.n	8000ad8 <__addsf3+0x140>
 8000a94:	ea92 0f03 	teq	r2, r3
 8000a98:	d004      	beq.n	8000aa4 <__addsf3+0x10c>
 8000a9a:	f092 0f00 	teq	r2, #0
 8000a9e:	bf08      	it	eq
 8000aa0:	4608      	moveq	r0, r1
 8000aa2:	4770      	bx	lr
 8000aa4:	ea90 0f01 	teq	r0, r1
 8000aa8:	bf1c      	itt	ne
 8000aaa:	2000      	movne	r0, #0
 8000aac:	4770      	bxne	lr
 8000aae:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000ab2:	d104      	bne.n	8000abe <__addsf3+0x126>
 8000ab4:	0040      	lsls	r0, r0, #1
 8000ab6:	bf28      	it	cs
 8000ab8:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000abc:	4770      	bx	lr
 8000abe:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000ac2:	bf3c      	itt	cc
 8000ac4:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000ac8:	4770      	bxcc	lr
 8000aca:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000ace:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000ad2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ad6:	4770      	bx	lr
 8000ad8:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000adc:	bf16      	itet	ne
 8000ade:	4608      	movne	r0, r1
 8000ae0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000ae4:	4601      	movne	r1, r0
 8000ae6:	0242      	lsls	r2, r0, #9
 8000ae8:	bf06      	itte	eq
 8000aea:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000aee:	ea90 0f01 	teqeq	r0, r1
 8000af2:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000af6:	4770      	bx	lr

08000af8 <__aeabi_ui2f>:
 8000af8:	f04f 0300 	mov.w	r3, #0
 8000afc:	e004      	b.n	8000b08 <__aeabi_i2f+0x8>
 8000afe:	bf00      	nop

08000b00 <__aeabi_i2f>:
 8000b00:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000b04:	bf48      	it	mi
 8000b06:	4240      	negmi	r0, r0
 8000b08:	ea5f 0c00 	movs.w	ip, r0
 8000b0c:	bf08      	it	eq
 8000b0e:	4770      	bxeq	lr
 8000b10:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000b14:	4601      	mov	r1, r0
 8000b16:	f04f 0000 	mov.w	r0, #0
 8000b1a:	e01c      	b.n	8000b56 <__aeabi_l2f+0x2a>

08000b1c <__aeabi_ul2f>:
 8000b1c:	ea50 0201 	orrs.w	r2, r0, r1
 8000b20:	bf08      	it	eq
 8000b22:	4770      	bxeq	lr
 8000b24:	f04f 0300 	mov.w	r3, #0
 8000b28:	e00a      	b.n	8000b40 <__aeabi_l2f+0x14>
 8000b2a:	bf00      	nop

08000b2c <__aeabi_l2f>:
 8000b2c:	ea50 0201 	orrs.w	r2, r0, r1
 8000b30:	bf08      	it	eq
 8000b32:	4770      	bxeq	lr
 8000b34:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000b38:	d502      	bpl.n	8000b40 <__aeabi_l2f+0x14>
 8000b3a:	4240      	negs	r0, r0
 8000b3c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000b40:	ea5f 0c01 	movs.w	ip, r1
 8000b44:	bf02      	ittt	eq
 8000b46:	4684      	moveq	ip, r0
 8000b48:	4601      	moveq	r1, r0
 8000b4a:	2000      	moveq	r0, #0
 8000b4c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000b50:	bf08      	it	eq
 8000b52:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000b56:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000b5a:	fabc f28c 	clz	r2, ip
 8000b5e:	3a08      	subs	r2, #8
 8000b60:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000b64:	db10      	blt.n	8000b88 <__aeabi_l2f+0x5c>
 8000b66:	fa01 fc02 	lsl.w	ip, r1, r2
 8000b6a:	4463      	add	r3, ip
 8000b6c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000b70:	f1c2 0220 	rsb	r2, r2, #32
 8000b74:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000b78:	fa20 f202 	lsr.w	r2, r0, r2
 8000b7c:	eb43 0002 	adc.w	r0, r3, r2
 8000b80:	bf08      	it	eq
 8000b82:	f020 0001 	biceq.w	r0, r0, #1
 8000b86:	4770      	bx	lr
 8000b88:	f102 0220 	add.w	r2, r2, #32
 8000b8c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000b90:	f1c2 0220 	rsb	r2, r2, #32
 8000b94:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000b98:	fa21 f202 	lsr.w	r2, r1, r2
 8000b9c:	eb43 0002 	adc.w	r0, r3, r2
 8000ba0:	bf08      	it	eq
 8000ba2:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_fmul>:
 8000ba8:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000bac:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000bb0:	bf1e      	ittt	ne
 8000bb2:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000bb6:	ea92 0f0c 	teqne	r2, ip
 8000bba:	ea93 0f0c 	teqne	r3, ip
 8000bbe:	d06f      	beq.n	8000ca0 <__aeabi_fmul+0xf8>
 8000bc0:	441a      	add	r2, r3
 8000bc2:	ea80 0c01 	eor.w	ip, r0, r1
 8000bc6:	0240      	lsls	r0, r0, #9
 8000bc8:	bf18      	it	ne
 8000bca:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000bce:	d01e      	beq.n	8000c0e <__aeabi_fmul+0x66>
 8000bd0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000bd4:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000bd8:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000bdc:	fba0 3101 	umull	r3, r1, r0, r1
 8000be0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000be4:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000be8:	bf3e      	ittt	cc
 8000bea:	0049      	lslcc	r1, r1, #1
 8000bec:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000bf0:	005b      	lslcc	r3, r3, #1
 8000bf2:	ea40 0001 	orr.w	r0, r0, r1
 8000bf6:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000bfa:	2afd      	cmp	r2, #253	; 0xfd
 8000bfc:	d81d      	bhi.n	8000c3a <__aeabi_fmul+0x92>
 8000bfe:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000c02:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c06:	bf08      	it	eq
 8000c08:	f020 0001 	biceq.w	r0, r0, #1
 8000c0c:	4770      	bx	lr
 8000c0e:	f090 0f00 	teq	r0, #0
 8000c12:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000c16:	bf08      	it	eq
 8000c18:	0249      	lsleq	r1, r1, #9
 8000c1a:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000c1e:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000c22:	3a7f      	subs	r2, #127	; 0x7f
 8000c24:	bfc2      	ittt	gt
 8000c26:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000c2a:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000c2e:	4770      	bxgt	lr
 8000c30:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c34:	f04f 0300 	mov.w	r3, #0
 8000c38:	3a01      	subs	r2, #1
 8000c3a:	dc5d      	bgt.n	8000cf8 <__aeabi_fmul+0x150>
 8000c3c:	f112 0f19 	cmn.w	r2, #25
 8000c40:	bfdc      	itt	le
 8000c42:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000c46:	4770      	bxle	lr
 8000c48:	f1c2 0200 	rsb	r2, r2, #0
 8000c4c:	0041      	lsls	r1, r0, #1
 8000c4e:	fa21 f102 	lsr.w	r1, r1, r2
 8000c52:	f1c2 0220 	rsb	r2, r2, #32
 8000c56:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c5a:	ea5f 0031 	movs.w	r0, r1, rrx
 8000c5e:	f140 0000 	adc.w	r0, r0, #0
 8000c62:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000c66:	bf08      	it	eq
 8000c68:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000c6c:	4770      	bx	lr
 8000c6e:	f092 0f00 	teq	r2, #0
 8000c72:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000c76:	bf02      	ittt	eq
 8000c78:	0040      	lsleq	r0, r0, #1
 8000c7a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000c7e:	3a01      	subeq	r2, #1
 8000c80:	d0f9      	beq.n	8000c76 <__aeabi_fmul+0xce>
 8000c82:	ea40 000c 	orr.w	r0, r0, ip
 8000c86:	f093 0f00 	teq	r3, #0
 8000c8a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c8e:	bf02      	ittt	eq
 8000c90:	0049      	lsleq	r1, r1, #1
 8000c92:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000c96:	3b01      	subeq	r3, #1
 8000c98:	d0f9      	beq.n	8000c8e <__aeabi_fmul+0xe6>
 8000c9a:	ea41 010c 	orr.w	r1, r1, ip
 8000c9e:	e78f      	b.n	8000bc0 <__aeabi_fmul+0x18>
 8000ca0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000ca4:	ea92 0f0c 	teq	r2, ip
 8000ca8:	bf18      	it	ne
 8000caa:	ea93 0f0c 	teqne	r3, ip
 8000cae:	d00a      	beq.n	8000cc6 <__aeabi_fmul+0x11e>
 8000cb0:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000cb4:	bf18      	it	ne
 8000cb6:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000cba:	d1d8      	bne.n	8000c6e <__aeabi_fmul+0xc6>
 8000cbc:	ea80 0001 	eor.w	r0, r0, r1
 8000cc0:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000cc4:	4770      	bx	lr
 8000cc6:	f090 0f00 	teq	r0, #0
 8000cca:	bf17      	itett	ne
 8000ccc:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000cd0:	4608      	moveq	r0, r1
 8000cd2:	f091 0f00 	teqne	r1, #0
 8000cd6:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000cda:	d014      	beq.n	8000d06 <__aeabi_fmul+0x15e>
 8000cdc:	ea92 0f0c 	teq	r2, ip
 8000ce0:	d101      	bne.n	8000ce6 <__aeabi_fmul+0x13e>
 8000ce2:	0242      	lsls	r2, r0, #9
 8000ce4:	d10f      	bne.n	8000d06 <__aeabi_fmul+0x15e>
 8000ce6:	ea93 0f0c 	teq	r3, ip
 8000cea:	d103      	bne.n	8000cf4 <__aeabi_fmul+0x14c>
 8000cec:	024b      	lsls	r3, r1, #9
 8000cee:	bf18      	it	ne
 8000cf0:	4608      	movne	r0, r1
 8000cf2:	d108      	bne.n	8000d06 <__aeabi_fmul+0x15e>
 8000cf4:	ea80 0001 	eor.w	r0, r0, r1
 8000cf8:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000cfc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000d00:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d04:	4770      	bx	lr
 8000d06:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000d0a:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000d0e:	4770      	bx	lr

08000d10 <__aeabi_fdiv>:
 8000d10:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d14:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d18:	bf1e      	ittt	ne
 8000d1a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d1e:	ea92 0f0c 	teqne	r2, ip
 8000d22:	ea93 0f0c 	teqne	r3, ip
 8000d26:	d069      	beq.n	8000dfc <__aeabi_fdiv+0xec>
 8000d28:	eba2 0203 	sub.w	r2, r2, r3
 8000d2c:	ea80 0c01 	eor.w	ip, r0, r1
 8000d30:	0249      	lsls	r1, r1, #9
 8000d32:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000d36:	d037      	beq.n	8000da8 <__aeabi_fdiv+0x98>
 8000d38:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000d3c:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000d40:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000d44:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d48:	428b      	cmp	r3, r1
 8000d4a:	bf38      	it	cc
 8000d4c:	005b      	lslcc	r3, r3, #1
 8000d4e:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000d52:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000d56:	428b      	cmp	r3, r1
 8000d58:	bf24      	itt	cs
 8000d5a:	1a5b      	subcs	r3, r3, r1
 8000d5c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000d60:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000d64:	bf24      	itt	cs
 8000d66:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000d6a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000d6e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000d72:	bf24      	itt	cs
 8000d74:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000d78:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000d7c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000d80:	bf24      	itt	cs
 8000d82:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000d86:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000d8a:	011b      	lsls	r3, r3, #4
 8000d8c:	bf18      	it	ne
 8000d8e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000d92:	d1e0      	bne.n	8000d56 <__aeabi_fdiv+0x46>
 8000d94:	2afd      	cmp	r2, #253	; 0xfd
 8000d96:	f63f af50 	bhi.w	8000c3a <__aeabi_fmul+0x92>
 8000d9a:	428b      	cmp	r3, r1
 8000d9c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000da0:	bf08      	it	eq
 8000da2:	f020 0001 	biceq.w	r0, r0, #1
 8000da6:	4770      	bx	lr
 8000da8:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000dac:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000db0:	327f      	adds	r2, #127	; 0x7f
 8000db2:	bfc2      	ittt	gt
 8000db4:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000db8:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000dbc:	4770      	bxgt	lr
 8000dbe:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000dc2:	f04f 0300 	mov.w	r3, #0
 8000dc6:	3a01      	subs	r2, #1
 8000dc8:	e737      	b.n	8000c3a <__aeabi_fmul+0x92>
 8000dca:	f092 0f00 	teq	r2, #0
 8000dce:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000dd2:	bf02      	ittt	eq
 8000dd4:	0040      	lsleq	r0, r0, #1
 8000dd6:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000dda:	3a01      	subeq	r2, #1
 8000ddc:	d0f9      	beq.n	8000dd2 <__aeabi_fdiv+0xc2>
 8000dde:	ea40 000c 	orr.w	r0, r0, ip
 8000de2:	f093 0f00 	teq	r3, #0
 8000de6:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000dea:	bf02      	ittt	eq
 8000dec:	0049      	lsleq	r1, r1, #1
 8000dee:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000df2:	3b01      	subeq	r3, #1
 8000df4:	d0f9      	beq.n	8000dea <__aeabi_fdiv+0xda>
 8000df6:	ea41 010c 	orr.w	r1, r1, ip
 8000dfa:	e795      	b.n	8000d28 <__aeabi_fdiv+0x18>
 8000dfc:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e00:	ea92 0f0c 	teq	r2, ip
 8000e04:	d108      	bne.n	8000e18 <__aeabi_fdiv+0x108>
 8000e06:	0242      	lsls	r2, r0, #9
 8000e08:	f47f af7d 	bne.w	8000d06 <__aeabi_fmul+0x15e>
 8000e0c:	ea93 0f0c 	teq	r3, ip
 8000e10:	f47f af70 	bne.w	8000cf4 <__aeabi_fmul+0x14c>
 8000e14:	4608      	mov	r0, r1
 8000e16:	e776      	b.n	8000d06 <__aeabi_fmul+0x15e>
 8000e18:	ea93 0f0c 	teq	r3, ip
 8000e1c:	d104      	bne.n	8000e28 <__aeabi_fdiv+0x118>
 8000e1e:	024b      	lsls	r3, r1, #9
 8000e20:	f43f af4c 	beq.w	8000cbc <__aeabi_fmul+0x114>
 8000e24:	4608      	mov	r0, r1
 8000e26:	e76e      	b.n	8000d06 <__aeabi_fmul+0x15e>
 8000e28:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e2c:	bf18      	it	ne
 8000e2e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e32:	d1ca      	bne.n	8000dca <__aeabi_fdiv+0xba>
 8000e34:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000e38:	f47f af5c 	bne.w	8000cf4 <__aeabi_fmul+0x14c>
 8000e3c:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000e40:	f47f af3c 	bne.w	8000cbc <__aeabi_fmul+0x114>
 8000e44:	e75f      	b.n	8000d06 <__aeabi_fmul+0x15e>
 8000e46:	bf00      	nop

08000e48 <__gesf2>:
 8000e48:	f04f 3cff 	mov.w	ip, #4294967295
 8000e4c:	e006      	b.n	8000e5c <__cmpsf2+0x4>
 8000e4e:	bf00      	nop

08000e50 <__lesf2>:
 8000e50:	f04f 0c01 	mov.w	ip, #1
 8000e54:	e002      	b.n	8000e5c <__cmpsf2+0x4>
 8000e56:	bf00      	nop

08000e58 <__cmpsf2>:
 8000e58:	f04f 0c01 	mov.w	ip, #1
 8000e5c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000e60:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000e64:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000e68:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000e6c:	bf18      	it	ne
 8000e6e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000e72:	d011      	beq.n	8000e98 <__cmpsf2+0x40>
 8000e74:	b001      	add	sp, #4
 8000e76:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000e7a:	bf18      	it	ne
 8000e7c:	ea90 0f01 	teqne	r0, r1
 8000e80:	bf58      	it	pl
 8000e82:	ebb2 0003 	subspl.w	r0, r2, r3
 8000e86:	bf88      	it	hi
 8000e88:	17c8      	asrhi	r0, r1, #31
 8000e8a:	bf38      	it	cc
 8000e8c:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000e90:	bf18      	it	ne
 8000e92:	f040 0001 	orrne.w	r0, r0, #1
 8000e96:	4770      	bx	lr
 8000e98:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000e9c:	d102      	bne.n	8000ea4 <__cmpsf2+0x4c>
 8000e9e:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000ea2:	d105      	bne.n	8000eb0 <__cmpsf2+0x58>
 8000ea4:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000ea8:	d1e4      	bne.n	8000e74 <__cmpsf2+0x1c>
 8000eaa:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000eae:	d0e1      	beq.n	8000e74 <__cmpsf2+0x1c>
 8000eb0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000eb4:	4770      	bx	lr
 8000eb6:	bf00      	nop

08000eb8 <__aeabi_cfrcmple>:
 8000eb8:	4684      	mov	ip, r0
 8000eba:	4608      	mov	r0, r1
 8000ebc:	4661      	mov	r1, ip
 8000ebe:	e7ff      	b.n	8000ec0 <__aeabi_cfcmpeq>

08000ec0 <__aeabi_cfcmpeq>:
 8000ec0:	b50f      	push	{r0, r1, r2, r3, lr}
 8000ec2:	f7ff ffc9 	bl	8000e58 <__cmpsf2>
 8000ec6:	2800      	cmp	r0, #0
 8000ec8:	bf48      	it	mi
 8000eca:	f110 0f00 	cmnmi.w	r0, #0
 8000ece:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000ed0 <__aeabi_fcmpeq>:
 8000ed0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ed4:	f7ff fff4 	bl	8000ec0 <__aeabi_cfcmpeq>
 8000ed8:	bf0c      	ite	eq
 8000eda:	2001      	moveq	r0, #1
 8000edc:	2000      	movne	r0, #0
 8000ede:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ee2:	bf00      	nop

08000ee4 <__aeabi_fcmplt>:
 8000ee4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ee8:	f7ff ffea 	bl	8000ec0 <__aeabi_cfcmpeq>
 8000eec:	bf34      	ite	cc
 8000eee:	2001      	movcc	r0, #1
 8000ef0:	2000      	movcs	r0, #0
 8000ef2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ef6:	bf00      	nop

08000ef8 <__aeabi_fcmple>:
 8000ef8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000efc:	f7ff ffe0 	bl	8000ec0 <__aeabi_cfcmpeq>
 8000f00:	bf94      	ite	ls
 8000f02:	2001      	movls	r0, #1
 8000f04:	2000      	movhi	r0, #0
 8000f06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f0a:	bf00      	nop

08000f0c <__aeabi_fcmpge>:
 8000f0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f10:	f7ff ffd2 	bl	8000eb8 <__aeabi_cfrcmple>
 8000f14:	bf94      	ite	ls
 8000f16:	2001      	movls	r0, #1
 8000f18:	2000      	movhi	r0, #0
 8000f1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f1e:	bf00      	nop

08000f20 <__aeabi_fcmpgt>:
 8000f20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f24:	f7ff ffc8 	bl	8000eb8 <__aeabi_cfrcmple>
 8000f28:	bf34      	ite	cc
 8000f2a:	2001      	movcc	r0, #1
 8000f2c:	2000      	movcs	r0, #0
 8000f2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f32:	bf00      	nop

08000f34 <__aeabi_f2iz>:
 8000f34:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000f38:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000f3c:	d30f      	bcc.n	8000f5e <__aeabi_f2iz+0x2a>
 8000f3e:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000f42:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000f46:	d90d      	bls.n	8000f64 <__aeabi_f2iz+0x30>
 8000f48:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000f4c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000f50:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000f54:	fa23 f002 	lsr.w	r0, r3, r2
 8000f58:	bf18      	it	ne
 8000f5a:	4240      	negne	r0, r0
 8000f5c:	4770      	bx	lr
 8000f5e:	f04f 0000 	mov.w	r0, #0
 8000f62:	4770      	bx	lr
 8000f64:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000f68:	d101      	bne.n	8000f6e <__aeabi_f2iz+0x3a>
 8000f6a:	0242      	lsls	r2, r0, #9
 8000f6c:	d105      	bne.n	8000f7a <__aeabi_f2iz+0x46>
 8000f6e:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8000f72:	bf08      	it	eq
 8000f74:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000f78:	4770      	bx	lr
 8000f7a:	f04f 0000 	mov.w	r0, #0
 8000f7e:	4770      	bx	lr

08000f80 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	b088      	sub	sp, #32
 8000f84:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f86:	f107 0310 	add.w	r3, r7, #16
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	601a      	str	r2, [r3, #0]
 8000f8e:	605a      	str	r2, [r3, #4]
 8000f90:	609a      	str	r2, [r3, #8]
 8000f92:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f94:	4b1d      	ldr	r3, [pc, #116]	; (800100c <MX_GPIO_Init+0x8c>)
 8000f96:	699b      	ldr	r3, [r3, #24]
 8000f98:	4a1c      	ldr	r2, [pc, #112]	; (800100c <MX_GPIO_Init+0x8c>)
 8000f9a:	f043 0320 	orr.w	r3, r3, #32
 8000f9e:	6193      	str	r3, [r2, #24]
 8000fa0:	4b1a      	ldr	r3, [pc, #104]	; (800100c <MX_GPIO_Init+0x8c>)
 8000fa2:	699b      	ldr	r3, [r3, #24]
 8000fa4:	f003 0320 	and.w	r3, r3, #32
 8000fa8:	60fb      	str	r3, [r7, #12]
 8000faa:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fac:	4b17      	ldr	r3, [pc, #92]	; (800100c <MX_GPIO_Init+0x8c>)
 8000fae:	699b      	ldr	r3, [r3, #24]
 8000fb0:	4a16      	ldr	r2, [pc, #88]	; (800100c <MX_GPIO_Init+0x8c>)
 8000fb2:	f043 0304 	orr.w	r3, r3, #4
 8000fb6:	6193      	str	r3, [r2, #24]
 8000fb8:	4b14      	ldr	r3, [pc, #80]	; (800100c <MX_GPIO_Init+0x8c>)
 8000fba:	699b      	ldr	r3, [r3, #24]
 8000fbc:	f003 0304 	and.w	r3, r3, #4
 8000fc0:	60bb      	str	r3, [r7, #8]
 8000fc2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fc4:	4b11      	ldr	r3, [pc, #68]	; (800100c <MX_GPIO_Init+0x8c>)
 8000fc6:	699b      	ldr	r3, [r3, #24]
 8000fc8:	4a10      	ldr	r2, [pc, #64]	; (800100c <MX_GPIO_Init+0x8c>)
 8000fca:	f043 0308 	orr.w	r3, r3, #8
 8000fce:	6193      	str	r3, [r2, #24]
 8000fd0:	4b0e      	ldr	r3, [pc, #56]	; (800100c <MX_GPIO_Init+0x8c>)
 8000fd2:	699b      	ldr	r3, [r3, #24]
 8000fd4:	f003 0308 	and.w	r3, r3, #8
 8000fd8:	607b      	str	r3, [r7, #4]
 8000fda:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);
 8000fdc:	2200      	movs	r2, #0
 8000fde:	2102      	movs	r1, #2
 8000fe0:	480b      	ldr	r0, [pc, #44]	; (8001010 <MX_GPIO_Init+0x90>)
 8000fe2:	f000 ffff 	bl	8001fe4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000fe6:	2302      	movs	r3, #2
 8000fe8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fea:	2301      	movs	r3, #1
 8000fec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fee:	2300      	movs	r3, #0
 8000ff0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ff2:	2302      	movs	r3, #2
 8000ff4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ff6:	f107 0310 	add.w	r3, r7, #16
 8000ffa:	4619      	mov	r1, r3
 8000ffc:	4804      	ldr	r0, [pc, #16]	; (8001010 <MX_GPIO_Init+0x90>)
 8000ffe:	f000 fe6d 	bl	8001cdc <HAL_GPIO_Init>

}
 8001002:	bf00      	nop
 8001004:	3720      	adds	r7, #32
 8001006:	46bd      	mov	sp, r7
 8001008:	bd80      	pop	{r7, pc}
 800100a:	bf00      	nop
 800100c:	40021000 	.word	0x40021000
 8001010:	40010800 	.word	0x40010800

08001014 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001018:	f000 fcf0 	bl	80019fc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800101c:	f000 f82c 	bl	8001078 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001020:	f7ff ffae 	bl	8000f80 <MX_GPIO_Init>
  MX_TIM4_Init();
 8001024:	f000 fb4a 	bl	80016bc <MX_TIM4_Init>
  MX_TIM3_Init();
 8001028:	f000 fafa 	bl	8001620 <MX_TIM3_Init>
  MX_TIM2_Init();
 800102c:	f000 faa0 	bl	8001570 <MX_TIM2_Init>
  MX_USART1_UART_Init();
 8001030:	f000 fc48 	bl	80018c4 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  //HAL_TIM_Encoder_Start_IT(htim, Channel)
  HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_1);
 8001034:	2100      	movs	r1, #0
 8001036:	480b      	ldr	r0, [pc, #44]	; (8001064 <main+0x50>)
 8001038:	f001 fe3c 	bl	8002cb4 <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_2);
 800103c:	2104      	movs	r1, #4
 800103e:	4809      	ldr	r0, [pc, #36]	; (8001064 <main+0x50>)
 8001040:	f001 fe38 	bl	8002cb4 <HAL_TIM_Encoder_Start>
  HAL_TIM_Base_Start_IT(&htim3);
 8001044:	4808      	ldr	r0, [pc, #32]	; (8001068 <main+0x54>)
 8001046:	f001 fc4f 	bl	80028e8 <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 800104a:	2100      	movs	r1, #0
 800104c:	4807      	ldr	r0, [pc, #28]	; (800106c <main+0x58>)
 800104e:	f001 fced 	bl	8002a2c <HAL_TIM_PWM_Start>



  PIDInit(&pid, 0.5,0.25, 0.0001 );
 8001052:	4b07      	ldr	r3, [pc, #28]	; (8001070 <main+0x5c>)
 8001054:	f04f 527a 	mov.w	r2, #1048576000	; 0x3e800000
 8001058:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 800105c:	4805      	ldr	r0, [pc, #20]	; (8001074 <main+0x60>)
 800105e:	f000 f991 	bl	8001384 <PIDInit>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001062:	e7fe      	b.n	8001062 <main+0x4e>
 8001064:	200000e8 	.word	0x200000e8
 8001068:	200000a0 	.word	0x200000a0
 800106c:	20000058 	.word	0x20000058
 8001070:	38d1b717 	.word	0x38d1b717
 8001074:	2000003c 	.word	0x2000003c

08001078 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	b090      	sub	sp, #64	; 0x40
 800107c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800107e:	f107 0318 	add.w	r3, r7, #24
 8001082:	2228      	movs	r2, #40	; 0x28
 8001084:	2100      	movs	r1, #0
 8001086:	4618      	mov	r0, r3
 8001088:	f002 fd64 	bl	8003b54 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800108c:	1d3b      	adds	r3, r7, #4
 800108e:	2200      	movs	r2, #0
 8001090:	601a      	str	r2, [r3, #0]
 8001092:	605a      	str	r2, [r3, #4]
 8001094:	609a      	str	r2, [r3, #8]
 8001096:	60da      	str	r2, [r3, #12]
 8001098:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800109a:	2301      	movs	r3, #1
 800109c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800109e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80010a2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80010a4:	2300      	movs	r3, #0
 80010a6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80010a8:	2301      	movs	r3, #1
 80010aa:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80010ac:	2302      	movs	r3, #2
 80010ae:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80010b0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80010b4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80010b6:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80010ba:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010bc:	f107 0318 	add.w	r3, r7, #24
 80010c0:	4618      	mov	r0, r3
 80010c2:	f000 ffa7 	bl	8002014 <HAL_RCC_OscConfig>
 80010c6:	4603      	mov	r3, r0
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d001      	beq.n	80010d0 <SystemClock_Config+0x58>
  {
    Error_Handler();
 80010cc:	f000 f838 	bl	8001140 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80010d0:	230f      	movs	r3, #15
 80010d2:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80010d4:	2302      	movs	r3, #2
 80010d6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80010d8:	2300      	movs	r3, #0
 80010da:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80010dc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80010e0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80010e2:	2300      	movs	r3, #0
 80010e4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80010e6:	1d3b      	adds	r3, r7, #4
 80010e8:	2102      	movs	r1, #2
 80010ea:	4618      	mov	r0, r3
 80010ec:	f001 fa14 	bl	8002518 <HAL_RCC_ClockConfig>
 80010f0:	4603      	mov	r3, r0
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d001      	beq.n	80010fa <SystemClock_Config+0x82>
  {
    Error_Handler();
 80010f6:	f000 f823 	bl	8001140 <Error_Handler>
  }
}
 80010fa:	bf00      	nop
 80010fc:	3740      	adds	r7, #64	; 0x40
 80010fe:	46bd      	mov	sp, r7
 8001100:	bd80      	pop	{r7, pc}
	...

08001104 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	b082      	sub	sp, #8
 8001108:	af00      	add	r7, sp, #0
 800110a:	6078      	str	r0, [r7, #4]

	  if(htim->Instance == htim3.Instance)
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	681a      	ldr	r2, [r3, #0]
 8001110:	4b07      	ldr	r3, [pc, #28]	; (8001130 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	429a      	cmp	r2, r3
 8001116:	d107      	bne.n	8001128 <HAL_TIM_PeriodElapsedCallback+0x24>
	  {

		  ReadEncoder(&motor);
 8001118:	4806      	ldr	r0, [pc, #24]	; (8001134 <HAL_TIM_PeriodElapsedCallback+0x30>)
 800111a:	f000 f845 	bl	80011a8 <ReadEncoder>
		  MotorTuningVelocity(&pid, &motor, 80.);
 800111e:	4a06      	ldr	r2, [pc, #24]	; (8001138 <HAL_TIM_PeriodElapsedCallback+0x34>)
 8001120:	4904      	ldr	r1, [pc, #16]	; (8001134 <HAL_TIM_PeriodElapsedCallback+0x30>)
 8001122:	4806      	ldr	r0, [pc, #24]	; (800113c <HAL_TIM_PeriodElapsedCallback+0x38>)
 8001124:	f000 f8cc 	bl	80012c0 <MotorTuningVelocity>
		  //HAL_UART_Transmit(&huart1, buf, sizeof(buf),100);



	  }
}
 8001128:	bf00      	nop
 800112a:	3708      	adds	r7, #8
 800112c:	46bd      	mov	sp, r7
 800112e:	bd80      	pop	{r7, pc}
 8001130:	200000a0 	.word	0x200000a0
 8001134:	20000028 	.word	0x20000028
 8001138:	42a00000 	.word	0x42a00000
 800113c:	2000003c 	.word	0x2000003c

08001140 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001140:	b480      	push	{r7}
 8001142:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001144:	b672      	cpsid	i
}
 8001146:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001148:	e7fe      	b.n	8001148 <Error_Handler+0x8>
	...

0800114c <MotorSetDir>:



//0 : CLW
void MotorSetDir(int8_t nDir)
{
 800114c:	b580      	push	{r7, lr}
 800114e:	b082      	sub	sp, #8
 8001150:	af00      	add	r7, sp, #0
 8001152:	4603      	mov	r3, r0
 8001154:	71fb      	strb	r3, [r7, #7]
    switch(nDir)
 8001156:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800115a:	2b00      	cmp	r3, #0
 800115c:	d002      	beq.n	8001164 <MotorSetDir+0x18>
 800115e:	2b01      	cmp	r3, #1
 8001160:	d006      	beq.n	8001170 <MotorSetDir+0x24>
            break;
        case 1:
            HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_SET);
            break;
        default:
            break;
 8001162:	e00b      	b.n	800117c <MotorSetDir+0x30>
            HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);
 8001164:	2200      	movs	r2, #0
 8001166:	2102      	movs	r1, #2
 8001168:	4806      	ldr	r0, [pc, #24]	; (8001184 <MotorSetDir+0x38>)
 800116a:	f000 ff3b 	bl	8001fe4 <HAL_GPIO_WritePin>
            break;
 800116e:	e005      	b.n	800117c <MotorSetDir+0x30>
            HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_SET);
 8001170:	2201      	movs	r2, #1
 8001172:	2102      	movs	r1, #2
 8001174:	4803      	ldr	r0, [pc, #12]	; (8001184 <MotorSetDir+0x38>)
 8001176:	f000 ff35 	bl	8001fe4 <HAL_GPIO_WritePin>
            break;
 800117a:	bf00      	nop
    }
}
 800117c:	bf00      	nop
 800117e:	3708      	adds	r7, #8
 8001180:	46bd      	mov	sp, r7
 8001182:	bd80      	pop	{r7, pc}
 8001184:	40010800 	.word	0x40010800

08001188 <MotorSetDuty>:

//duty cycle of motor
void MotorSetDuty(uint16_t nDuty)
{
 8001188:	b480      	push	{r7}
 800118a:	b083      	sub	sp, #12
 800118c:	af00      	add	r7, sp, #0
 800118e:	4603      	mov	r3, r0
 8001190:	80fb      	strh	r3, [r7, #6]
    __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, nDuty);
 8001192:	4b04      	ldr	r3, [pc, #16]	; (80011a4 <MotorSetDuty+0x1c>)
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	88fa      	ldrh	r2, [r7, #6]
 8001198:	635a      	str	r2, [r3, #52]	; 0x34
}
 800119a:	bf00      	nop
 800119c:	370c      	adds	r7, #12
 800119e:	46bd      	mov	sp, r7
 80011a0:	bc80      	pop	{r7}
 80011a2:	4770      	bx	lr
 80011a4:	20000058 	.word	0x20000058

080011a8 <ReadEncoder>:

// sample 10ms
void ReadEncoder(Motor_t * tmotor){
 80011a8:	b590      	push	{r4, r7, lr}
 80011aa:	b085      	sub	sp, #20
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	6078      	str	r0, [r7, #4]
			tmotor->counter=__HAL_TIM_GET_COUNTER(&htim4);
 80011b0:	4b3b      	ldr	r3, [pc, #236]	; (80012a0 <ReadEncoder+0xf8>)
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011b6:	b29a      	uxth	r2, r3
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	801a      	strh	r2, [r3, #0]

			tmotor->rounds=tmotor->counter/330/4;
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	881b      	ldrh	r3, [r3, #0]
 80011c0:	4a38      	ldr	r2, [pc, #224]	; (80012a4 <ReadEncoder+0xfc>)
 80011c2:	fba2 2303 	umull	r2, r3, r2, r3
 80011c6:	0a5b      	lsrs	r3, r3, #9
 80011c8:	b29a      	uxth	r2, r3
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	805a      	strh	r2, [r3, #2]
			uint16_t temp_data = (tmotor->counter - tmotor->o_counter);
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	881a      	ldrh	r2, [r3, #0]
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	891b      	ldrh	r3, [r3, #8]
 80011d6:	1ad3      	subs	r3, r2, r3
 80011d8:	81fb      	strh	r3, [r7, #14]
			tmotor->velocity = temp_data/330.0/4.0*100.0*60.0; // rpm
 80011da:	89fb      	ldrh	r3, [r7, #14]
 80011dc:	4618      	mov	r0, r3
 80011de:	f7ff f909 	bl	80003f4 <__aeabi_i2d>
 80011e2:	a32d      	add	r3, pc, #180	; (adr r3, 8001298 <ReadEncoder+0xf0>)
 80011e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011e8:	f7ff fa98 	bl	800071c <__aeabi_ddiv>
 80011ec:	4602      	mov	r2, r0
 80011ee:	460b      	mov	r3, r1
 80011f0:	4610      	mov	r0, r2
 80011f2:	4619      	mov	r1, r3
 80011f4:	f04f 0200 	mov.w	r2, #0
 80011f8:	4b2b      	ldr	r3, [pc, #172]	; (80012a8 <ReadEncoder+0x100>)
 80011fa:	f7ff fa8f 	bl	800071c <__aeabi_ddiv>
 80011fe:	4602      	mov	r2, r0
 8001200:	460b      	mov	r3, r1
 8001202:	4610      	mov	r0, r2
 8001204:	4619      	mov	r1, r3
 8001206:	f04f 0200 	mov.w	r2, #0
 800120a:	4b28      	ldr	r3, [pc, #160]	; (80012ac <ReadEncoder+0x104>)
 800120c:	f7ff f95c 	bl	80004c8 <__aeabi_dmul>
 8001210:	4602      	mov	r2, r0
 8001212:	460b      	mov	r3, r1
 8001214:	4610      	mov	r0, r2
 8001216:	4619      	mov	r1, r3
 8001218:	f04f 0200 	mov.w	r2, #0
 800121c:	4b24      	ldr	r3, [pc, #144]	; (80012b0 <ReadEncoder+0x108>)
 800121e:	f7ff f953 	bl	80004c8 <__aeabi_dmul>
 8001222:	4602      	mov	r2, r0
 8001224:	460b      	mov	r3, r1
 8001226:	4610      	mov	r0, r2
 8001228:	4619      	mov	r1, r3
 800122a:	f7ff fb5f 	bl	80008ec <__aeabi_d2f>
 800122e:	4602      	mov	r2, r0
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	605a      	str	r2, [r3, #4]

			tmotor->position+=tmotor->velocity/100/60*360; //deg
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	68dc      	ldr	r4, [r3, #12]
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	685b      	ldr	r3, [r3, #4]
 800123c:	491d      	ldr	r1, [pc, #116]	; (80012b4 <ReadEncoder+0x10c>)
 800123e:	4618      	mov	r0, r3
 8001240:	f7ff fd66 	bl	8000d10 <__aeabi_fdiv>
 8001244:	4603      	mov	r3, r0
 8001246:	491c      	ldr	r1, [pc, #112]	; (80012b8 <ReadEncoder+0x110>)
 8001248:	4618      	mov	r0, r3
 800124a:	f7ff fd61 	bl	8000d10 <__aeabi_fdiv>
 800124e:	4603      	mov	r3, r0
 8001250:	491a      	ldr	r1, [pc, #104]	; (80012bc <ReadEncoder+0x114>)
 8001252:	4618      	mov	r0, r3
 8001254:	f7ff fca8 	bl	8000ba8 <__aeabi_fmul>
 8001258:	4603      	mov	r3, r0
 800125a:	4619      	mov	r1, r3
 800125c:	4620      	mov	r0, r4
 800125e:	f7ff fb9b 	bl	8000998 <__addsf3>
 8001262:	4603      	mov	r3, r0
 8001264:	461a      	mov	r2, r3
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	60da      	str	r2, [r3, #12]
			if(tmotor->position>=360){//
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	68db      	ldr	r3, [r3, #12]
 800126e:	4913      	ldr	r1, [pc, #76]	; (80012bc <ReadEncoder+0x114>)
 8001270:	4618      	mov	r0, r3
 8001272:	f7ff fe4b 	bl	8000f0c <__aeabi_fcmpge>
 8001276:	4603      	mov	r3, r0
 8001278:	2b00      	cmp	r3, #0
 800127a:	d003      	beq.n	8001284 <ReadEncoder+0xdc>
						tmotor->position=0;
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	f04f 0200 	mov.w	r2, #0
 8001282:	60da      	str	r2, [r3, #12]
			}

			tmotor->o_counter=tmotor->counter;
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	881a      	ldrh	r2, [r3, #0]
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	811a      	strh	r2, [r3, #8]
}
 800128c:	bf00      	nop
 800128e:	3714      	adds	r7, #20
 8001290:	46bd      	mov	sp, r7
 8001292:	bd90      	pop	{r4, r7, pc}
 8001294:	f3af 8000 	nop.w
 8001298:	00000000 	.word	0x00000000
 800129c:	4074a000 	.word	0x4074a000
 80012a0:	200000e8 	.word	0x200000e8
 80012a4:	634c0635 	.word	0x634c0635
 80012a8:	40100000 	.word	0x40100000
 80012ac:	40590000 	.word	0x40590000
 80012b0:	404e0000 	.word	0x404e0000
 80012b4:	42c80000 	.word	0x42c80000
 80012b8:	42700000 	.word	0x42700000
 80012bc:	43b40000 	.word	0x43b40000

080012c0 <MotorTuningVelocity>:

//Turning
void MotorTuningVelocity(PID_CONTROL_t * PIDControl,Motor_t * tmotor,float vel)
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	b088      	sub	sp, #32
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	60f8      	str	r0, [r7, #12]
 80012c8:	60b9      	str	r1, [r7, #8]
 80012ca:	607a      	str	r2, [r7, #4]

    float SetPoint = vel;
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	61fb      	str	r3, [r7, #28]
    float Input=tmotor->velocity;
 80012d0:	68bb      	ldr	r3, [r7, #8]
 80012d2:	685b      	ldr	r3, [r3, #4]
 80012d4:	61bb      	str	r3, [r7, #24]
    float g_nDutyCycle = PIDCompute(PIDControl, SetPoint,Input, 0.01f);
 80012d6:	4b1e      	ldr	r3, [pc, #120]	; (8001350 <MotorTuningVelocity+0x90>)
 80012d8:	69ba      	ldr	r2, [r7, #24]
 80012da:	69f9      	ldr	r1, [r7, #28]
 80012dc:	68f8      	ldr	r0, [r7, #12]
 80012de:	f000 f869 	bl	80013b4 <PIDCompute>
 80012e2:	6178      	str	r0, [r7, #20]



    if(g_nDutyCycle >= 0.)
 80012e4:	f04f 0100 	mov.w	r1, #0
 80012e8:	6978      	ldr	r0, [r7, #20]
 80012ea:	f7ff fe0f 	bl	8000f0c <__aeabi_fcmpge>
 80012ee:	4603      	mov	r3, r0
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d00e      	beq.n	8001312 <MotorTuningVelocity+0x52>
    {
        MotorSetDir(0);
 80012f4:	2000      	movs	r0, #0
 80012f6:	f7ff ff29 	bl	800114c <MotorSetDir>
        MotorSetDuty(abs((int)g_nDutyCycle));
 80012fa:	6978      	ldr	r0, [r7, #20]
 80012fc:	f7ff fe1a 	bl	8000f34 <__aeabi_f2iz>
 8001300:	4603      	mov	r3, r0
 8001302:	2b00      	cmp	r3, #0
 8001304:	bfb8      	it	lt
 8001306:	425b      	neglt	r3, r3
 8001308:	b29b      	uxth	r3, r3
 800130a:	4618      	mov	r0, r3
 800130c:	f7ff ff3c 	bl	8001188 <MotorSetDuty>
    {
        MotorSetDir(1);
        MotorSetDuty(99-abs((int)g_nDutyCycle));
    }

}
 8001310:	e019      	b.n	8001346 <MotorTuningVelocity+0x86>
    else if(g_nDutyCycle < 0.)
 8001312:	f04f 0100 	mov.w	r1, #0
 8001316:	6978      	ldr	r0, [r7, #20]
 8001318:	f7ff fde4 	bl	8000ee4 <__aeabi_fcmplt>
 800131c:	4603      	mov	r3, r0
 800131e:	2b00      	cmp	r3, #0
 8001320:	d100      	bne.n	8001324 <MotorTuningVelocity+0x64>
}
 8001322:	e010      	b.n	8001346 <MotorTuningVelocity+0x86>
        MotorSetDir(1);
 8001324:	2001      	movs	r0, #1
 8001326:	f7ff ff11 	bl	800114c <MotorSetDir>
        MotorSetDuty(99-abs((int)g_nDutyCycle));
 800132a:	6978      	ldr	r0, [r7, #20]
 800132c:	f7ff fe02 	bl	8000f34 <__aeabi_f2iz>
 8001330:	4603      	mov	r3, r0
 8001332:	2b00      	cmp	r3, #0
 8001334:	bfb8      	it	lt
 8001336:	425b      	neglt	r3, r3
 8001338:	b29b      	uxth	r3, r3
 800133a:	f1c3 0363 	rsb	r3, r3, #99	; 0x63
 800133e:	b29b      	uxth	r3, r3
 8001340:	4618      	mov	r0, r3
 8001342:	f7ff ff21 	bl	8001188 <MotorSetDuty>
}
 8001346:	bf00      	nop
 8001348:	3720      	adds	r7, #32
 800134a:	46bd      	mov	sp, r7
 800134c:	bd80      	pop	{r7, pc}
 800134e:	bf00      	nop
 8001350:	3c23d70a 	.word	0x3c23d70a

08001354 <PIDReset>:

float Error = 0;

//reset PID params
void PIDReset(PID_CONTROL_t *PID_Ctrl)
{
 8001354:	b480      	push	{r7}
 8001356:	b083      	sub	sp, #12
 8001358:	af00      	add	r7, sp, #0
 800135a:	6078      	str	r0, [r7, #4]
    PID_Ctrl->dIntergral = 0.0f;
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	f04f 0200 	mov.w	r2, #0
 8001362:	611a      	str	r2, [r3, #16]
    PID_Ctrl->dErrorTerm = 0.0f;
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	f04f 0200 	mov.w	r2, #0
 800136a:	60da      	str	r2, [r3, #12]
    Error = 0;
 800136c:	4b04      	ldr	r3, [pc, #16]	; (8001380 <PIDReset+0x2c>)
 800136e:	f04f 0200 	mov.w	r2, #0
 8001372:	601a      	str	r2, [r3, #0]
}
 8001374:	bf00      	nop
 8001376:	370c      	adds	r7, #12
 8001378:	46bd      	mov	sp, r7
 800137a:	bc80      	pop	{r7}
 800137c:	4770      	bx	lr
 800137e:	bf00      	nop
 8001380:	20000054 	.word	0x20000054

08001384 <PIDInit>:

//init PID
void PIDInit(PID_CONTROL_t *PID_Ctrl, float dKp, float dKi, float dKd)
{
 8001384:	b580      	push	{r7, lr}
 8001386:	b084      	sub	sp, #16
 8001388:	af00      	add	r7, sp, #0
 800138a:	60f8      	str	r0, [r7, #12]
 800138c:	60b9      	str	r1, [r7, #8]
 800138e:	607a      	str	r2, [r7, #4]
 8001390:	603b      	str	r3, [r7, #0]
    PIDReset(PID_Ctrl);
 8001392:	68f8      	ldr	r0, [r7, #12]
 8001394:	f7ff ffde 	bl	8001354 <PIDReset>
    PID_Ctrl->dKp = dKp;
 8001398:	68fb      	ldr	r3, [r7, #12]
 800139a:	68ba      	ldr	r2, [r7, #8]
 800139c:	601a      	str	r2, [r3, #0]
    PID_Ctrl->dKi = dKi;
 800139e:	68fb      	ldr	r3, [r7, #12]
 80013a0:	687a      	ldr	r2, [r7, #4]
 80013a2:	605a      	str	r2, [r3, #4]
    PID_Ctrl->dKd = dKd;
 80013a4:	68fb      	ldr	r3, [r7, #12]
 80013a6:	683a      	ldr	r2, [r7, #0]
 80013a8:	609a      	str	r2, [r3, #8]

}
 80013aa:	bf00      	nop
 80013ac:	3710      	adds	r7, #16
 80013ae:	46bd      	mov	sp, r7
 80013b0:	bd80      	pop	{r7, pc}
	...

080013b4 <PIDCompute>:

//Compute PID Controllers
float PIDCompute(PID_CONTROL_t *PID_Ctrl, float SetPoint, float Input, float dTs)
{
 80013b4:	b590      	push	{r4, r7, lr}
 80013b6:	b089      	sub	sp, #36	; 0x24
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	60f8      	str	r0, [r7, #12]
 80013bc:	60b9      	str	r1, [r7, #8]
 80013be:	607a      	str	r2, [r7, #4]
 80013c0:	603b      	str	r3, [r7, #0]
    float dPIDResult;
    Error = SetPoint - Input;
 80013c2:	6879      	ldr	r1, [r7, #4]
 80013c4:	68b8      	ldr	r0, [r7, #8]
 80013c6:	f7ff fae5 	bl	8000994 <__aeabi_fsub>
 80013ca:	4603      	mov	r3, r0
 80013cc:	461a      	mov	r2, r3
 80013ce:	4b32      	ldr	r3, [pc, #200]	; (8001498 <PIDCompute+0xe4>)
 80013d0:	601a      	str	r2, [r3, #0]
    float dP = 0, dI = 0, dD = 0;
 80013d2:	f04f 0300 	mov.w	r3, #0
 80013d6:	61fb      	str	r3, [r7, #28]
 80013d8:	f04f 0300 	mov.w	r3, #0
 80013dc:	61bb      	str	r3, [r7, #24]
 80013de:	f04f 0300 	mov.w	r3, #0
 80013e2:	617b      	str	r3, [r7, #20]
    dP = PID_Ctrl -> dKp *Error;
 80013e4:	68fb      	ldr	r3, [r7, #12]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	4a2b      	ldr	r2, [pc, #172]	; (8001498 <PIDCompute+0xe4>)
 80013ea:	6812      	ldr	r2, [r2, #0]
 80013ec:	4611      	mov	r1, r2
 80013ee:	4618      	mov	r0, r3
 80013f0:	f7ff fbda 	bl	8000ba8 <__aeabi_fmul>
 80013f4:	4603      	mov	r3, r0
 80013f6:	61fb      	str	r3, [r7, #28]
    PID_Ctrl -> dIntergral += Error;
 80013f8:	68fb      	ldr	r3, [r7, #12]
 80013fa:	691b      	ldr	r3, [r3, #16]
 80013fc:	4a26      	ldr	r2, [pc, #152]	; (8001498 <PIDCompute+0xe4>)
 80013fe:	6812      	ldr	r2, [r2, #0]
 8001400:	4611      	mov	r1, r2
 8001402:	4618      	mov	r0, r3
 8001404:	f7ff fac8 	bl	8000998 <__addsf3>
 8001408:	4603      	mov	r3, r0
 800140a:	461a      	mov	r2, r3
 800140c:	68fb      	ldr	r3, [r7, #12]
 800140e:	611a      	str	r2, [r3, #16]
    dI = PID_Ctrl->dKi * dTs/2 * PID_Ctrl->dIntergral;
 8001410:	68fb      	ldr	r3, [r7, #12]
 8001412:	685b      	ldr	r3, [r3, #4]
 8001414:	6839      	ldr	r1, [r7, #0]
 8001416:	4618      	mov	r0, r3
 8001418:	f7ff fbc6 	bl	8000ba8 <__aeabi_fmul>
 800141c:	4603      	mov	r3, r0
 800141e:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8001422:	4618      	mov	r0, r3
 8001424:	f7ff fc74 	bl	8000d10 <__aeabi_fdiv>
 8001428:	4603      	mov	r3, r0
 800142a:	461a      	mov	r2, r3
 800142c:	68fb      	ldr	r3, [r7, #12]
 800142e:	691b      	ldr	r3, [r3, #16]
 8001430:	4619      	mov	r1, r3
 8001432:	4610      	mov	r0, r2
 8001434:	f7ff fbb8 	bl	8000ba8 <__aeabi_fmul>
 8001438:	4603      	mov	r3, r0
 800143a:	61bb      	str	r3, [r7, #24]
    dD = PID_Ctrl->dKd * (Error - PID_Ctrl->dErrorTerm) /dTs;
 800143c:	68fb      	ldr	r3, [r7, #12]
 800143e:	689c      	ldr	r4, [r3, #8]
 8001440:	4b15      	ldr	r3, [pc, #84]	; (8001498 <PIDCompute+0xe4>)
 8001442:	681a      	ldr	r2, [r3, #0]
 8001444:	68fb      	ldr	r3, [r7, #12]
 8001446:	68db      	ldr	r3, [r3, #12]
 8001448:	4619      	mov	r1, r3
 800144a:	4610      	mov	r0, r2
 800144c:	f7ff faa2 	bl	8000994 <__aeabi_fsub>
 8001450:	4603      	mov	r3, r0
 8001452:	4619      	mov	r1, r3
 8001454:	4620      	mov	r0, r4
 8001456:	f7ff fba7 	bl	8000ba8 <__aeabi_fmul>
 800145a:	4603      	mov	r3, r0
 800145c:	6839      	ldr	r1, [r7, #0]
 800145e:	4618      	mov	r0, r3
 8001460:	f7ff fc56 	bl	8000d10 <__aeabi_fdiv>
 8001464:	4603      	mov	r3, r0
 8001466:	617b      	str	r3, [r7, #20]
    dPIDResult = dP + dI + dD;
 8001468:	69b9      	ldr	r1, [r7, #24]
 800146a:	69f8      	ldr	r0, [r7, #28]
 800146c:	f7ff fa94 	bl	8000998 <__addsf3>
 8001470:	4603      	mov	r3, r0
 8001472:	4619      	mov	r1, r3
 8001474:	6978      	ldr	r0, [r7, #20]
 8001476:	f7ff fa8f 	bl	8000998 <__addsf3>
 800147a:	4603      	mov	r3, r0
 800147c:	613b      	str	r3, [r7, #16]
    PID_Ctrl->dErrorTerm = Error;
 800147e:	4b06      	ldr	r3, [pc, #24]	; (8001498 <PIDCompute+0xe4>)
 8001480:	681a      	ldr	r2, [r3, #0]
 8001482:	68fb      	ldr	r3, [r7, #12]
 8001484:	60da      	str	r2, [r3, #12]
    PID_Ctrl->result=dPIDResult;
 8001486:	68fb      	ldr	r3, [r7, #12]
 8001488:	693a      	ldr	r2, [r7, #16]
 800148a:	615a      	str	r2, [r3, #20]
    return dPIDResult;
 800148c:	693b      	ldr	r3, [r7, #16]

}
 800148e:	4618      	mov	r0, r3
 8001490:	3724      	adds	r7, #36	; 0x24
 8001492:	46bd      	mov	sp, r7
 8001494:	bd90      	pop	{r4, r7, pc}
 8001496:	bf00      	nop
 8001498:	20000054 	.word	0x20000054

0800149c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800149c:	b480      	push	{r7}
 800149e:	b085      	sub	sp, #20
 80014a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80014a2:	4b15      	ldr	r3, [pc, #84]	; (80014f8 <HAL_MspInit+0x5c>)
 80014a4:	699b      	ldr	r3, [r3, #24]
 80014a6:	4a14      	ldr	r2, [pc, #80]	; (80014f8 <HAL_MspInit+0x5c>)
 80014a8:	f043 0301 	orr.w	r3, r3, #1
 80014ac:	6193      	str	r3, [r2, #24]
 80014ae:	4b12      	ldr	r3, [pc, #72]	; (80014f8 <HAL_MspInit+0x5c>)
 80014b0:	699b      	ldr	r3, [r3, #24]
 80014b2:	f003 0301 	and.w	r3, r3, #1
 80014b6:	60bb      	str	r3, [r7, #8]
 80014b8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80014ba:	4b0f      	ldr	r3, [pc, #60]	; (80014f8 <HAL_MspInit+0x5c>)
 80014bc:	69db      	ldr	r3, [r3, #28]
 80014be:	4a0e      	ldr	r2, [pc, #56]	; (80014f8 <HAL_MspInit+0x5c>)
 80014c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014c4:	61d3      	str	r3, [r2, #28]
 80014c6:	4b0c      	ldr	r3, [pc, #48]	; (80014f8 <HAL_MspInit+0x5c>)
 80014c8:	69db      	ldr	r3, [r3, #28]
 80014ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014ce:	607b      	str	r3, [r7, #4]
 80014d0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80014d2:	4b0a      	ldr	r3, [pc, #40]	; (80014fc <HAL_MspInit+0x60>)
 80014d4:	685b      	ldr	r3, [r3, #4]
 80014d6:	60fb      	str	r3, [r7, #12]
 80014d8:	68fb      	ldr	r3, [r7, #12]
 80014da:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80014de:	60fb      	str	r3, [r7, #12]
 80014e0:	68fb      	ldr	r3, [r7, #12]
 80014e2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80014e6:	60fb      	str	r3, [r7, #12]
 80014e8:	4a04      	ldr	r2, [pc, #16]	; (80014fc <HAL_MspInit+0x60>)
 80014ea:	68fb      	ldr	r3, [r7, #12]
 80014ec:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80014ee:	bf00      	nop
 80014f0:	3714      	adds	r7, #20
 80014f2:	46bd      	mov	sp, r7
 80014f4:	bc80      	pop	{r7}
 80014f6:	4770      	bx	lr
 80014f8:	40021000 	.word	0x40021000
 80014fc:	40010000 	.word	0x40010000

08001500 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001500:	b480      	push	{r7}
 8001502:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001504:	e7fe      	b.n	8001504 <NMI_Handler+0x4>

08001506 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001506:	b480      	push	{r7}
 8001508:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800150a:	e7fe      	b.n	800150a <HardFault_Handler+0x4>

0800150c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800150c:	b480      	push	{r7}
 800150e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001510:	e7fe      	b.n	8001510 <MemManage_Handler+0x4>

08001512 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001512:	b480      	push	{r7}
 8001514:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001516:	e7fe      	b.n	8001516 <BusFault_Handler+0x4>

08001518 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001518:	b480      	push	{r7}
 800151a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800151c:	e7fe      	b.n	800151c <UsageFault_Handler+0x4>

0800151e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800151e:	b480      	push	{r7}
 8001520:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001522:	bf00      	nop
 8001524:	46bd      	mov	sp, r7
 8001526:	bc80      	pop	{r7}
 8001528:	4770      	bx	lr

0800152a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800152a:	b480      	push	{r7}
 800152c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800152e:	bf00      	nop
 8001530:	46bd      	mov	sp, r7
 8001532:	bc80      	pop	{r7}
 8001534:	4770      	bx	lr

08001536 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001536:	b480      	push	{r7}
 8001538:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800153a:	bf00      	nop
 800153c:	46bd      	mov	sp, r7
 800153e:	bc80      	pop	{r7}
 8001540:	4770      	bx	lr

08001542 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001542:	b580      	push	{r7, lr}
 8001544:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001546:	f000 fa9f 	bl	8001a88 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800154a:	bf00      	nop
 800154c:	bd80      	pop	{r7, pc}
	...

08001550 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001550:	b580      	push	{r7, lr}
 8001552:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001554:	4802      	ldr	r0, [pc, #8]	; (8001560 <TIM3_IRQHandler+0x10>)
 8001556:	f001 fc3b 	bl	8002dd0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800155a:	bf00      	nop
 800155c:	bd80      	pop	{r7, pc}
 800155e:	bf00      	nop
 8001560:	200000a0 	.word	0x200000a0

08001564 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001564:	b480      	push	{r7}
 8001566:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001568:	bf00      	nop
 800156a:	46bd      	mov	sp, r7
 800156c:	bc80      	pop	{r7}
 800156e:	4770      	bx	lr

08001570 <MX_TIM2_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim4;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001570:	b580      	push	{r7, lr}
 8001572:	b08a      	sub	sp, #40	; 0x28
 8001574:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001576:	f107 0320 	add.w	r3, r7, #32
 800157a:	2200      	movs	r2, #0
 800157c:	601a      	str	r2, [r3, #0]
 800157e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001580:	1d3b      	adds	r3, r7, #4
 8001582:	2200      	movs	r2, #0
 8001584:	601a      	str	r2, [r3, #0]
 8001586:	605a      	str	r2, [r3, #4]
 8001588:	609a      	str	r2, [r3, #8]
 800158a:	60da      	str	r2, [r3, #12]
 800158c:	611a      	str	r2, [r3, #16]
 800158e:	615a      	str	r2, [r3, #20]
 8001590:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001592:	4b22      	ldr	r3, [pc, #136]	; (800161c <MX_TIM2_Init+0xac>)
 8001594:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001598:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7199;
 800159a:	4b20      	ldr	r3, [pc, #128]	; (800161c <MX_TIM2_Init+0xac>)
 800159c:	f641 421f 	movw	r2, #7199	; 0x1c1f
 80015a0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED3;
 80015a2:	4b1e      	ldr	r3, [pc, #120]	; (800161c <MX_TIM2_Init+0xac>)
 80015a4:	2260      	movs	r2, #96	; 0x60
 80015a6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 99;
 80015a8:	4b1c      	ldr	r3, [pc, #112]	; (800161c <MX_TIM2_Init+0xac>)
 80015aa:	2263      	movs	r2, #99	; 0x63
 80015ac:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80015ae:	4b1b      	ldr	r3, [pc, #108]	; (800161c <MX_TIM2_Init+0xac>)
 80015b0:	2200      	movs	r2, #0
 80015b2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80015b4:	4b19      	ldr	r3, [pc, #100]	; (800161c <MX_TIM2_Init+0xac>)
 80015b6:	2200      	movs	r2, #0
 80015b8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80015ba:	4818      	ldr	r0, [pc, #96]	; (800161c <MX_TIM2_Init+0xac>)
 80015bc:	f001 f9e6 	bl	800298c <HAL_TIM_PWM_Init>
 80015c0:	4603      	mov	r3, r0
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d001      	beq.n	80015ca <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 80015c6:	f7ff fdbb 	bl	8001140 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80015ca:	2300      	movs	r3, #0
 80015cc:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80015ce:	2300      	movs	r3, #0
 80015d0:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80015d2:	f107 0320 	add.w	r3, r7, #32
 80015d6:	4619      	mov	r1, r3
 80015d8:	4810      	ldr	r0, [pc, #64]	; (800161c <MX_TIM2_Init+0xac>)
 80015da:	f002 f94b 	bl	8003874 <HAL_TIMEx_MasterConfigSynchronization>
 80015de:	4603      	mov	r3, r0
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d001      	beq.n	80015e8 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 80015e4:	f7ff fdac 	bl	8001140 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80015e8:	2360      	movs	r3, #96	; 0x60
 80015ea:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80015ec:	2300      	movs	r3, #0
 80015ee:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80015f0:	2300      	movs	r3, #0
 80015f2:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80015f4:	2300      	movs	r3, #0
 80015f6:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80015f8:	1d3b      	adds	r3, r7, #4
 80015fa:	2200      	movs	r2, #0
 80015fc:	4619      	mov	r1, r3
 80015fe:	4807      	ldr	r0, [pc, #28]	; (800161c <MX_TIM2_Init+0xac>)
 8001600:	f001 fcee 	bl	8002fe0 <HAL_TIM_PWM_ConfigChannel>
 8001604:	4603      	mov	r3, r0
 8001606:	2b00      	cmp	r3, #0
 8001608:	d001      	beq.n	800160e <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 800160a:	f7ff fd99 	bl	8001140 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800160e:	4803      	ldr	r0, [pc, #12]	; (800161c <MX_TIM2_Init+0xac>)
 8001610:	f000 f928 	bl	8001864 <HAL_TIM_MspPostInit>

}
 8001614:	bf00      	nop
 8001616:	3728      	adds	r7, #40	; 0x28
 8001618:	46bd      	mov	sp, r7
 800161a:	bd80      	pop	{r7, pc}
 800161c:	20000058 	.word	0x20000058

08001620 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001620:	b580      	push	{r7, lr}
 8001622:	b086      	sub	sp, #24
 8001624:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001626:	f107 0308 	add.w	r3, r7, #8
 800162a:	2200      	movs	r2, #0
 800162c:	601a      	str	r2, [r3, #0]
 800162e:	605a      	str	r2, [r3, #4]
 8001630:	609a      	str	r2, [r3, #8]
 8001632:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001634:	463b      	mov	r3, r7
 8001636:	2200      	movs	r2, #0
 8001638:	601a      	str	r2, [r3, #0]
 800163a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800163c:	4b1d      	ldr	r3, [pc, #116]	; (80016b4 <MX_TIM3_Init+0x94>)
 800163e:	4a1e      	ldr	r2, [pc, #120]	; (80016b8 <MX_TIM3_Init+0x98>)
 8001640:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 99;
 8001642:	4b1c      	ldr	r3, [pc, #112]	; (80016b4 <MX_TIM3_Init+0x94>)
 8001644:	2263      	movs	r2, #99	; 0x63
 8001646:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED3;
 8001648:	4b1a      	ldr	r3, [pc, #104]	; (80016b4 <MX_TIM3_Init+0x94>)
 800164a:	2260      	movs	r2, #96	; 0x60
 800164c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 7199;
 800164e:	4b19      	ldr	r3, [pc, #100]	; (80016b4 <MX_TIM3_Init+0x94>)
 8001650:	f641 421f 	movw	r2, #7199	; 0x1c1f
 8001654:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001656:	4b17      	ldr	r3, [pc, #92]	; (80016b4 <MX_TIM3_Init+0x94>)
 8001658:	2200      	movs	r2, #0
 800165a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800165c:	4b15      	ldr	r3, [pc, #84]	; (80016b4 <MX_TIM3_Init+0x94>)
 800165e:	2200      	movs	r2, #0
 8001660:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001662:	4814      	ldr	r0, [pc, #80]	; (80016b4 <MX_TIM3_Init+0x94>)
 8001664:	f001 f8f0 	bl	8002848 <HAL_TIM_Base_Init>
 8001668:	4603      	mov	r3, r0
 800166a:	2b00      	cmp	r3, #0
 800166c:	d001      	beq.n	8001672 <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 800166e:	f7ff fd67 	bl	8001140 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001672:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001676:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001678:	f107 0308 	add.w	r3, r7, #8
 800167c:	4619      	mov	r1, r3
 800167e:	480d      	ldr	r0, [pc, #52]	; (80016b4 <MX_TIM3_Init+0x94>)
 8001680:	f001 fd6c 	bl	800315c <HAL_TIM_ConfigClockSource>
 8001684:	4603      	mov	r3, r0
 8001686:	2b00      	cmp	r3, #0
 8001688:	d001      	beq.n	800168e <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 800168a:	f7ff fd59 	bl	8001140 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800168e:	2300      	movs	r3, #0
 8001690:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001692:	2300      	movs	r3, #0
 8001694:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001696:	463b      	mov	r3, r7
 8001698:	4619      	mov	r1, r3
 800169a:	4806      	ldr	r0, [pc, #24]	; (80016b4 <MX_TIM3_Init+0x94>)
 800169c:	f002 f8ea 	bl	8003874 <HAL_TIMEx_MasterConfigSynchronization>
 80016a0:	4603      	mov	r3, r0
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d001      	beq.n	80016aa <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 80016a6:	f7ff fd4b 	bl	8001140 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80016aa:	bf00      	nop
 80016ac:	3718      	adds	r7, #24
 80016ae:	46bd      	mov	sp, r7
 80016b0:	bd80      	pop	{r7, pc}
 80016b2:	bf00      	nop
 80016b4:	200000a0 	.word	0x200000a0
 80016b8:	40000400 	.word	0x40000400

080016bc <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 80016bc:	b580      	push	{r7, lr}
 80016be:	b08c      	sub	sp, #48	; 0x30
 80016c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80016c2:	f107 030c 	add.w	r3, r7, #12
 80016c6:	2224      	movs	r2, #36	; 0x24
 80016c8:	2100      	movs	r1, #0
 80016ca:	4618      	mov	r0, r3
 80016cc:	f002 fa42 	bl	8003b54 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80016d0:	1d3b      	adds	r3, r7, #4
 80016d2:	2200      	movs	r2, #0
 80016d4:	601a      	str	r2, [r3, #0]
 80016d6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80016d8:	4b20      	ldr	r3, [pc, #128]	; (800175c <MX_TIM4_Init+0xa0>)
 80016da:	4a21      	ldr	r2, [pc, #132]	; (8001760 <MX_TIM4_Init+0xa4>)
 80016dc:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 80016de:	4b1f      	ldr	r3, [pc, #124]	; (800175c <MX_TIM4_Init+0xa0>)
 80016e0:	2200      	movs	r2, #0
 80016e2:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016e4:	4b1d      	ldr	r3, [pc, #116]	; (800175c <MX_TIM4_Init+0xa0>)
 80016e6:	2200      	movs	r2, #0
 80016e8:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 80016ea:	4b1c      	ldr	r3, [pc, #112]	; (800175c <MX_TIM4_Init+0xa0>)
 80016ec:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80016f0:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80016f2:	4b1a      	ldr	r3, [pc, #104]	; (800175c <MX_TIM4_Init+0xa0>)
 80016f4:	2200      	movs	r2, #0
 80016f6:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80016f8:	4b18      	ldr	r3, [pc, #96]	; (800175c <MX_TIM4_Init+0xa0>)
 80016fa:	2200      	movs	r2, #0
 80016fc:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80016fe:	2303      	movs	r3, #3
 8001700:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001702:	2300      	movs	r3, #0
 8001704:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001706:	2301      	movs	r3, #1
 8001708:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800170a:	2300      	movs	r3, #0
 800170c:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800170e:	2300      	movs	r3, #0
 8001710:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001712:	2300      	movs	r3, #0
 8001714:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001716:	2301      	movs	r3, #1
 8001718:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800171a:	2300      	movs	r3, #0
 800171c:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 800171e:	2300      	movs	r3, #0
 8001720:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8001722:	f107 030c 	add.w	r3, r7, #12
 8001726:	4619      	mov	r1, r3
 8001728:	480c      	ldr	r0, [pc, #48]	; (800175c <MX_TIM4_Init+0xa0>)
 800172a:	f001 fa21 	bl	8002b70 <HAL_TIM_Encoder_Init>
 800172e:	4603      	mov	r3, r0
 8001730:	2b00      	cmp	r3, #0
 8001732:	d001      	beq.n	8001738 <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 8001734:	f7ff fd04 	bl	8001140 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001738:	2300      	movs	r3, #0
 800173a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800173c:	2300      	movs	r3, #0
 800173e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001740:	1d3b      	adds	r3, r7, #4
 8001742:	4619      	mov	r1, r3
 8001744:	4805      	ldr	r0, [pc, #20]	; (800175c <MX_TIM4_Init+0xa0>)
 8001746:	f002 f895 	bl	8003874 <HAL_TIMEx_MasterConfigSynchronization>
 800174a:	4603      	mov	r3, r0
 800174c:	2b00      	cmp	r3, #0
 800174e:	d001      	beq.n	8001754 <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 8001750:	f7ff fcf6 	bl	8001140 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001754:	bf00      	nop
 8001756:	3730      	adds	r7, #48	; 0x30
 8001758:	46bd      	mov	sp, r7
 800175a:	bd80      	pop	{r7, pc}
 800175c:	200000e8 	.word	0x200000e8
 8001760:	40000800 	.word	0x40000800

08001764 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8001764:	b480      	push	{r7}
 8001766:	b085      	sub	sp, #20
 8001768:	af00      	add	r7, sp, #0
 800176a:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM2)
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001774:	d10b      	bne.n	800178e <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001776:	4b08      	ldr	r3, [pc, #32]	; (8001798 <HAL_TIM_PWM_MspInit+0x34>)
 8001778:	69db      	ldr	r3, [r3, #28]
 800177a:	4a07      	ldr	r2, [pc, #28]	; (8001798 <HAL_TIM_PWM_MspInit+0x34>)
 800177c:	f043 0301 	orr.w	r3, r3, #1
 8001780:	61d3      	str	r3, [r2, #28]
 8001782:	4b05      	ldr	r3, [pc, #20]	; (8001798 <HAL_TIM_PWM_MspInit+0x34>)
 8001784:	69db      	ldr	r3, [r3, #28]
 8001786:	f003 0301 	and.w	r3, r3, #1
 800178a:	60fb      	str	r3, [r7, #12]
 800178c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 800178e:	bf00      	nop
 8001790:	3714      	adds	r7, #20
 8001792:	46bd      	mov	sp, r7
 8001794:	bc80      	pop	{r7}
 8001796:	4770      	bx	lr
 8001798:	40021000 	.word	0x40021000

0800179c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800179c:	b580      	push	{r7, lr}
 800179e:	b084      	sub	sp, #16
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	4a0d      	ldr	r2, [pc, #52]	; (80017e0 <HAL_TIM_Base_MspInit+0x44>)
 80017aa:	4293      	cmp	r3, r2
 80017ac:	d113      	bne.n	80017d6 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80017ae:	4b0d      	ldr	r3, [pc, #52]	; (80017e4 <HAL_TIM_Base_MspInit+0x48>)
 80017b0:	69db      	ldr	r3, [r3, #28]
 80017b2:	4a0c      	ldr	r2, [pc, #48]	; (80017e4 <HAL_TIM_Base_MspInit+0x48>)
 80017b4:	f043 0302 	orr.w	r3, r3, #2
 80017b8:	61d3      	str	r3, [r2, #28]
 80017ba:	4b0a      	ldr	r3, [pc, #40]	; (80017e4 <HAL_TIM_Base_MspInit+0x48>)
 80017bc:	69db      	ldr	r3, [r3, #28]
 80017be:	f003 0302 	and.w	r3, r3, #2
 80017c2:	60fb      	str	r3, [r7, #12]
 80017c4:	68fb      	ldr	r3, [r7, #12]

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80017c6:	2200      	movs	r2, #0
 80017c8:	2100      	movs	r1, #0
 80017ca:	201d      	movs	r0, #29
 80017cc:	f000 fa4f 	bl	8001c6e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80017d0:	201d      	movs	r0, #29
 80017d2:	f000 fa68 	bl	8001ca6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 80017d6:	bf00      	nop
 80017d8:	3710      	adds	r7, #16
 80017da:	46bd      	mov	sp, r7
 80017dc:	bd80      	pop	{r7, pc}
 80017de:	bf00      	nop
 80017e0:	40000400 	.word	0x40000400
 80017e4:	40021000 	.word	0x40021000

080017e8 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 80017e8:	b580      	push	{r7, lr}
 80017ea:	b088      	sub	sp, #32
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017f0:	f107 0310 	add.w	r3, r7, #16
 80017f4:	2200      	movs	r2, #0
 80017f6:	601a      	str	r2, [r3, #0]
 80017f8:	605a      	str	r2, [r3, #4]
 80017fa:	609a      	str	r2, [r3, #8]
 80017fc:	60da      	str	r2, [r3, #12]
  if(tim_encoderHandle->Instance==TIM4)
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	4a15      	ldr	r2, [pc, #84]	; (8001858 <HAL_TIM_Encoder_MspInit+0x70>)
 8001804:	4293      	cmp	r3, r2
 8001806:	d123      	bne.n	8001850 <HAL_TIM_Encoder_MspInit+0x68>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* TIM4 clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001808:	4b14      	ldr	r3, [pc, #80]	; (800185c <HAL_TIM_Encoder_MspInit+0x74>)
 800180a:	69db      	ldr	r3, [r3, #28]
 800180c:	4a13      	ldr	r2, [pc, #76]	; (800185c <HAL_TIM_Encoder_MspInit+0x74>)
 800180e:	f043 0304 	orr.w	r3, r3, #4
 8001812:	61d3      	str	r3, [r2, #28]
 8001814:	4b11      	ldr	r3, [pc, #68]	; (800185c <HAL_TIM_Encoder_MspInit+0x74>)
 8001816:	69db      	ldr	r3, [r3, #28]
 8001818:	f003 0304 	and.w	r3, r3, #4
 800181c:	60fb      	str	r3, [r7, #12]
 800181e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001820:	4b0e      	ldr	r3, [pc, #56]	; (800185c <HAL_TIM_Encoder_MspInit+0x74>)
 8001822:	699b      	ldr	r3, [r3, #24]
 8001824:	4a0d      	ldr	r2, [pc, #52]	; (800185c <HAL_TIM_Encoder_MspInit+0x74>)
 8001826:	f043 0308 	orr.w	r3, r3, #8
 800182a:	6193      	str	r3, [r2, #24]
 800182c:	4b0b      	ldr	r3, [pc, #44]	; (800185c <HAL_TIM_Encoder_MspInit+0x74>)
 800182e:	699b      	ldr	r3, [r3, #24]
 8001830:	f003 0308 	and.w	r3, r3, #8
 8001834:	60bb      	str	r3, [r7, #8]
 8001836:	68bb      	ldr	r3, [r7, #8]
    /**TIM4 GPIO Configuration
    PB6     ------> TIM4_CH1
    PB7     ------> TIM4_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001838:	23c0      	movs	r3, #192	; 0xc0
 800183a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800183c:	2300      	movs	r3, #0
 800183e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001840:	2300      	movs	r3, #0
 8001842:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001844:	f107 0310 	add.w	r3, r7, #16
 8001848:	4619      	mov	r1, r3
 800184a:	4805      	ldr	r0, [pc, #20]	; (8001860 <HAL_TIM_Encoder_MspInit+0x78>)
 800184c:	f000 fa46 	bl	8001cdc <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8001850:	bf00      	nop
 8001852:	3720      	adds	r7, #32
 8001854:	46bd      	mov	sp, r7
 8001856:	bd80      	pop	{r7, pc}
 8001858:	40000800 	.word	0x40000800
 800185c:	40021000 	.word	0x40021000
 8001860:	40010c00 	.word	0x40010c00

08001864 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001864:	b580      	push	{r7, lr}
 8001866:	b088      	sub	sp, #32
 8001868:	af00      	add	r7, sp, #0
 800186a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800186c:	f107 0310 	add.w	r3, r7, #16
 8001870:	2200      	movs	r2, #0
 8001872:	601a      	str	r2, [r3, #0]
 8001874:	605a      	str	r2, [r3, #4]
 8001876:	609a      	str	r2, [r3, #8]
 8001878:	60da      	str	r2, [r3, #12]
  if(timHandle->Instance==TIM2)
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001882:	d117      	bne.n	80018b4 <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001884:	4b0d      	ldr	r3, [pc, #52]	; (80018bc <HAL_TIM_MspPostInit+0x58>)
 8001886:	699b      	ldr	r3, [r3, #24]
 8001888:	4a0c      	ldr	r2, [pc, #48]	; (80018bc <HAL_TIM_MspPostInit+0x58>)
 800188a:	f043 0304 	orr.w	r3, r3, #4
 800188e:	6193      	str	r3, [r2, #24]
 8001890:	4b0a      	ldr	r3, [pc, #40]	; (80018bc <HAL_TIM_MspPostInit+0x58>)
 8001892:	699b      	ldr	r3, [r3, #24]
 8001894:	f003 0304 	and.w	r3, r3, #4
 8001898:	60fb      	str	r3, [r7, #12]
 800189a:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800189c:	2301      	movs	r3, #1
 800189e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018a0:	2302      	movs	r3, #2
 80018a2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018a4:	2302      	movs	r3, #2
 80018a6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018a8:	f107 0310 	add.w	r3, r7, #16
 80018ac:	4619      	mov	r1, r3
 80018ae:	4804      	ldr	r0, [pc, #16]	; (80018c0 <HAL_TIM_MspPostInit+0x5c>)
 80018b0:	f000 fa14 	bl	8001cdc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80018b4:	bf00      	nop
 80018b6:	3720      	adds	r7, #32
 80018b8:	46bd      	mov	sp, r7
 80018ba:	bd80      	pop	{r7, pc}
 80018bc:	40021000 	.word	0x40021000
 80018c0:	40010800 	.word	0x40010800

080018c4 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80018c4:	b580      	push	{r7, lr}
 80018c6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80018c8:	4b11      	ldr	r3, [pc, #68]	; (8001910 <MX_USART1_UART_Init+0x4c>)
 80018ca:	4a12      	ldr	r2, [pc, #72]	; (8001914 <MX_USART1_UART_Init+0x50>)
 80018cc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80018ce:	4b10      	ldr	r3, [pc, #64]	; (8001910 <MX_USART1_UART_Init+0x4c>)
 80018d0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80018d4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80018d6:	4b0e      	ldr	r3, [pc, #56]	; (8001910 <MX_USART1_UART_Init+0x4c>)
 80018d8:	2200      	movs	r2, #0
 80018da:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80018dc:	4b0c      	ldr	r3, [pc, #48]	; (8001910 <MX_USART1_UART_Init+0x4c>)
 80018de:	2200      	movs	r2, #0
 80018e0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80018e2:	4b0b      	ldr	r3, [pc, #44]	; (8001910 <MX_USART1_UART_Init+0x4c>)
 80018e4:	2200      	movs	r2, #0
 80018e6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80018e8:	4b09      	ldr	r3, [pc, #36]	; (8001910 <MX_USART1_UART_Init+0x4c>)
 80018ea:	220c      	movs	r2, #12
 80018ec:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80018ee:	4b08      	ldr	r3, [pc, #32]	; (8001910 <MX_USART1_UART_Init+0x4c>)
 80018f0:	2200      	movs	r2, #0
 80018f2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80018f4:	4b06      	ldr	r3, [pc, #24]	; (8001910 <MX_USART1_UART_Init+0x4c>)
 80018f6:	2200      	movs	r2, #0
 80018f8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80018fa:	4805      	ldr	r0, [pc, #20]	; (8001910 <MX_USART1_UART_Init+0x4c>)
 80018fc:	f002 f82a 	bl	8003954 <HAL_UART_Init>
 8001900:	4603      	mov	r3, r0
 8001902:	2b00      	cmp	r3, #0
 8001904:	d001      	beq.n	800190a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001906:	f7ff fc1b 	bl	8001140 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800190a:	bf00      	nop
 800190c:	bd80      	pop	{r7, pc}
 800190e:	bf00      	nop
 8001910:	20000130 	.word	0x20000130
 8001914:	40013800 	.word	0x40013800

08001918 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001918:	b580      	push	{r7, lr}
 800191a:	b088      	sub	sp, #32
 800191c:	af00      	add	r7, sp, #0
 800191e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001920:	f107 0310 	add.w	r3, r7, #16
 8001924:	2200      	movs	r2, #0
 8001926:	601a      	str	r2, [r3, #0]
 8001928:	605a      	str	r2, [r3, #4]
 800192a:	609a      	str	r2, [r3, #8]
 800192c:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	4a1c      	ldr	r2, [pc, #112]	; (80019a4 <HAL_UART_MspInit+0x8c>)
 8001934:	4293      	cmp	r3, r2
 8001936:	d131      	bne.n	800199c <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001938:	4b1b      	ldr	r3, [pc, #108]	; (80019a8 <HAL_UART_MspInit+0x90>)
 800193a:	699b      	ldr	r3, [r3, #24]
 800193c:	4a1a      	ldr	r2, [pc, #104]	; (80019a8 <HAL_UART_MspInit+0x90>)
 800193e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001942:	6193      	str	r3, [r2, #24]
 8001944:	4b18      	ldr	r3, [pc, #96]	; (80019a8 <HAL_UART_MspInit+0x90>)
 8001946:	699b      	ldr	r3, [r3, #24]
 8001948:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800194c:	60fb      	str	r3, [r7, #12]
 800194e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001950:	4b15      	ldr	r3, [pc, #84]	; (80019a8 <HAL_UART_MspInit+0x90>)
 8001952:	699b      	ldr	r3, [r3, #24]
 8001954:	4a14      	ldr	r2, [pc, #80]	; (80019a8 <HAL_UART_MspInit+0x90>)
 8001956:	f043 0304 	orr.w	r3, r3, #4
 800195a:	6193      	str	r3, [r2, #24]
 800195c:	4b12      	ldr	r3, [pc, #72]	; (80019a8 <HAL_UART_MspInit+0x90>)
 800195e:	699b      	ldr	r3, [r3, #24]
 8001960:	f003 0304 	and.w	r3, r3, #4
 8001964:	60bb      	str	r3, [r7, #8]
 8001966:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001968:	f44f 7300 	mov.w	r3, #512	; 0x200
 800196c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800196e:	2302      	movs	r3, #2
 8001970:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001972:	2303      	movs	r3, #3
 8001974:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001976:	f107 0310 	add.w	r3, r7, #16
 800197a:	4619      	mov	r1, r3
 800197c:	480b      	ldr	r0, [pc, #44]	; (80019ac <HAL_UART_MspInit+0x94>)
 800197e:	f000 f9ad 	bl	8001cdc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001982:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001986:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001988:	2300      	movs	r3, #0
 800198a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800198c:	2300      	movs	r3, #0
 800198e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001990:	f107 0310 	add.w	r3, r7, #16
 8001994:	4619      	mov	r1, r3
 8001996:	4805      	ldr	r0, [pc, #20]	; (80019ac <HAL_UART_MspInit+0x94>)
 8001998:	f000 f9a0 	bl	8001cdc <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 800199c:	bf00      	nop
 800199e:	3720      	adds	r7, #32
 80019a0:	46bd      	mov	sp, r7
 80019a2:	bd80      	pop	{r7, pc}
 80019a4:	40013800 	.word	0x40013800
 80019a8:	40021000 	.word	0x40021000
 80019ac:	40010800 	.word	0x40010800

080019b0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80019b0:	480c      	ldr	r0, [pc, #48]	; (80019e4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80019b2:	490d      	ldr	r1, [pc, #52]	; (80019e8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80019b4:	4a0d      	ldr	r2, [pc, #52]	; (80019ec <LoopFillZerobss+0x1a>)
  movs r3, #0
 80019b6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80019b8:	e002      	b.n	80019c0 <LoopCopyDataInit>

080019ba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80019ba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80019bc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80019be:	3304      	adds	r3, #4

080019c0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80019c0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80019c2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80019c4:	d3f9      	bcc.n	80019ba <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80019c6:	4a0a      	ldr	r2, [pc, #40]	; (80019f0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80019c8:	4c0a      	ldr	r4, [pc, #40]	; (80019f4 <LoopFillZerobss+0x22>)
  movs r3, #0
 80019ca:	2300      	movs	r3, #0
  b LoopFillZerobss
 80019cc:	e001      	b.n	80019d2 <LoopFillZerobss>

080019ce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80019ce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80019d0:	3204      	adds	r2, #4

080019d2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80019d2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80019d4:	d3fb      	bcc.n	80019ce <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80019d6:	f7ff fdc5 	bl	8001564 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80019da:	f002 f897 	bl	8003b0c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80019de:	f7ff fb19 	bl	8001014 <main>
  bx lr
 80019e2:	4770      	bx	lr
  ldr r0, =_sdata
 80019e4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80019e8:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80019ec:	08003bac 	.word	0x08003bac
  ldr r2, =_sbss
 80019f0:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80019f4:	20000178 	.word	0x20000178

080019f8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80019f8:	e7fe      	b.n	80019f8 <ADC1_2_IRQHandler>
	...

080019fc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80019fc:	b580      	push	{r7, lr}
 80019fe:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001a00:	4b08      	ldr	r3, [pc, #32]	; (8001a24 <HAL_Init+0x28>)
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	4a07      	ldr	r2, [pc, #28]	; (8001a24 <HAL_Init+0x28>)
 8001a06:	f043 0310 	orr.w	r3, r3, #16
 8001a0a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a0c:	2003      	movs	r0, #3
 8001a0e:	f000 f923 	bl	8001c58 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001a12:	200f      	movs	r0, #15
 8001a14:	f000 f808 	bl	8001a28 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001a18:	f7ff fd40 	bl	800149c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001a1c:	2300      	movs	r3, #0
}
 8001a1e:	4618      	mov	r0, r3
 8001a20:	bd80      	pop	{r7, pc}
 8001a22:	bf00      	nop
 8001a24:	40022000 	.word	0x40022000

08001a28 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	b082      	sub	sp, #8
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001a30:	4b12      	ldr	r3, [pc, #72]	; (8001a7c <HAL_InitTick+0x54>)
 8001a32:	681a      	ldr	r2, [r3, #0]
 8001a34:	4b12      	ldr	r3, [pc, #72]	; (8001a80 <HAL_InitTick+0x58>)
 8001a36:	781b      	ldrb	r3, [r3, #0]
 8001a38:	4619      	mov	r1, r3
 8001a3a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a3e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001a42:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a46:	4618      	mov	r0, r3
 8001a48:	f000 f93b 	bl	8001cc2 <HAL_SYSTICK_Config>
 8001a4c:	4603      	mov	r3, r0
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d001      	beq.n	8001a56 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001a52:	2301      	movs	r3, #1
 8001a54:	e00e      	b.n	8001a74 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	2b0f      	cmp	r3, #15
 8001a5a:	d80a      	bhi.n	8001a72 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	6879      	ldr	r1, [r7, #4]
 8001a60:	f04f 30ff 	mov.w	r0, #4294967295
 8001a64:	f000 f903 	bl	8001c6e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001a68:	4a06      	ldr	r2, [pc, #24]	; (8001a84 <HAL_InitTick+0x5c>)
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001a6e:	2300      	movs	r3, #0
 8001a70:	e000      	b.n	8001a74 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001a72:	2301      	movs	r3, #1
}
 8001a74:	4618      	mov	r0, r3
 8001a76:	3708      	adds	r7, #8
 8001a78:	46bd      	mov	sp, r7
 8001a7a:	bd80      	pop	{r7, pc}
 8001a7c:	20000000 	.word	0x20000000
 8001a80:	20000008 	.word	0x20000008
 8001a84:	20000004 	.word	0x20000004

08001a88 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a88:	b480      	push	{r7}
 8001a8a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001a8c:	4b05      	ldr	r3, [pc, #20]	; (8001aa4 <HAL_IncTick+0x1c>)
 8001a8e:	781b      	ldrb	r3, [r3, #0]
 8001a90:	461a      	mov	r2, r3
 8001a92:	4b05      	ldr	r3, [pc, #20]	; (8001aa8 <HAL_IncTick+0x20>)
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	4413      	add	r3, r2
 8001a98:	4a03      	ldr	r2, [pc, #12]	; (8001aa8 <HAL_IncTick+0x20>)
 8001a9a:	6013      	str	r3, [r2, #0]
}
 8001a9c:	bf00      	nop
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	bc80      	pop	{r7}
 8001aa2:	4770      	bx	lr
 8001aa4:	20000008 	.word	0x20000008
 8001aa8:	20000174 	.word	0x20000174

08001aac <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001aac:	b480      	push	{r7}
 8001aae:	af00      	add	r7, sp, #0
  return uwTick;
 8001ab0:	4b02      	ldr	r3, [pc, #8]	; (8001abc <HAL_GetTick+0x10>)
 8001ab2:	681b      	ldr	r3, [r3, #0]
}
 8001ab4:	4618      	mov	r0, r3
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	bc80      	pop	{r7}
 8001aba:	4770      	bx	lr
 8001abc:	20000174 	.word	0x20000174

08001ac0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ac0:	b480      	push	{r7}
 8001ac2:	b085      	sub	sp, #20
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	f003 0307 	and.w	r3, r3, #7
 8001ace:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ad0:	4b0c      	ldr	r3, [pc, #48]	; (8001b04 <__NVIC_SetPriorityGrouping+0x44>)
 8001ad2:	68db      	ldr	r3, [r3, #12]
 8001ad4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001ad6:	68ba      	ldr	r2, [r7, #8]
 8001ad8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001adc:	4013      	ands	r3, r2
 8001ade:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ae4:	68bb      	ldr	r3, [r7, #8]
 8001ae6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001ae8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001aec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001af0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001af2:	4a04      	ldr	r2, [pc, #16]	; (8001b04 <__NVIC_SetPriorityGrouping+0x44>)
 8001af4:	68bb      	ldr	r3, [r7, #8]
 8001af6:	60d3      	str	r3, [r2, #12]
}
 8001af8:	bf00      	nop
 8001afa:	3714      	adds	r7, #20
 8001afc:	46bd      	mov	sp, r7
 8001afe:	bc80      	pop	{r7}
 8001b00:	4770      	bx	lr
 8001b02:	bf00      	nop
 8001b04:	e000ed00 	.word	0xe000ed00

08001b08 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001b08:	b480      	push	{r7}
 8001b0a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b0c:	4b04      	ldr	r3, [pc, #16]	; (8001b20 <__NVIC_GetPriorityGrouping+0x18>)
 8001b0e:	68db      	ldr	r3, [r3, #12]
 8001b10:	0a1b      	lsrs	r3, r3, #8
 8001b12:	f003 0307 	and.w	r3, r3, #7
}
 8001b16:	4618      	mov	r0, r3
 8001b18:	46bd      	mov	sp, r7
 8001b1a:	bc80      	pop	{r7}
 8001b1c:	4770      	bx	lr
 8001b1e:	bf00      	nop
 8001b20:	e000ed00 	.word	0xe000ed00

08001b24 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b24:	b480      	push	{r7}
 8001b26:	b083      	sub	sp, #12
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	4603      	mov	r3, r0
 8001b2c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	db0b      	blt.n	8001b4e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001b36:	79fb      	ldrb	r3, [r7, #7]
 8001b38:	f003 021f 	and.w	r2, r3, #31
 8001b3c:	4906      	ldr	r1, [pc, #24]	; (8001b58 <__NVIC_EnableIRQ+0x34>)
 8001b3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b42:	095b      	lsrs	r3, r3, #5
 8001b44:	2001      	movs	r0, #1
 8001b46:	fa00 f202 	lsl.w	r2, r0, r2
 8001b4a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001b4e:	bf00      	nop
 8001b50:	370c      	adds	r7, #12
 8001b52:	46bd      	mov	sp, r7
 8001b54:	bc80      	pop	{r7}
 8001b56:	4770      	bx	lr
 8001b58:	e000e100 	.word	0xe000e100

08001b5c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001b5c:	b480      	push	{r7}
 8001b5e:	b083      	sub	sp, #12
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	4603      	mov	r3, r0
 8001b64:	6039      	str	r1, [r7, #0]
 8001b66:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b68:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	db0a      	blt.n	8001b86 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b70:	683b      	ldr	r3, [r7, #0]
 8001b72:	b2da      	uxtb	r2, r3
 8001b74:	490c      	ldr	r1, [pc, #48]	; (8001ba8 <__NVIC_SetPriority+0x4c>)
 8001b76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b7a:	0112      	lsls	r2, r2, #4
 8001b7c:	b2d2      	uxtb	r2, r2
 8001b7e:	440b      	add	r3, r1
 8001b80:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001b84:	e00a      	b.n	8001b9c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b86:	683b      	ldr	r3, [r7, #0]
 8001b88:	b2da      	uxtb	r2, r3
 8001b8a:	4908      	ldr	r1, [pc, #32]	; (8001bac <__NVIC_SetPriority+0x50>)
 8001b8c:	79fb      	ldrb	r3, [r7, #7]
 8001b8e:	f003 030f 	and.w	r3, r3, #15
 8001b92:	3b04      	subs	r3, #4
 8001b94:	0112      	lsls	r2, r2, #4
 8001b96:	b2d2      	uxtb	r2, r2
 8001b98:	440b      	add	r3, r1
 8001b9a:	761a      	strb	r2, [r3, #24]
}
 8001b9c:	bf00      	nop
 8001b9e:	370c      	adds	r7, #12
 8001ba0:	46bd      	mov	sp, r7
 8001ba2:	bc80      	pop	{r7}
 8001ba4:	4770      	bx	lr
 8001ba6:	bf00      	nop
 8001ba8:	e000e100 	.word	0xe000e100
 8001bac:	e000ed00 	.word	0xe000ed00

08001bb0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001bb0:	b480      	push	{r7}
 8001bb2:	b089      	sub	sp, #36	; 0x24
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	60f8      	str	r0, [r7, #12]
 8001bb8:	60b9      	str	r1, [r7, #8]
 8001bba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	f003 0307 	and.w	r3, r3, #7
 8001bc2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001bc4:	69fb      	ldr	r3, [r7, #28]
 8001bc6:	f1c3 0307 	rsb	r3, r3, #7
 8001bca:	2b04      	cmp	r3, #4
 8001bcc:	bf28      	it	cs
 8001bce:	2304      	movcs	r3, #4
 8001bd0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001bd2:	69fb      	ldr	r3, [r7, #28]
 8001bd4:	3304      	adds	r3, #4
 8001bd6:	2b06      	cmp	r3, #6
 8001bd8:	d902      	bls.n	8001be0 <NVIC_EncodePriority+0x30>
 8001bda:	69fb      	ldr	r3, [r7, #28]
 8001bdc:	3b03      	subs	r3, #3
 8001bde:	e000      	b.n	8001be2 <NVIC_EncodePriority+0x32>
 8001be0:	2300      	movs	r3, #0
 8001be2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001be4:	f04f 32ff 	mov.w	r2, #4294967295
 8001be8:	69bb      	ldr	r3, [r7, #24]
 8001bea:	fa02 f303 	lsl.w	r3, r2, r3
 8001bee:	43da      	mvns	r2, r3
 8001bf0:	68bb      	ldr	r3, [r7, #8]
 8001bf2:	401a      	ands	r2, r3
 8001bf4:	697b      	ldr	r3, [r7, #20]
 8001bf6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001bf8:	f04f 31ff 	mov.w	r1, #4294967295
 8001bfc:	697b      	ldr	r3, [r7, #20]
 8001bfe:	fa01 f303 	lsl.w	r3, r1, r3
 8001c02:	43d9      	mvns	r1, r3
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c08:	4313      	orrs	r3, r2
         );
}
 8001c0a:	4618      	mov	r0, r3
 8001c0c:	3724      	adds	r7, #36	; 0x24
 8001c0e:	46bd      	mov	sp, r7
 8001c10:	bc80      	pop	{r7}
 8001c12:	4770      	bx	lr

08001c14 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001c14:	b580      	push	{r7, lr}
 8001c16:	b082      	sub	sp, #8
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	3b01      	subs	r3, #1
 8001c20:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001c24:	d301      	bcc.n	8001c2a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001c26:	2301      	movs	r3, #1
 8001c28:	e00f      	b.n	8001c4a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001c2a:	4a0a      	ldr	r2, [pc, #40]	; (8001c54 <SysTick_Config+0x40>)
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	3b01      	subs	r3, #1
 8001c30:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001c32:	210f      	movs	r1, #15
 8001c34:	f04f 30ff 	mov.w	r0, #4294967295
 8001c38:	f7ff ff90 	bl	8001b5c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001c3c:	4b05      	ldr	r3, [pc, #20]	; (8001c54 <SysTick_Config+0x40>)
 8001c3e:	2200      	movs	r2, #0
 8001c40:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001c42:	4b04      	ldr	r3, [pc, #16]	; (8001c54 <SysTick_Config+0x40>)
 8001c44:	2207      	movs	r2, #7
 8001c46:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001c48:	2300      	movs	r3, #0
}
 8001c4a:	4618      	mov	r0, r3
 8001c4c:	3708      	adds	r7, #8
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	bd80      	pop	{r7, pc}
 8001c52:	bf00      	nop
 8001c54:	e000e010 	.word	0xe000e010

08001c58 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c58:	b580      	push	{r7, lr}
 8001c5a:	b082      	sub	sp, #8
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001c60:	6878      	ldr	r0, [r7, #4]
 8001c62:	f7ff ff2d 	bl	8001ac0 <__NVIC_SetPriorityGrouping>
}
 8001c66:	bf00      	nop
 8001c68:	3708      	adds	r7, #8
 8001c6a:	46bd      	mov	sp, r7
 8001c6c:	bd80      	pop	{r7, pc}

08001c6e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001c6e:	b580      	push	{r7, lr}
 8001c70:	b086      	sub	sp, #24
 8001c72:	af00      	add	r7, sp, #0
 8001c74:	4603      	mov	r3, r0
 8001c76:	60b9      	str	r1, [r7, #8]
 8001c78:	607a      	str	r2, [r7, #4]
 8001c7a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001c7c:	2300      	movs	r3, #0
 8001c7e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001c80:	f7ff ff42 	bl	8001b08 <__NVIC_GetPriorityGrouping>
 8001c84:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001c86:	687a      	ldr	r2, [r7, #4]
 8001c88:	68b9      	ldr	r1, [r7, #8]
 8001c8a:	6978      	ldr	r0, [r7, #20]
 8001c8c:	f7ff ff90 	bl	8001bb0 <NVIC_EncodePriority>
 8001c90:	4602      	mov	r2, r0
 8001c92:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c96:	4611      	mov	r1, r2
 8001c98:	4618      	mov	r0, r3
 8001c9a:	f7ff ff5f 	bl	8001b5c <__NVIC_SetPriority>
}
 8001c9e:	bf00      	nop
 8001ca0:	3718      	adds	r7, #24
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	bd80      	pop	{r7, pc}

08001ca6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ca6:	b580      	push	{r7, lr}
 8001ca8:	b082      	sub	sp, #8
 8001caa:	af00      	add	r7, sp, #0
 8001cac:	4603      	mov	r3, r0
 8001cae:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001cb0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cb4:	4618      	mov	r0, r3
 8001cb6:	f7ff ff35 	bl	8001b24 <__NVIC_EnableIRQ>
}
 8001cba:	bf00      	nop
 8001cbc:	3708      	adds	r7, #8
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	bd80      	pop	{r7, pc}

08001cc2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001cc2:	b580      	push	{r7, lr}
 8001cc4:	b082      	sub	sp, #8
 8001cc6:	af00      	add	r7, sp, #0
 8001cc8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001cca:	6878      	ldr	r0, [r7, #4]
 8001ccc:	f7ff ffa2 	bl	8001c14 <SysTick_Config>
 8001cd0:	4603      	mov	r3, r0
}
 8001cd2:	4618      	mov	r0, r3
 8001cd4:	3708      	adds	r7, #8
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	bd80      	pop	{r7, pc}
	...

08001cdc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001cdc:	b480      	push	{r7}
 8001cde:	b08b      	sub	sp, #44	; 0x2c
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	6078      	str	r0, [r7, #4]
 8001ce4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001ce6:	2300      	movs	r3, #0
 8001ce8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001cea:	2300      	movs	r3, #0
 8001cec:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001cee:	e169      	b.n	8001fc4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001cf0:	2201      	movs	r2, #1
 8001cf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cf4:	fa02 f303 	lsl.w	r3, r2, r3
 8001cf8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001cfa:	683b      	ldr	r3, [r7, #0]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	69fa      	ldr	r2, [r7, #28]
 8001d00:	4013      	ands	r3, r2
 8001d02:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001d04:	69ba      	ldr	r2, [r7, #24]
 8001d06:	69fb      	ldr	r3, [r7, #28]
 8001d08:	429a      	cmp	r2, r3
 8001d0a:	f040 8158 	bne.w	8001fbe <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001d0e:	683b      	ldr	r3, [r7, #0]
 8001d10:	685b      	ldr	r3, [r3, #4]
 8001d12:	4a9a      	ldr	r2, [pc, #616]	; (8001f7c <HAL_GPIO_Init+0x2a0>)
 8001d14:	4293      	cmp	r3, r2
 8001d16:	d05e      	beq.n	8001dd6 <HAL_GPIO_Init+0xfa>
 8001d18:	4a98      	ldr	r2, [pc, #608]	; (8001f7c <HAL_GPIO_Init+0x2a0>)
 8001d1a:	4293      	cmp	r3, r2
 8001d1c:	d875      	bhi.n	8001e0a <HAL_GPIO_Init+0x12e>
 8001d1e:	4a98      	ldr	r2, [pc, #608]	; (8001f80 <HAL_GPIO_Init+0x2a4>)
 8001d20:	4293      	cmp	r3, r2
 8001d22:	d058      	beq.n	8001dd6 <HAL_GPIO_Init+0xfa>
 8001d24:	4a96      	ldr	r2, [pc, #600]	; (8001f80 <HAL_GPIO_Init+0x2a4>)
 8001d26:	4293      	cmp	r3, r2
 8001d28:	d86f      	bhi.n	8001e0a <HAL_GPIO_Init+0x12e>
 8001d2a:	4a96      	ldr	r2, [pc, #600]	; (8001f84 <HAL_GPIO_Init+0x2a8>)
 8001d2c:	4293      	cmp	r3, r2
 8001d2e:	d052      	beq.n	8001dd6 <HAL_GPIO_Init+0xfa>
 8001d30:	4a94      	ldr	r2, [pc, #592]	; (8001f84 <HAL_GPIO_Init+0x2a8>)
 8001d32:	4293      	cmp	r3, r2
 8001d34:	d869      	bhi.n	8001e0a <HAL_GPIO_Init+0x12e>
 8001d36:	4a94      	ldr	r2, [pc, #592]	; (8001f88 <HAL_GPIO_Init+0x2ac>)
 8001d38:	4293      	cmp	r3, r2
 8001d3a:	d04c      	beq.n	8001dd6 <HAL_GPIO_Init+0xfa>
 8001d3c:	4a92      	ldr	r2, [pc, #584]	; (8001f88 <HAL_GPIO_Init+0x2ac>)
 8001d3e:	4293      	cmp	r3, r2
 8001d40:	d863      	bhi.n	8001e0a <HAL_GPIO_Init+0x12e>
 8001d42:	4a92      	ldr	r2, [pc, #584]	; (8001f8c <HAL_GPIO_Init+0x2b0>)
 8001d44:	4293      	cmp	r3, r2
 8001d46:	d046      	beq.n	8001dd6 <HAL_GPIO_Init+0xfa>
 8001d48:	4a90      	ldr	r2, [pc, #576]	; (8001f8c <HAL_GPIO_Init+0x2b0>)
 8001d4a:	4293      	cmp	r3, r2
 8001d4c:	d85d      	bhi.n	8001e0a <HAL_GPIO_Init+0x12e>
 8001d4e:	2b12      	cmp	r3, #18
 8001d50:	d82a      	bhi.n	8001da8 <HAL_GPIO_Init+0xcc>
 8001d52:	2b12      	cmp	r3, #18
 8001d54:	d859      	bhi.n	8001e0a <HAL_GPIO_Init+0x12e>
 8001d56:	a201      	add	r2, pc, #4	; (adr r2, 8001d5c <HAL_GPIO_Init+0x80>)
 8001d58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d5c:	08001dd7 	.word	0x08001dd7
 8001d60:	08001db1 	.word	0x08001db1
 8001d64:	08001dc3 	.word	0x08001dc3
 8001d68:	08001e05 	.word	0x08001e05
 8001d6c:	08001e0b 	.word	0x08001e0b
 8001d70:	08001e0b 	.word	0x08001e0b
 8001d74:	08001e0b 	.word	0x08001e0b
 8001d78:	08001e0b 	.word	0x08001e0b
 8001d7c:	08001e0b 	.word	0x08001e0b
 8001d80:	08001e0b 	.word	0x08001e0b
 8001d84:	08001e0b 	.word	0x08001e0b
 8001d88:	08001e0b 	.word	0x08001e0b
 8001d8c:	08001e0b 	.word	0x08001e0b
 8001d90:	08001e0b 	.word	0x08001e0b
 8001d94:	08001e0b 	.word	0x08001e0b
 8001d98:	08001e0b 	.word	0x08001e0b
 8001d9c:	08001e0b 	.word	0x08001e0b
 8001da0:	08001db9 	.word	0x08001db9
 8001da4:	08001dcd 	.word	0x08001dcd
 8001da8:	4a79      	ldr	r2, [pc, #484]	; (8001f90 <HAL_GPIO_Init+0x2b4>)
 8001daa:	4293      	cmp	r3, r2
 8001dac:	d013      	beq.n	8001dd6 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001dae:	e02c      	b.n	8001e0a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001db0:	683b      	ldr	r3, [r7, #0]
 8001db2:	68db      	ldr	r3, [r3, #12]
 8001db4:	623b      	str	r3, [r7, #32]
          break;
 8001db6:	e029      	b.n	8001e0c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001db8:	683b      	ldr	r3, [r7, #0]
 8001dba:	68db      	ldr	r3, [r3, #12]
 8001dbc:	3304      	adds	r3, #4
 8001dbe:	623b      	str	r3, [r7, #32]
          break;
 8001dc0:	e024      	b.n	8001e0c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001dc2:	683b      	ldr	r3, [r7, #0]
 8001dc4:	68db      	ldr	r3, [r3, #12]
 8001dc6:	3308      	adds	r3, #8
 8001dc8:	623b      	str	r3, [r7, #32]
          break;
 8001dca:	e01f      	b.n	8001e0c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001dcc:	683b      	ldr	r3, [r7, #0]
 8001dce:	68db      	ldr	r3, [r3, #12]
 8001dd0:	330c      	adds	r3, #12
 8001dd2:	623b      	str	r3, [r7, #32]
          break;
 8001dd4:	e01a      	b.n	8001e0c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001dd6:	683b      	ldr	r3, [r7, #0]
 8001dd8:	689b      	ldr	r3, [r3, #8]
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d102      	bne.n	8001de4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001dde:	2304      	movs	r3, #4
 8001de0:	623b      	str	r3, [r7, #32]
          break;
 8001de2:	e013      	b.n	8001e0c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001de4:	683b      	ldr	r3, [r7, #0]
 8001de6:	689b      	ldr	r3, [r3, #8]
 8001de8:	2b01      	cmp	r3, #1
 8001dea:	d105      	bne.n	8001df8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001dec:	2308      	movs	r3, #8
 8001dee:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	69fa      	ldr	r2, [r7, #28]
 8001df4:	611a      	str	r2, [r3, #16]
          break;
 8001df6:	e009      	b.n	8001e0c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001df8:	2308      	movs	r3, #8
 8001dfa:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	69fa      	ldr	r2, [r7, #28]
 8001e00:	615a      	str	r2, [r3, #20]
          break;
 8001e02:	e003      	b.n	8001e0c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001e04:	2300      	movs	r3, #0
 8001e06:	623b      	str	r3, [r7, #32]
          break;
 8001e08:	e000      	b.n	8001e0c <HAL_GPIO_Init+0x130>
          break;
 8001e0a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001e0c:	69bb      	ldr	r3, [r7, #24]
 8001e0e:	2bff      	cmp	r3, #255	; 0xff
 8001e10:	d801      	bhi.n	8001e16 <HAL_GPIO_Init+0x13a>
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	e001      	b.n	8001e1a <HAL_GPIO_Init+0x13e>
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	3304      	adds	r3, #4
 8001e1a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001e1c:	69bb      	ldr	r3, [r7, #24]
 8001e1e:	2bff      	cmp	r3, #255	; 0xff
 8001e20:	d802      	bhi.n	8001e28 <HAL_GPIO_Init+0x14c>
 8001e22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e24:	009b      	lsls	r3, r3, #2
 8001e26:	e002      	b.n	8001e2e <HAL_GPIO_Init+0x152>
 8001e28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e2a:	3b08      	subs	r3, #8
 8001e2c:	009b      	lsls	r3, r3, #2
 8001e2e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001e30:	697b      	ldr	r3, [r7, #20]
 8001e32:	681a      	ldr	r2, [r3, #0]
 8001e34:	210f      	movs	r1, #15
 8001e36:	693b      	ldr	r3, [r7, #16]
 8001e38:	fa01 f303 	lsl.w	r3, r1, r3
 8001e3c:	43db      	mvns	r3, r3
 8001e3e:	401a      	ands	r2, r3
 8001e40:	6a39      	ldr	r1, [r7, #32]
 8001e42:	693b      	ldr	r3, [r7, #16]
 8001e44:	fa01 f303 	lsl.w	r3, r1, r3
 8001e48:	431a      	orrs	r2, r3
 8001e4a:	697b      	ldr	r3, [r7, #20]
 8001e4c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001e4e:	683b      	ldr	r3, [r7, #0]
 8001e50:	685b      	ldr	r3, [r3, #4]
 8001e52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	f000 80b1 	beq.w	8001fbe <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001e5c:	4b4d      	ldr	r3, [pc, #308]	; (8001f94 <HAL_GPIO_Init+0x2b8>)
 8001e5e:	699b      	ldr	r3, [r3, #24]
 8001e60:	4a4c      	ldr	r2, [pc, #304]	; (8001f94 <HAL_GPIO_Init+0x2b8>)
 8001e62:	f043 0301 	orr.w	r3, r3, #1
 8001e66:	6193      	str	r3, [r2, #24]
 8001e68:	4b4a      	ldr	r3, [pc, #296]	; (8001f94 <HAL_GPIO_Init+0x2b8>)
 8001e6a:	699b      	ldr	r3, [r3, #24]
 8001e6c:	f003 0301 	and.w	r3, r3, #1
 8001e70:	60bb      	str	r3, [r7, #8]
 8001e72:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001e74:	4a48      	ldr	r2, [pc, #288]	; (8001f98 <HAL_GPIO_Init+0x2bc>)
 8001e76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e78:	089b      	lsrs	r3, r3, #2
 8001e7a:	3302      	adds	r3, #2
 8001e7c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e80:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001e82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e84:	f003 0303 	and.w	r3, r3, #3
 8001e88:	009b      	lsls	r3, r3, #2
 8001e8a:	220f      	movs	r2, #15
 8001e8c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e90:	43db      	mvns	r3, r3
 8001e92:	68fa      	ldr	r2, [r7, #12]
 8001e94:	4013      	ands	r3, r2
 8001e96:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	4a40      	ldr	r2, [pc, #256]	; (8001f9c <HAL_GPIO_Init+0x2c0>)
 8001e9c:	4293      	cmp	r3, r2
 8001e9e:	d013      	beq.n	8001ec8 <HAL_GPIO_Init+0x1ec>
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	4a3f      	ldr	r2, [pc, #252]	; (8001fa0 <HAL_GPIO_Init+0x2c4>)
 8001ea4:	4293      	cmp	r3, r2
 8001ea6:	d00d      	beq.n	8001ec4 <HAL_GPIO_Init+0x1e8>
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	4a3e      	ldr	r2, [pc, #248]	; (8001fa4 <HAL_GPIO_Init+0x2c8>)
 8001eac:	4293      	cmp	r3, r2
 8001eae:	d007      	beq.n	8001ec0 <HAL_GPIO_Init+0x1e4>
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	4a3d      	ldr	r2, [pc, #244]	; (8001fa8 <HAL_GPIO_Init+0x2cc>)
 8001eb4:	4293      	cmp	r3, r2
 8001eb6:	d101      	bne.n	8001ebc <HAL_GPIO_Init+0x1e0>
 8001eb8:	2303      	movs	r3, #3
 8001eba:	e006      	b.n	8001eca <HAL_GPIO_Init+0x1ee>
 8001ebc:	2304      	movs	r3, #4
 8001ebe:	e004      	b.n	8001eca <HAL_GPIO_Init+0x1ee>
 8001ec0:	2302      	movs	r3, #2
 8001ec2:	e002      	b.n	8001eca <HAL_GPIO_Init+0x1ee>
 8001ec4:	2301      	movs	r3, #1
 8001ec6:	e000      	b.n	8001eca <HAL_GPIO_Init+0x1ee>
 8001ec8:	2300      	movs	r3, #0
 8001eca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001ecc:	f002 0203 	and.w	r2, r2, #3
 8001ed0:	0092      	lsls	r2, r2, #2
 8001ed2:	4093      	lsls	r3, r2
 8001ed4:	68fa      	ldr	r2, [r7, #12]
 8001ed6:	4313      	orrs	r3, r2
 8001ed8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001eda:	492f      	ldr	r1, [pc, #188]	; (8001f98 <HAL_GPIO_Init+0x2bc>)
 8001edc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ede:	089b      	lsrs	r3, r3, #2
 8001ee0:	3302      	adds	r3, #2
 8001ee2:	68fa      	ldr	r2, [r7, #12]
 8001ee4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001ee8:	683b      	ldr	r3, [r7, #0]
 8001eea:	685b      	ldr	r3, [r3, #4]
 8001eec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d006      	beq.n	8001f02 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001ef4:	4b2d      	ldr	r3, [pc, #180]	; (8001fac <HAL_GPIO_Init+0x2d0>)
 8001ef6:	681a      	ldr	r2, [r3, #0]
 8001ef8:	492c      	ldr	r1, [pc, #176]	; (8001fac <HAL_GPIO_Init+0x2d0>)
 8001efa:	69bb      	ldr	r3, [r7, #24]
 8001efc:	4313      	orrs	r3, r2
 8001efe:	600b      	str	r3, [r1, #0]
 8001f00:	e006      	b.n	8001f10 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001f02:	4b2a      	ldr	r3, [pc, #168]	; (8001fac <HAL_GPIO_Init+0x2d0>)
 8001f04:	681a      	ldr	r2, [r3, #0]
 8001f06:	69bb      	ldr	r3, [r7, #24]
 8001f08:	43db      	mvns	r3, r3
 8001f0a:	4928      	ldr	r1, [pc, #160]	; (8001fac <HAL_GPIO_Init+0x2d0>)
 8001f0c:	4013      	ands	r3, r2
 8001f0e:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001f10:	683b      	ldr	r3, [r7, #0]
 8001f12:	685b      	ldr	r3, [r3, #4]
 8001f14:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d006      	beq.n	8001f2a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001f1c:	4b23      	ldr	r3, [pc, #140]	; (8001fac <HAL_GPIO_Init+0x2d0>)
 8001f1e:	685a      	ldr	r2, [r3, #4]
 8001f20:	4922      	ldr	r1, [pc, #136]	; (8001fac <HAL_GPIO_Init+0x2d0>)
 8001f22:	69bb      	ldr	r3, [r7, #24]
 8001f24:	4313      	orrs	r3, r2
 8001f26:	604b      	str	r3, [r1, #4]
 8001f28:	e006      	b.n	8001f38 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001f2a:	4b20      	ldr	r3, [pc, #128]	; (8001fac <HAL_GPIO_Init+0x2d0>)
 8001f2c:	685a      	ldr	r2, [r3, #4]
 8001f2e:	69bb      	ldr	r3, [r7, #24]
 8001f30:	43db      	mvns	r3, r3
 8001f32:	491e      	ldr	r1, [pc, #120]	; (8001fac <HAL_GPIO_Init+0x2d0>)
 8001f34:	4013      	ands	r3, r2
 8001f36:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001f38:	683b      	ldr	r3, [r7, #0]
 8001f3a:	685b      	ldr	r3, [r3, #4]
 8001f3c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d006      	beq.n	8001f52 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001f44:	4b19      	ldr	r3, [pc, #100]	; (8001fac <HAL_GPIO_Init+0x2d0>)
 8001f46:	689a      	ldr	r2, [r3, #8]
 8001f48:	4918      	ldr	r1, [pc, #96]	; (8001fac <HAL_GPIO_Init+0x2d0>)
 8001f4a:	69bb      	ldr	r3, [r7, #24]
 8001f4c:	4313      	orrs	r3, r2
 8001f4e:	608b      	str	r3, [r1, #8]
 8001f50:	e006      	b.n	8001f60 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001f52:	4b16      	ldr	r3, [pc, #88]	; (8001fac <HAL_GPIO_Init+0x2d0>)
 8001f54:	689a      	ldr	r2, [r3, #8]
 8001f56:	69bb      	ldr	r3, [r7, #24]
 8001f58:	43db      	mvns	r3, r3
 8001f5a:	4914      	ldr	r1, [pc, #80]	; (8001fac <HAL_GPIO_Init+0x2d0>)
 8001f5c:	4013      	ands	r3, r2
 8001f5e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001f60:	683b      	ldr	r3, [r7, #0]
 8001f62:	685b      	ldr	r3, [r3, #4]
 8001f64:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d021      	beq.n	8001fb0 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001f6c:	4b0f      	ldr	r3, [pc, #60]	; (8001fac <HAL_GPIO_Init+0x2d0>)
 8001f6e:	68da      	ldr	r2, [r3, #12]
 8001f70:	490e      	ldr	r1, [pc, #56]	; (8001fac <HAL_GPIO_Init+0x2d0>)
 8001f72:	69bb      	ldr	r3, [r7, #24]
 8001f74:	4313      	orrs	r3, r2
 8001f76:	60cb      	str	r3, [r1, #12]
 8001f78:	e021      	b.n	8001fbe <HAL_GPIO_Init+0x2e2>
 8001f7a:	bf00      	nop
 8001f7c:	10320000 	.word	0x10320000
 8001f80:	10310000 	.word	0x10310000
 8001f84:	10220000 	.word	0x10220000
 8001f88:	10210000 	.word	0x10210000
 8001f8c:	10120000 	.word	0x10120000
 8001f90:	10110000 	.word	0x10110000
 8001f94:	40021000 	.word	0x40021000
 8001f98:	40010000 	.word	0x40010000
 8001f9c:	40010800 	.word	0x40010800
 8001fa0:	40010c00 	.word	0x40010c00
 8001fa4:	40011000 	.word	0x40011000
 8001fa8:	40011400 	.word	0x40011400
 8001fac:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001fb0:	4b0b      	ldr	r3, [pc, #44]	; (8001fe0 <HAL_GPIO_Init+0x304>)
 8001fb2:	68da      	ldr	r2, [r3, #12]
 8001fb4:	69bb      	ldr	r3, [r7, #24]
 8001fb6:	43db      	mvns	r3, r3
 8001fb8:	4909      	ldr	r1, [pc, #36]	; (8001fe0 <HAL_GPIO_Init+0x304>)
 8001fba:	4013      	ands	r3, r2
 8001fbc:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001fbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fc0:	3301      	adds	r3, #1
 8001fc2:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001fc4:	683b      	ldr	r3, [r7, #0]
 8001fc6:	681a      	ldr	r2, [r3, #0]
 8001fc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fca:	fa22 f303 	lsr.w	r3, r2, r3
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	f47f ae8e 	bne.w	8001cf0 <HAL_GPIO_Init+0x14>
  }
}
 8001fd4:	bf00      	nop
 8001fd6:	bf00      	nop
 8001fd8:	372c      	adds	r7, #44	; 0x2c
 8001fda:	46bd      	mov	sp, r7
 8001fdc:	bc80      	pop	{r7}
 8001fde:	4770      	bx	lr
 8001fe0:	40010400 	.word	0x40010400

08001fe4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001fe4:	b480      	push	{r7}
 8001fe6:	b083      	sub	sp, #12
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	6078      	str	r0, [r7, #4]
 8001fec:	460b      	mov	r3, r1
 8001fee:	807b      	strh	r3, [r7, #2]
 8001ff0:	4613      	mov	r3, r2
 8001ff2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001ff4:	787b      	ldrb	r3, [r7, #1]
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d003      	beq.n	8002002 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001ffa:	887a      	ldrh	r2, [r7, #2]
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002000:	e003      	b.n	800200a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002002:	887b      	ldrh	r3, [r7, #2]
 8002004:	041a      	lsls	r2, r3, #16
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	611a      	str	r2, [r3, #16]
}
 800200a:	bf00      	nop
 800200c:	370c      	adds	r7, #12
 800200e:	46bd      	mov	sp, r7
 8002010:	bc80      	pop	{r7}
 8002012:	4770      	bx	lr

08002014 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002014:	b580      	push	{r7, lr}
 8002016:	b086      	sub	sp, #24
 8002018:	af00      	add	r7, sp, #0
 800201a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	2b00      	cmp	r3, #0
 8002020:	d101      	bne.n	8002026 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002022:	2301      	movs	r3, #1
 8002024:	e272      	b.n	800250c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	f003 0301 	and.w	r3, r3, #1
 800202e:	2b00      	cmp	r3, #0
 8002030:	f000 8087 	beq.w	8002142 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002034:	4b92      	ldr	r3, [pc, #584]	; (8002280 <HAL_RCC_OscConfig+0x26c>)
 8002036:	685b      	ldr	r3, [r3, #4]
 8002038:	f003 030c 	and.w	r3, r3, #12
 800203c:	2b04      	cmp	r3, #4
 800203e:	d00c      	beq.n	800205a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002040:	4b8f      	ldr	r3, [pc, #572]	; (8002280 <HAL_RCC_OscConfig+0x26c>)
 8002042:	685b      	ldr	r3, [r3, #4]
 8002044:	f003 030c 	and.w	r3, r3, #12
 8002048:	2b08      	cmp	r3, #8
 800204a:	d112      	bne.n	8002072 <HAL_RCC_OscConfig+0x5e>
 800204c:	4b8c      	ldr	r3, [pc, #560]	; (8002280 <HAL_RCC_OscConfig+0x26c>)
 800204e:	685b      	ldr	r3, [r3, #4]
 8002050:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002054:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002058:	d10b      	bne.n	8002072 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800205a:	4b89      	ldr	r3, [pc, #548]	; (8002280 <HAL_RCC_OscConfig+0x26c>)
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002062:	2b00      	cmp	r3, #0
 8002064:	d06c      	beq.n	8002140 <HAL_RCC_OscConfig+0x12c>
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	685b      	ldr	r3, [r3, #4]
 800206a:	2b00      	cmp	r3, #0
 800206c:	d168      	bne.n	8002140 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800206e:	2301      	movs	r3, #1
 8002070:	e24c      	b.n	800250c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	685b      	ldr	r3, [r3, #4]
 8002076:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800207a:	d106      	bne.n	800208a <HAL_RCC_OscConfig+0x76>
 800207c:	4b80      	ldr	r3, [pc, #512]	; (8002280 <HAL_RCC_OscConfig+0x26c>)
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	4a7f      	ldr	r2, [pc, #508]	; (8002280 <HAL_RCC_OscConfig+0x26c>)
 8002082:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002086:	6013      	str	r3, [r2, #0]
 8002088:	e02e      	b.n	80020e8 <HAL_RCC_OscConfig+0xd4>
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	685b      	ldr	r3, [r3, #4]
 800208e:	2b00      	cmp	r3, #0
 8002090:	d10c      	bne.n	80020ac <HAL_RCC_OscConfig+0x98>
 8002092:	4b7b      	ldr	r3, [pc, #492]	; (8002280 <HAL_RCC_OscConfig+0x26c>)
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	4a7a      	ldr	r2, [pc, #488]	; (8002280 <HAL_RCC_OscConfig+0x26c>)
 8002098:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800209c:	6013      	str	r3, [r2, #0]
 800209e:	4b78      	ldr	r3, [pc, #480]	; (8002280 <HAL_RCC_OscConfig+0x26c>)
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	4a77      	ldr	r2, [pc, #476]	; (8002280 <HAL_RCC_OscConfig+0x26c>)
 80020a4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80020a8:	6013      	str	r3, [r2, #0]
 80020aa:	e01d      	b.n	80020e8 <HAL_RCC_OscConfig+0xd4>
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	685b      	ldr	r3, [r3, #4]
 80020b0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80020b4:	d10c      	bne.n	80020d0 <HAL_RCC_OscConfig+0xbc>
 80020b6:	4b72      	ldr	r3, [pc, #456]	; (8002280 <HAL_RCC_OscConfig+0x26c>)
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	4a71      	ldr	r2, [pc, #452]	; (8002280 <HAL_RCC_OscConfig+0x26c>)
 80020bc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80020c0:	6013      	str	r3, [r2, #0]
 80020c2:	4b6f      	ldr	r3, [pc, #444]	; (8002280 <HAL_RCC_OscConfig+0x26c>)
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	4a6e      	ldr	r2, [pc, #440]	; (8002280 <HAL_RCC_OscConfig+0x26c>)
 80020c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80020cc:	6013      	str	r3, [r2, #0]
 80020ce:	e00b      	b.n	80020e8 <HAL_RCC_OscConfig+0xd4>
 80020d0:	4b6b      	ldr	r3, [pc, #428]	; (8002280 <HAL_RCC_OscConfig+0x26c>)
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	4a6a      	ldr	r2, [pc, #424]	; (8002280 <HAL_RCC_OscConfig+0x26c>)
 80020d6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80020da:	6013      	str	r3, [r2, #0]
 80020dc:	4b68      	ldr	r3, [pc, #416]	; (8002280 <HAL_RCC_OscConfig+0x26c>)
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	4a67      	ldr	r2, [pc, #412]	; (8002280 <HAL_RCC_OscConfig+0x26c>)
 80020e2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80020e6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	685b      	ldr	r3, [r3, #4]
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d013      	beq.n	8002118 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020f0:	f7ff fcdc 	bl	8001aac <HAL_GetTick>
 80020f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020f6:	e008      	b.n	800210a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80020f8:	f7ff fcd8 	bl	8001aac <HAL_GetTick>
 80020fc:	4602      	mov	r2, r0
 80020fe:	693b      	ldr	r3, [r7, #16]
 8002100:	1ad3      	subs	r3, r2, r3
 8002102:	2b64      	cmp	r3, #100	; 0x64
 8002104:	d901      	bls.n	800210a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002106:	2303      	movs	r3, #3
 8002108:	e200      	b.n	800250c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800210a:	4b5d      	ldr	r3, [pc, #372]	; (8002280 <HAL_RCC_OscConfig+0x26c>)
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002112:	2b00      	cmp	r3, #0
 8002114:	d0f0      	beq.n	80020f8 <HAL_RCC_OscConfig+0xe4>
 8002116:	e014      	b.n	8002142 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002118:	f7ff fcc8 	bl	8001aac <HAL_GetTick>
 800211c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800211e:	e008      	b.n	8002132 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002120:	f7ff fcc4 	bl	8001aac <HAL_GetTick>
 8002124:	4602      	mov	r2, r0
 8002126:	693b      	ldr	r3, [r7, #16]
 8002128:	1ad3      	subs	r3, r2, r3
 800212a:	2b64      	cmp	r3, #100	; 0x64
 800212c:	d901      	bls.n	8002132 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800212e:	2303      	movs	r3, #3
 8002130:	e1ec      	b.n	800250c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002132:	4b53      	ldr	r3, [pc, #332]	; (8002280 <HAL_RCC_OscConfig+0x26c>)
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800213a:	2b00      	cmp	r3, #0
 800213c:	d1f0      	bne.n	8002120 <HAL_RCC_OscConfig+0x10c>
 800213e:	e000      	b.n	8002142 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002140:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	f003 0302 	and.w	r3, r3, #2
 800214a:	2b00      	cmp	r3, #0
 800214c:	d063      	beq.n	8002216 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800214e:	4b4c      	ldr	r3, [pc, #304]	; (8002280 <HAL_RCC_OscConfig+0x26c>)
 8002150:	685b      	ldr	r3, [r3, #4]
 8002152:	f003 030c 	and.w	r3, r3, #12
 8002156:	2b00      	cmp	r3, #0
 8002158:	d00b      	beq.n	8002172 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800215a:	4b49      	ldr	r3, [pc, #292]	; (8002280 <HAL_RCC_OscConfig+0x26c>)
 800215c:	685b      	ldr	r3, [r3, #4]
 800215e:	f003 030c 	and.w	r3, r3, #12
 8002162:	2b08      	cmp	r3, #8
 8002164:	d11c      	bne.n	80021a0 <HAL_RCC_OscConfig+0x18c>
 8002166:	4b46      	ldr	r3, [pc, #280]	; (8002280 <HAL_RCC_OscConfig+0x26c>)
 8002168:	685b      	ldr	r3, [r3, #4]
 800216a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800216e:	2b00      	cmp	r3, #0
 8002170:	d116      	bne.n	80021a0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002172:	4b43      	ldr	r3, [pc, #268]	; (8002280 <HAL_RCC_OscConfig+0x26c>)
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	f003 0302 	and.w	r3, r3, #2
 800217a:	2b00      	cmp	r3, #0
 800217c:	d005      	beq.n	800218a <HAL_RCC_OscConfig+0x176>
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	691b      	ldr	r3, [r3, #16]
 8002182:	2b01      	cmp	r3, #1
 8002184:	d001      	beq.n	800218a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002186:	2301      	movs	r3, #1
 8002188:	e1c0      	b.n	800250c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800218a:	4b3d      	ldr	r3, [pc, #244]	; (8002280 <HAL_RCC_OscConfig+0x26c>)
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	695b      	ldr	r3, [r3, #20]
 8002196:	00db      	lsls	r3, r3, #3
 8002198:	4939      	ldr	r1, [pc, #228]	; (8002280 <HAL_RCC_OscConfig+0x26c>)
 800219a:	4313      	orrs	r3, r2
 800219c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800219e:	e03a      	b.n	8002216 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	691b      	ldr	r3, [r3, #16]
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d020      	beq.n	80021ea <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80021a8:	4b36      	ldr	r3, [pc, #216]	; (8002284 <HAL_RCC_OscConfig+0x270>)
 80021aa:	2201      	movs	r2, #1
 80021ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021ae:	f7ff fc7d 	bl	8001aac <HAL_GetTick>
 80021b2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021b4:	e008      	b.n	80021c8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80021b6:	f7ff fc79 	bl	8001aac <HAL_GetTick>
 80021ba:	4602      	mov	r2, r0
 80021bc:	693b      	ldr	r3, [r7, #16]
 80021be:	1ad3      	subs	r3, r2, r3
 80021c0:	2b02      	cmp	r3, #2
 80021c2:	d901      	bls.n	80021c8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80021c4:	2303      	movs	r3, #3
 80021c6:	e1a1      	b.n	800250c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021c8:	4b2d      	ldr	r3, [pc, #180]	; (8002280 <HAL_RCC_OscConfig+0x26c>)
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	f003 0302 	and.w	r3, r3, #2
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d0f0      	beq.n	80021b6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80021d4:	4b2a      	ldr	r3, [pc, #168]	; (8002280 <HAL_RCC_OscConfig+0x26c>)
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	695b      	ldr	r3, [r3, #20]
 80021e0:	00db      	lsls	r3, r3, #3
 80021e2:	4927      	ldr	r1, [pc, #156]	; (8002280 <HAL_RCC_OscConfig+0x26c>)
 80021e4:	4313      	orrs	r3, r2
 80021e6:	600b      	str	r3, [r1, #0]
 80021e8:	e015      	b.n	8002216 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80021ea:	4b26      	ldr	r3, [pc, #152]	; (8002284 <HAL_RCC_OscConfig+0x270>)
 80021ec:	2200      	movs	r2, #0
 80021ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021f0:	f7ff fc5c 	bl	8001aac <HAL_GetTick>
 80021f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80021f6:	e008      	b.n	800220a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80021f8:	f7ff fc58 	bl	8001aac <HAL_GetTick>
 80021fc:	4602      	mov	r2, r0
 80021fe:	693b      	ldr	r3, [r7, #16]
 8002200:	1ad3      	subs	r3, r2, r3
 8002202:	2b02      	cmp	r3, #2
 8002204:	d901      	bls.n	800220a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002206:	2303      	movs	r3, #3
 8002208:	e180      	b.n	800250c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800220a:	4b1d      	ldr	r3, [pc, #116]	; (8002280 <HAL_RCC_OscConfig+0x26c>)
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	f003 0302 	and.w	r3, r3, #2
 8002212:	2b00      	cmp	r3, #0
 8002214:	d1f0      	bne.n	80021f8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	f003 0308 	and.w	r3, r3, #8
 800221e:	2b00      	cmp	r3, #0
 8002220:	d03a      	beq.n	8002298 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	699b      	ldr	r3, [r3, #24]
 8002226:	2b00      	cmp	r3, #0
 8002228:	d019      	beq.n	800225e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800222a:	4b17      	ldr	r3, [pc, #92]	; (8002288 <HAL_RCC_OscConfig+0x274>)
 800222c:	2201      	movs	r2, #1
 800222e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002230:	f7ff fc3c 	bl	8001aac <HAL_GetTick>
 8002234:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002236:	e008      	b.n	800224a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002238:	f7ff fc38 	bl	8001aac <HAL_GetTick>
 800223c:	4602      	mov	r2, r0
 800223e:	693b      	ldr	r3, [r7, #16]
 8002240:	1ad3      	subs	r3, r2, r3
 8002242:	2b02      	cmp	r3, #2
 8002244:	d901      	bls.n	800224a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002246:	2303      	movs	r3, #3
 8002248:	e160      	b.n	800250c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800224a:	4b0d      	ldr	r3, [pc, #52]	; (8002280 <HAL_RCC_OscConfig+0x26c>)
 800224c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800224e:	f003 0302 	and.w	r3, r3, #2
 8002252:	2b00      	cmp	r3, #0
 8002254:	d0f0      	beq.n	8002238 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002256:	2001      	movs	r0, #1
 8002258:	f000 fad8 	bl	800280c <RCC_Delay>
 800225c:	e01c      	b.n	8002298 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800225e:	4b0a      	ldr	r3, [pc, #40]	; (8002288 <HAL_RCC_OscConfig+0x274>)
 8002260:	2200      	movs	r2, #0
 8002262:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002264:	f7ff fc22 	bl	8001aac <HAL_GetTick>
 8002268:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800226a:	e00f      	b.n	800228c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800226c:	f7ff fc1e 	bl	8001aac <HAL_GetTick>
 8002270:	4602      	mov	r2, r0
 8002272:	693b      	ldr	r3, [r7, #16]
 8002274:	1ad3      	subs	r3, r2, r3
 8002276:	2b02      	cmp	r3, #2
 8002278:	d908      	bls.n	800228c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800227a:	2303      	movs	r3, #3
 800227c:	e146      	b.n	800250c <HAL_RCC_OscConfig+0x4f8>
 800227e:	bf00      	nop
 8002280:	40021000 	.word	0x40021000
 8002284:	42420000 	.word	0x42420000
 8002288:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800228c:	4b92      	ldr	r3, [pc, #584]	; (80024d8 <HAL_RCC_OscConfig+0x4c4>)
 800228e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002290:	f003 0302 	and.w	r3, r3, #2
 8002294:	2b00      	cmp	r3, #0
 8002296:	d1e9      	bne.n	800226c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	f003 0304 	and.w	r3, r3, #4
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	f000 80a6 	beq.w	80023f2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80022a6:	2300      	movs	r3, #0
 80022a8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80022aa:	4b8b      	ldr	r3, [pc, #556]	; (80024d8 <HAL_RCC_OscConfig+0x4c4>)
 80022ac:	69db      	ldr	r3, [r3, #28]
 80022ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d10d      	bne.n	80022d2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80022b6:	4b88      	ldr	r3, [pc, #544]	; (80024d8 <HAL_RCC_OscConfig+0x4c4>)
 80022b8:	69db      	ldr	r3, [r3, #28]
 80022ba:	4a87      	ldr	r2, [pc, #540]	; (80024d8 <HAL_RCC_OscConfig+0x4c4>)
 80022bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80022c0:	61d3      	str	r3, [r2, #28]
 80022c2:	4b85      	ldr	r3, [pc, #532]	; (80024d8 <HAL_RCC_OscConfig+0x4c4>)
 80022c4:	69db      	ldr	r3, [r3, #28]
 80022c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022ca:	60bb      	str	r3, [r7, #8]
 80022cc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80022ce:	2301      	movs	r3, #1
 80022d0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022d2:	4b82      	ldr	r3, [pc, #520]	; (80024dc <HAL_RCC_OscConfig+0x4c8>)
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d118      	bne.n	8002310 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80022de:	4b7f      	ldr	r3, [pc, #508]	; (80024dc <HAL_RCC_OscConfig+0x4c8>)
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	4a7e      	ldr	r2, [pc, #504]	; (80024dc <HAL_RCC_OscConfig+0x4c8>)
 80022e4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80022e8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80022ea:	f7ff fbdf 	bl	8001aac <HAL_GetTick>
 80022ee:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022f0:	e008      	b.n	8002304 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80022f2:	f7ff fbdb 	bl	8001aac <HAL_GetTick>
 80022f6:	4602      	mov	r2, r0
 80022f8:	693b      	ldr	r3, [r7, #16]
 80022fa:	1ad3      	subs	r3, r2, r3
 80022fc:	2b64      	cmp	r3, #100	; 0x64
 80022fe:	d901      	bls.n	8002304 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002300:	2303      	movs	r3, #3
 8002302:	e103      	b.n	800250c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002304:	4b75      	ldr	r3, [pc, #468]	; (80024dc <HAL_RCC_OscConfig+0x4c8>)
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800230c:	2b00      	cmp	r3, #0
 800230e:	d0f0      	beq.n	80022f2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	68db      	ldr	r3, [r3, #12]
 8002314:	2b01      	cmp	r3, #1
 8002316:	d106      	bne.n	8002326 <HAL_RCC_OscConfig+0x312>
 8002318:	4b6f      	ldr	r3, [pc, #444]	; (80024d8 <HAL_RCC_OscConfig+0x4c4>)
 800231a:	6a1b      	ldr	r3, [r3, #32]
 800231c:	4a6e      	ldr	r2, [pc, #440]	; (80024d8 <HAL_RCC_OscConfig+0x4c4>)
 800231e:	f043 0301 	orr.w	r3, r3, #1
 8002322:	6213      	str	r3, [r2, #32]
 8002324:	e02d      	b.n	8002382 <HAL_RCC_OscConfig+0x36e>
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	68db      	ldr	r3, [r3, #12]
 800232a:	2b00      	cmp	r3, #0
 800232c:	d10c      	bne.n	8002348 <HAL_RCC_OscConfig+0x334>
 800232e:	4b6a      	ldr	r3, [pc, #424]	; (80024d8 <HAL_RCC_OscConfig+0x4c4>)
 8002330:	6a1b      	ldr	r3, [r3, #32]
 8002332:	4a69      	ldr	r2, [pc, #420]	; (80024d8 <HAL_RCC_OscConfig+0x4c4>)
 8002334:	f023 0301 	bic.w	r3, r3, #1
 8002338:	6213      	str	r3, [r2, #32]
 800233a:	4b67      	ldr	r3, [pc, #412]	; (80024d8 <HAL_RCC_OscConfig+0x4c4>)
 800233c:	6a1b      	ldr	r3, [r3, #32]
 800233e:	4a66      	ldr	r2, [pc, #408]	; (80024d8 <HAL_RCC_OscConfig+0x4c4>)
 8002340:	f023 0304 	bic.w	r3, r3, #4
 8002344:	6213      	str	r3, [r2, #32]
 8002346:	e01c      	b.n	8002382 <HAL_RCC_OscConfig+0x36e>
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	68db      	ldr	r3, [r3, #12]
 800234c:	2b05      	cmp	r3, #5
 800234e:	d10c      	bne.n	800236a <HAL_RCC_OscConfig+0x356>
 8002350:	4b61      	ldr	r3, [pc, #388]	; (80024d8 <HAL_RCC_OscConfig+0x4c4>)
 8002352:	6a1b      	ldr	r3, [r3, #32]
 8002354:	4a60      	ldr	r2, [pc, #384]	; (80024d8 <HAL_RCC_OscConfig+0x4c4>)
 8002356:	f043 0304 	orr.w	r3, r3, #4
 800235a:	6213      	str	r3, [r2, #32]
 800235c:	4b5e      	ldr	r3, [pc, #376]	; (80024d8 <HAL_RCC_OscConfig+0x4c4>)
 800235e:	6a1b      	ldr	r3, [r3, #32]
 8002360:	4a5d      	ldr	r2, [pc, #372]	; (80024d8 <HAL_RCC_OscConfig+0x4c4>)
 8002362:	f043 0301 	orr.w	r3, r3, #1
 8002366:	6213      	str	r3, [r2, #32]
 8002368:	e00b      	b.n	8002382 <HAL_RCC_OscConfig+0x36e>
 800236a:	4b5b      	ldr	r3, [pc, #364]	; (80024d8 <HAL_RCC_OscConfig+0x4c4>)
 800236c:	6a1b      	ldr	r3, [r3, #32]
 800236e:	4a5a      	ldr	r2, [pc, #360]	; (80024d8 <HAL_RCC_OscConfig+0x4c4>)
 8002370:	f023 0301 	bic.w	r3, r3, #1
 8002374:	6213      	str	r3, [r2, #32]
 8002376:	4b58      	ldr	r3, [pc, #352]	; (80024d8 <HAL_RCC_OscConfig+0x4c4>)
 8002378:	6a1b      	ldr	r3, [r3, #32]
 800237a:	4a57      	ldr	r2, [pc, #348]	; (80024d8 <HAL_RCC_OscConfig+0x4c4>)
 800237c:	f023 0304 	bic.w	r3, r3, #4
 8002380:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	68db      	ldr	r3, [r3, #12]
 8002386:	2b00      	cmp	r3, #0
 8002388:	d015      	beq.n	80023b6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800238a:	f7ff fb8f 	bl	8001aac <HAL_GetTick>
 800238e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002390:	e00a      	b.n	80023a8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002392:	f7ff fb8b 	bl	8001aac <HAL_GetTick>
 8002396:	4602      	mov	r2, r0
 8002398:	693b      	ldr	r3, [r7, #16]
 800239a:	1ad3      	subs	r3, r2, r3
 800239c:	f241 3288 	movw	r2, #5000	; 0x1388
 80023a0:	4293      	cmp	r3, r2
 80023a2:	d901      	bls.n	80023a8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80023a4:	2303      	movs	r3, #3
 80023a6:	e0b1      	b.n	800250c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80023a8:	4b4b      	ldr	r3, [pc, #300]	; (80024d8 <HAL_RCC_OscConfig+0x4c4>)
 80023aa:	6a1b      	ldr	r3, [r3, #32]
 80023ac:	f003 0302 	and.w	r3, r3, #2
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d0ee      	beq.n	8002392 <HAL_RCC_OscConfig+0x37e>
 80023b4:	e014      	b.n	80023e0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80023b6:	f7ff fb79 	bl	8001aac <HAL_GetTick>
 80023ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80023bc:	e00a      	b.n	80023d4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80023be:	f7ff fb75 	bl	8001aac <HAL_GetTick>
 80023c2:	4602      	mov	r2, r0
 80023c4:	693b      	ldr	r3, [r7, #16]
 80023c6:	1ad3      	subs	r3, r2, r3
 80023c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80023cc:	4293      	cmp	r3, r2
 80023ce:	d901      	bls.n	80023d4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80023d0:	2303      	movs	r3, #3
 80023d2:	e09b      	b.n	800250c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80023d4:	4b40      	ldr	r3, [pc, #256]	; (80024d8 <HAL_RCC_OscConfig+0x4c4>)
 80023d6:	6a1b      	ldr	r3, [r3, #32]
 80023d8:	f003 0302 	and.w	r3, r3, #2
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d1ee      	bne.n	80023be <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80023e0:	7dfb      	ldrb	r3, [r7, #23]
 80023e2:	2b01      	cmp	r3, #1
 80023e4:	d105      	bne.n	80023f2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80023e6:	4b3c      	ldr	r3, [pc, #240]	; (80024d8 <HAL_RCC_OscConfig+0x4c4>)
 80023e8:	69db      	ldr	r3, [r3, #28]
 80023ea:	4a3b      	ldr	r2, [pc, #236]	; (80024d8 <HAL_RCC_OscConfig+0x4c4>)
 80023ec:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80023f0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	69db      	ldr	r3, [r3, #28]
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	f000 8087 	beq.w	800250a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80023fc:	4b36      	ldr	r3, [pc, #216]	; (80024d8 <HAL_RCC_OscConfig+0x4c4>)
 80023fe:	685b      	ldr	r3, [r3, #4]
 8002400:	f003 030c 	and.w	r3, r3, #12
 8002404:	2b08      	cmp	r3, #8
 8002406:	d061      	beq.n	80024cc <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	69db      	ldr	r3, [r3, #28]
 800240c:	2b02      	cmp	r3, #2
 800240e:	d146      	bne.n	800249e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002410:	4b33      	ldr	r3, [pc, #204]	; (80024e0 <HAL_RCC_OscConfig+0x4cc>)
 8002412:	2200      	movs	r2, #0
 8002414:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002416:	f7ff fb49 	bl	8001aac <HAL_GetTick>
 800241a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800241c:	e008      	b.n	8002430 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800241e:	f7ff fb45 	bl	8001aac <HAL_GetTick>
 8002422:	4602      	mov	r2, r0
 8002424:	693b      	ldr	r3, [r7, #16]
 8002426:	1ad3      	subs	r3, r2, r3
 8002428:	2b02      	cmp	r3, #2
 800242a:	d901      	bls.n	8002430 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800242c:	2303      	movs	r3, #3
 800242e:	e06d      	b.n	800250c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002430:	4b29      	ldr	r3, [pc, #164]	; (80024d8 <HAL_RCC_OscConfig+0x4c4>)
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002438:	2b00      	cmp	r3, #0
 800243a:	d1f0      	bne.n	800241e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	6a1b      	ldr	r3, [r3, #32]
 8002440:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002444:	d108      	bne.n	8002458 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002446:	4b24      	ldr	r3, [pc, #144]	; (80024d8 <HAL_RCC_OscConfig+0x4c4>)
 8002448:	685b      	ldr	r3, [r3, #4]
 800244a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	689b      	ldr	r3, [r3, #8]
 8002452:	4921      	ldr	r1, [pc, #132]	; (80024d8 <HAL_RCC_OscConfig+0x4c4>)
 8002454:	4313      	orrs	r3, r2
 8002456:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002458:	4b1f      	ldr	r3, [pc, #124]	; (80024d8 <HAL_RCC_OscConfig+0x4c4>)
 800245a:	685b      	ldr	r3, [r3, #4]
 800245c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	6a19      	ldr	r1, [r3, #32]
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002468:	430b      	orrs	r3, r1
 800246a:	491b      	ldr	r1, [pc, #108]	; (80024d8 <HAL_RCC_OscConfig+0x4c4>)
 800246c:	4313      	orrs	r3, r2
 800246e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002470:	4b1b      	ldr	r3, [pc, #108]	; (80024e0 <HAL_RCC_OscConfig+0x4cc>)
 8002472:	2201      	movs	r2, #1
 8002474:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002476:	f7ff fb19 	bl	8001aac <HAL_GetTick>
 800247a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800247c:	e008      	b.n	8002490 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800247e:	f7ff fb15 	bl	8001aac <HAL_GetTick>
 8002482:	4602      	mov	r2, r0
 8002484:	693b      	ldr	r3, [r7, #16]
 8002486:	1ad3      	subs	r3, r2, r3
 8002488:	2b02      	cmp	r3, #2
 800248a:	d901      	bls.n	8002490 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800248c:	2303      	movs	r3, #3
 800248e:	e03d      	b.n	800250c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002490:	4b11      	ldr	r3, [pc, #68]	; (80024d8 <HAL_RCC_OscConfig+0x4c4>)
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002498:	2b00      	cmp	r3, #0
 800249a:	d0f0      	beq.n	800247e <HAL_RCC_OscConfig+0x46a>
 800249c:	e035      	b.n	800250a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800249e:	4b10      	ldr	r3, [pc, #64]	; (80024e0 <HAL_RCC_OscConfig+0x4cc>)
 80024a0:	2200      	movs	r2, #0
 80024a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024a4:	f7ff fb02 	bl	8001aac <HAL_GetTick>
 80024a8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80024aa:	e008      	b.n	80024be <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80024ac:	f7ff fafe 	bl	8001aac <HAL_GetTick>
 80024b0:	4602      	mov	r2, r0
 80024b2:	693b      	ldr	r3, [r7, #16]
 80024b4:	1ad3      	subs	r3, r2, r3
 80024b6:	2b02      	cmp	r3, #2
 80024b8:	d901      	bls.n	80024be <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80024ba:	2303      	movs	r3, #3
 80024bc:	e026      	b.n	800250c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80024be:	4b06      	ldr	r3, [pc, #24]	; (80024d8 <HAL_RCC_OscConfig+0x4c4>)
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d1f0      	bne.n	80024ac <HAL_RCC_OscConfig+0x498>
 80024ca:	e01e      	b.n	800250a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	69db      	ldr	r3, [r3, #28]
 80024d0:	2b01      	cmp	r3, #1
 80024d2:	d107      	bne.n	80024e4 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80024d4:	2301      	movs	r3, #1
 80024d6:	e019      	b.n	800250c <HAL_RCC_OscConfig+0x4f8>
 80024d8:	40021000 	.word	0x40021000
 80024dc:	40007000 	.word	0x40007000
 80024e0:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80024e4:	4b0b      	ldr	r3, [pc, #44]	; (8002514 <HAL_RCC_OscConfig+0x500>)
 80024e6:	685b      	ldr	r3, [r3, #4]
 80024e8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	6a1b      	ldr	r3, [r3, #32]
 80024f4:	429a      	cmp	r2, r3
 80024f6:	d106      	bne.n	8002506 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002502:	429a      	cmp	r2, r3
 8002504:	d001      	beq.n	800250a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002506:	2301      	movs	r3, #1
 8002508:	e000      	b.n	800250c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800250a:	2300      	movs	r3, #0
}
 800250c:	4618      	mov	r0, r3
 800250e:	3718      	adds	r7, #24
 8002510:	46bd      	mov	sp, r7
 8002512:	bd80      	pop	{r7, pc}
 8002514:	40021000 	.word	0x40021000

08002518 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002518:	b580      	push	{r7, lr}
 800251a:	b084      	sub	sp, #16
 800251c:	af00      	add	r7, sp, #0
 800251e:	6078      	str	r0, [r7, #4]
 8002520:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	2b00      	cmp	r3, #0
 8002526:	d101      	bne.n	800252c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002528:	2301      	movs	r3, #1
 800252a:	e0d0      	b.n	80026ce <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800252c:	4b6a      	ldr	r3, [pc, #424]	; (80026d8 <HAL_RCC_ClockConfig+0x1c0>)
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	f003 0307 	and.w	r3, r3, #7
 8002534:	683a      	ldr	r2, [r7, #0]
 8002536:	429a      	cmp	r2, r3
 8002538:	d910      	bls.n	800255c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800253a:	4b67      	ldr	r3, [pc, #412]	; (80026d8 <HAL_RCC_ClockConfig+0x1c0>)
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	f023 0207 	bic.w	r2, r3, #7
 8002542:	4965      	ldr	r1, [pc, #404]	; (80026d8 <HAL_RCC_ClockConfig+0x1c0>)
 8002544:	683b      	ldr	r3, [r7, #0]
 8002546:	4313      	orrs	r3, r2
 8002548:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800254a:	4b63      	ldr	r3, [pc, #396]	; (80026d8 <HAL_RCC_ClockConfig+0x1c0>)
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	f003 0307 	and.w	r3, r3, #7
 8002552:	683a      	ldr	r2, [r7, #0]
 8002554:	429a      	cmp	r2, r3
 8002556:	d001      	beq.n	800255c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002558:	2301      	movs	r3, #1
 800255a:	e0b8      	b.n	80026ce <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	f003 0302 	and.w	r3, r3, #2
 8002564:	2b00      	cmp	r3, #0
 8002566:	d020      	beq.n	80025aa <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	f003 0304 	and.w	r3, r3, #4
 8002570:	2b00      	cmp	r3, #0
 8002572:	d005      	beq.n	8002580 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002574:	4b59      	ldr	r3, [pc, #356]	; (80026dc <HAL_RCC_ClockConfig+0x1c4>)
 8002576:	685b      	ldr	r3, [r3, #4]
 8002578:	4a58      	ldr	r2, [pc, #352]	; (80026dc <HAL_RCC_ClockConfig+0x1c4>)
 800257a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800257e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	f003 0308 	and.w	r3, r3, #8
 8002588:	2b00      	cmp	r3, #0
 800258a:	d005      	beq.n	8002598 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800258c:	4b53      	ldr	r3, [pc, #332]	; (80026dc <HAL_RCC_ClockConfig+0x1c4>)
 800258e:	685b      	ldr	r3, [r3, #4]
 8002590:	4a52      	ldr	r2, [pc, #328]	; (80026dc <HAL_RCC_ClockConfig+0x1c4>)
 8002592:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002596:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002598:	4b50      	ldr	r3, [pc, #320]	; (80026dc <HAL_RCC_ClockConfig+0x1c4>)
 800259a:	685b      	ldr	r3, [r3, #4]
 800259c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	689b      	ldr	r3, [r3, #8]
 80025a4:	494d      	ldr	r1, [pc, #308]	; (80026dc <HAL_RCC_ClockConfig+0x1c4>)
 80025a6:	4313      	orrs	r3, r2
 80025a8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	f003 0301 	and.w	r3, r3, #1
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d040      	beq.n	8002638 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	685b      	ldr	r3, [r3, #4]
 80025ba:	2b01      	cmp	r3, #1
 80025bc:	d107      	bne.n	80025ce <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025be:	4b47      	ldr	r3, [pc, #284]	; (80026dc <HAL_RCC_ClockConfig+0x1c4>)
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d115      	bne.n	80025f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80025ca:	2301      	movs	r3, #1
 80025cc:	e07f      	b.n	80026ce <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	685b      	ldr	r3, [r3, #4]
 80025d2:	2b02      	cmp	r3, #2
 80025d4:	d107      	bne.n	80025e6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80025d6:	4b41      	ldr	r3, [pc, #260]	; (80026dc <HAL_RCC_ClockConfig+0x1c4>)
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d109      	bne.n	80025f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80025e2:	2301      	movs	r3, #1
 80025e4:	e073      	b.n	80026ce <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025e6:	4b3d      	ldr	r3, [pc, #244]	; (80026dc <HAL_RCC_ClockConfig+0x1c4>)
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	f003 0302 	and.w	r3, r3, #2
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d101      	bne.n	80025f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80025f2:	2301      	movs	r3, #1
 80025f4:	e06b      	b.n	80026ce <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80025f6:	4b39      	ldr	r3, [pc, #228]	; (80026dc <HAL_RCC_ClockConfig+0x1c4>)
 80025f8:	685b      	ldr	r3, [r3, #4]
 80025fa:	f023 0203 	bic.w	r2, r3, #3
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	685b      	ldr	r3, [r3, #4]
 8002602:	4936      	ldr	r1, [pc, #216]	; (80026dc <HAL_RCC_ClockConfig+0x1c4>)
 8002604:	4313      	orrs	r3, r2
 8002606:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002608:	f7ff fa50 	bl	8001aac <HAL_GetTick>
 800260c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800260e:	e00a      	b.n	8002626 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002610:	f7ff fa4c 	bl	8001aac <HAL_GetTick>
 8002614:	4602      	mov	r2, r0
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	1ad3      	subs	r3, r2, r3
 800261a:	f241 3288 	movw	r2, #5000	; 0x1388
 800261e:	4293      	cmp	r3, r2
 8002620:	d901      	bls.n	8002626 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002622:	2303      	movs	r3, #3
 8002624:	e053      	b.n	80026ce <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002626:	4b2d      	ldr	r3, [pc, #180]	; (80026dc <HAL_RCC_ClockConfig+0x1c4>)
 8002628:	685b      	ldr	r3, [r3, #4]
 800262a:	f003 020c 	and.w	r2, r3, #12
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	685b      	ldr	r3, [r3, #4]
 8002632:	009b      	lsls	r3, r3, #2
 8002634:	429a      	cmp	r2, r3
 8002636:	d1eb      	bne.n	8002610 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002638:	4b27      	ldr	r3, [pc, #156]	; (80026d8 <HAL_RCC_ClockConfig+0x1c0>)
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	f003 0307 	and.w	r3, r3, #7
 8002640:	683a      	ldr	r2, [r7, #0]
 8002642:	429a      	cmp	r2, r3
 8002644:	d210      	bcs.n	8002668 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002646:	4b24      	ldr	r3, [pc, #144]	; (80026d8 <HAL_RCC_ClockConfig+0x1c0>)
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	f023 0207 	bic.w	r2, r3, #7
 800264e:	4922      	ldr	r1, [pc, #136]	; (80026d8 <HAL_RCC_ClockConfig+0x1c0>)
 8002650:	683b      	ldr	r3, [r7, #0]
 8002652:	4313      	orrs	r3, r2
 8002654:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002656:	4b20      	ldr	r3, [pc, #128]	; (80026d8 <HAL_RCC_ClockConfig+0x1c0>)
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	f003 0307 	and.w	r3, r3, #7
 800265e:	683a      	ldr	r2, [r7, #0]
 8002660:	429a      	cmp	r2, r3
 8002662:	d001      	beq.n	8002668 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002664:	2301      	movs	r3, #1
 8002666:	e032      	b.n	80026ce <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	f003 0304 	and.w	r3, r3, #4
 8002670:	2b00      	cmp	r3, #0
 8002672:	d008      	beq.n	8002686 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002674:	4b19      	ldr	r3, [pc, #100]	; (80026dc <HAL_RCC_ClockConfig+0x1c4>)
 8002676:	685b      	ldr	r3, [r3, #4]
 8002678:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	68db      	ldr	r3, [r3, #12]
 8002680:	4916      	ldr	r1, [pc, #88]	; (80026dc <HAL_RCC_ClockConfig+0x1c4>)
 8002682:	4313      	orrs	r3, r2
 8002684:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	f003 0308 	and.w	r3, r3, #8
 800268e:	2b00      	cmp	r3, #0
 8002690:	d009      	beq.n	80026a6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002692:	4b12      	ldr	r3, [pc, #72]	; (80026dc <HAL_RCC_ClockConfig+0x1c4>)
 8002694:	685b      	ldr	r3, [r3, #4]
 8002696:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	691b      	ldr	r3, [r3, #16]
 800269e:	00db      	lsls	r3, r3, #3
 80026a0:	490e      	ldr	r1, [pc, #56]	; (80026dc <HAL_RCC_ClockConfig+0x1c4>)
 80026a2:	4313      	orrs	r3, r2
 80026a4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80026a6:	f000 f821 	bl	80026ec <HAL_RCC_GetSysClockFreq>
 80026aa:	4602      	mov	r2, r0
 80026ac:	4b0b      	ldr	r3, [pc, #44]	; (80026dc <HAL_RCC_ClockConfig+0x1c4>)
 80026ae:	685b      	ldr	r3, [r3, #4]
 80026b0:	091b      	lsrs	r3, r3, #4
 80026b2:	f003 030f 	and.w	r3, r3, #15
 80026b6:	490a      	ldr	r1, [pc, #40]	; (80026e0 <HAL_RCC_ClockConfig+0x1c8>)
 80026b8:	5ccb      	ldrb	r3, [r1, r3]
 80026ba:	fa22 f303 	lsr.w	r3, r2, r3
 80026be:	4a09      	ldr	r2, [pc, #36]	; (80026e4 <HAL_RCC_ClockConfig+0x1cc>)
 80026c0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80026c2:	4b09      	ldr	r3, [pc, #36]	; (80026e8 <HAL_RCC_ClockConfig+0x1d0>)
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	4618      	mov	r0, r3
 80026c8:	f7ff f9ae 	bl	8001a28 <HAL_InitTick>

  return HAL_OK;
 80026cc:	2300      	movs	r3, #0
}
 80026ce:	4618      	mov	r0, r3
 80026d0:	3710      	adds	r7, #16
 80026d2:	46bd      	mov	sp, r7
 80026d4:	bd80      	pop	{r7, pc}
 80026d6:	bf00      	nop
 80026d8:	40022000 	.word	0x40022000
 80026dc:	40021000 	.word	0x40021000
 80026e0:	08003b8c 	.word	0x08003b8c
 80026e4:	20000000 	.word	0x20000000
 80026e8:	20000004 	.word	0x20000004

080026ec <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80026ec:	b490      	push	{r4, r7}
 80026ee:	b08a      	sub	sp, #40	; 0x28
 80026f0:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80026f2:	4b29      	ldr	r3, [pc, #164]	; (8002798 <HAL_RCC_GetSysClockFreq+0xac>)
 80026f4:	1d3c      	adds	r4, r7, #4
 80026f6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80026f8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80026fc:	f240 2301 	movw	r3, #513	; 0x201
 8002700:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002702:	2300      	movs	r3, #0
 8002704:	61fb      	str	r3, [r7, #28]
 8002706:	2300      	movs	r3, #0
 8002708:	61bb      	str	r3, [r7, #24]
 800270a:	2300      	movs	r3, #0
 800270c:	627b      	str	r3, [r7, #36]	; 0x24
 800270e:	2300      	movs	r3, #0
 8002710:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002712:	2300      	movs	r3, #0
 8002714:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002716:	4b21      	ldr	r3, [pc, #132]	; (800279c <HAL_RCC_GetSysClockFreq+0xb0>)
 8002718:	685b      	ldr	r3, [r3, #4]
 800271a:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800271c:	69fb      	ldr	r3, [r7, #28]
 800271e:	f003 030c 	and.w	r3, r3, #12
 8002722:	2b04      	cmp	r3, #4
 8002724:	d002      	beq.n	800272c <HAL_RCC_GetSysClockFreq+0x40>
 8002726:	2b08      	cmp	r3, #8
 8002728:	d003      	beq.n	8002732 <HAL_RCC_GetSysClockFreq+0x46>
 800272a:	e02b      	b.n	8002784 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800272c:	4b1c      	ldr	r3, [pc, #112]	; (80027a0 <HAL_RCC_GetSysClockFreq+0xb4>)
 800272e:	623b      	str	r3, [r7, #32]
      break;
 8002730:	e02b      	b.n	800278a <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002732:	69fb      	ldr	r3, [r7, #28]
 8002734:	0c9b      	lsrs	r3, r3, #18
 8002736:	f003 030f 	and.w	r3, r3, #15
 800273a:	3328      	adds	r3, #40	; 0x28
 800273c:	443b      	add	r3, r7
 800273e:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002742:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002744:	69fb      	ldr	r3, [r7, #28]
 8002746:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800274a:	2b00      	cmp	r3, #0
 800274c:	d012      	beq.n	8002774 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800274e:	4b13      	ldr	r3, [pc, #76]	; (800279c <HAL_RCC_GetSysClockFreq+0xb0>)
 8002750:	685b      	ldr	r3, [r3, #4]
 8002752:	0c5b      	lsrs	r3, r3, #17
 8002754:	f003 0301 	and.w	r3, r3, #1
 8002758:	3328      	adds	r3, #40	; 0x28
 800275a:	443b      	add	r3, r7
 800275c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002760:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002762:	697b      	ldr	r3, [r7, #20]
 8002764:	4a0e      	ldr	r2, [pc, #56]	; (80027a0 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002766:	fb03 f202 	mul.w	r2, r3, r2
 800276a:	69bb      	ldr	r3, [r7, #24]
 800276c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002770:	627b      	str	r3, [r7, #36]	; 0x24
 8002772:	e004      	b.n	800277e <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002774:	697b      	ldr	r3, [r7, #20]
 8002776:	4a0b      	ldr	r2, [pc, #44]	; (80027a4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002778:	fb02 f303 	mul.w	r3, r2, r3
 800277c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800277e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002780:	623b      	str	r3, [r7, #32]
      break;
 8002782:	e002      	b.n	800278a <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002784:	4b06      	ldr	r3, [pc, #24]	; (80027a0 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002786:	623b      	str	r3, [r7, #32]
      break;
 8002788:	bf00      	nop
    }
  }
  return sysclockfreq;
 800278a:	6a3b      	ldr	r3, [r7, #32]
}
 800278c:	4618      	mov	r0, r3
 800278e:	3728      	adds	r7, #40	; 0x28
 8002790:	46bd      	mov	sp, r7
 8002792:	bc90      	pop	{r4, r7}
 8002794:	4770      	bx	lr
 8002796:	bf00      	nop
 8002798:	08003b7c 	.word	0x08003b7c
 800279c:	40021000 	.word	0x40021000
 80027a0:	007a1200 	.word	0x007a1200
 80027a4:	003d0900 	.word	0x003d0900

080027a8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80027a8:	b480      	push	{r7}
 80027aa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80027ac:	4b02      	ldr	r3, [pc, #8]	; (80027b8 <HAL_RCC_GetHCLKFreq+0x10>)
 80027ae:	681b      	ldr	r3, [r3, #0]
}
 80027b0:	4618      	mov	r0, r3
 80027b2:	46bd      	mov	sp, r7
 80027b4:	bc80      	pop	{r7}
 80027b6:	4770      	bx	lr
 80027b8:	20000000 	.word	0x20000000

080027bc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80027bc:	b580      	push	{r7, lr}
 80027be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80027c0:	f7ff fff2 	bl	80027a8 <HAL_RCC_GetHCLKFreq>
 80027c4:	4602      	mov	r2, r0
 80027c6:	4b05      	ldr	r3, [pc, #20]	; (80027dc <HAL_RCC_GetPCLK1Freq+0x20>)
 80027c8:	685b      	ldr	r3, [r3, #4]
 80027ca:	0a1b      	lsrs	r3, r3, #8
 80027cc:	f003 0307 	and.w	r3, r3, #7
 80027d0:	4903      	ldr	r1, [pc, #12]	; (80027e0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80027d2:	5ccb      	ldrb	r3, [r1, r3]
 80027d4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80027d8:	4618      	mov	r0, r3
 80027da:	bd80      	pop	{r7, pc}
 80027dc:	40021000 	.word	0x40021000
 80027e0:	08003b9c 	.word	0x08003b9c

080027e4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80027e4:	b580      	push	{r7, lr}
 80027e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80027e8:	f7ff ffde 	bl	80027a8 <HAL_RCC_GetHCLKFreq>
 80027ec:	4602      	mov	r2, r0
 80027ee:	4b05      	ldr	r3, [pc, #20]	; (8002804 <HAL_RCC_GetPCLK2Freq+0x20>)
 80027f0:	685b      	ldr	r3, [r3, #4]
 80027f2:	0adb      	lsrs	r3, r3, #11
 80027f4:	f003 0307 	and.w	r3, r3, #7
 80027f8:	4903      	ldr	r1, [pc, #12]	; (8002808 <HAL_RCC_GetPCLK2Freq+0x24>)
 80027fa:	5ccb      	ldrb	r3, [r1, r3]
 80027fc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002800:	4618      	mov	r0, r3
 8002802:	bd80      	pop	{r7, pc}
 8002804:	40021000 	.word	0x40021000
 8002808:	08003b9c 	.word	0x08003b9c

0800280c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800280c:	b480      	push	{r7}
 800280e:	b085      	sub	sp, #20
 8002810:	af00      	add	r7, sp, #0
 8002812:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002814:	4b0a      	ldr	r3, [pc, #40]	; (8002840 <RCC_Delay+0x34>)
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	4a0a      	ldr	r2, [pc, #40]	; (8002844 <RCC_Delay+0x38>)
 800281a:	fba2 2303 	umull	r2, r3, r2, r3
 800281e:	0a5b      	lsrs	r3, r3, #9
 8002820:	687a      	ldr	r2, [r7, #4]
 8002822:	fb02 f303 	mul.w	r3, r2, r3
 8002826:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002828:	bf00      	nop
  }
  while (Delay --);
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	1e5a      	subs	r2, r3, #1
 800282e:	60fa      	str	r2, [r7, #12]
 8002830:	2b00      	cmp	r3, #0
 8002832:	d1f9      	bne.n	8002828 <RCC_Delay+0x1c>
}
 8002834:	bf00      	nop
 8002836:	bf00      	nop
 8002838:	3714      	adds	r7, #20
 800283a:	46bd      	mov	sp, r7
 800283c:	bc80      	pop	{r7}
 800283e:	4770      	bx	lr
 8002840:	20000000 	.word	0x20000000
 8002844:	10624dd3 	.word	0x10624dd3

08002848 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002848:	b580      	push	{r7, lr}
 800284a:	b082      	sub	sp, #8
 800284c:	af00      	add	r7, sp, #0
 800284e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	2b00      	cmp	r3, #0
 8002854:	d101      	bne.n	800285a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002856:	2301      	movs	r3, #1
 8002858:	e041      	b.n	80028de <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002860:	b2db      	uxtb	r3, r3
 8002862:	2b00      	cmp	r3, #0
 8002864:	d106      	bne.n	8002874 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	2200      	movs	r2, #0
 800286a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800286e:	6878      	ldr	r0, [r7, #4]
 8002870:	f7fe ff94 	bl	800179c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	2202      	movs	r2, #2
 8002878:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681a      	ldr	r2, [r3, #0]
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	3304      	adds	r3, #4
 8002884:	4619      	mov	r1, r3
 8002886:	4610      	mov	r0, r2
 8002888:	f000 fd50 	bl	800332c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	2201      	movs	r2, #1
 8002890:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	2201      	movs	r2, #1
 8002898:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	2201      	movs	r2, #1
 80028a0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	2201      	movs	r2, #1
 80028a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	2201      	movs	r2, #1
 80028b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	2201      	movs	r2, #1
 80028b8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	2201      	movs	r2, #1
 80028c0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	2201      	movs	r2, #1
 80028c8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	2201      	movs	r2, #1
 80028d0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	2201      	movs	r2, #1
 80028d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80028dc:	2300      	movs	r3, #0
}
 80028de:	4618      	mov	r0, r3
 80028e0:	3708      	adds	r7, #8
 80028e2:	46bd      	mov	sp, r7
 80028e4:	bd80      	pop	{r7, pc}
	...

080028e8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80028e8:	b480      	push	{r7}
 80028ea:	b085      	sub	sp, #20
 80028ec:	af00      	add	r7, sp, #0
 80028ee:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80028f6:	b2db      	uxtb	r3, r3
 80028f8:	2b01      	cmp	r3, #1
 80028fa:	d001      	beq.n	8002900 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80028fc:	2301      	movs	r3, #1
 80028fe:	e03a      	b.n	8002976 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	2202      	movs	r2, #2
 8002904:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	68da      	ldr	r2, [r3, #12]
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	f042 0201 	orr.w	r2, r2, #1
 8002916:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	4a18      	ldr	r2, [pc, #96]	; (8002980 <HAL_TIM_Base_Start_IT+0x98>)
 800291e:	4293      	cmp	r3, r2
 8002920:	d00e      	beq.n	8002940 <HAL_TIM_Base_Start_IT+0x58>
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800292a:	d009      	beq.n	8002940 <HAL_TIM_Base_Start_IT+0x58>
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	4a14      	ldr	r2, [pc, #80]	; (8002984 <HAL_TIM_Base_Start_IT+0x9c>)
 8002932:	4293      	cmp	r3, r2
 8002934:	d004      	beq.n	8002940 <HAL_TIM_Base_Start_IT+0x58>
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	4a13      	ldr	r2, [pc, #76]	; (8002988 <HAL_TIM_Base_Start_IT+0xa0>)
 800293c:	4293      	cmp	r3, r2
 800293e:	d111      	bne.n	8002964 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	689b      	ldr	r3, [r3, #8]
 8002946:	f003 0307 	and.w	r3, r3, #7
 800294a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	2b06      	cmp	r3, #6
 8002950:	d010      	beq.n	8002974 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	681a      	ldr	r2, [r3, #0]
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	f042 0201 	orr.w	r2, r2, #1
 8002960:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002962:	e007      	b.n	8002974 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	681a      	ldr	r2, [r3, #0]
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	f042 0201 	orr.w	r2, r2, #1
 8002972:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002974:	2300      	movs	r3, #0
}
 8002976:	4618      	mov	r0, r3
 8002978:	3714      	adds	r7, #20
 800297a:	46bd      	mov	sp, r7
 800297c:	bc80      	pop	{r7}
 800297e:	4770      	bx	lr
 8002980:	40012c00 	.word	0x40012c00
 8002984:	40000400 	.word	0x40000400
 8002988:	40000800 	.word	0x40000800

0800298c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800298c:	b580      	push	{r7, lr}
 800298e:	b082      	sub	sp, #8
 8002990:	af00      	add	r7, sp, #0
 8002992:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	2b00      	cmp	r3, #0
 8002998:	d101      	bne.n	800299e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800299a:	2301      	movs	r3, #1
 800299c:	e041      	b.n	8002a22 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80029a4:	b2db      	uxtb	r3, r3
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d106      	bne.n	80029b8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	2200      	movs	r2, #0
 80029ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80029b2:	6878      	ldr	r0, [r7, #4]
 80029b4:	f7fe fed6 	bl	8001764 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	2202      	movs	r2, #2
 80029bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681a      	ldr	r2, [r3, #0]
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	3304      	adds	r3, #4
 80029c8:	4619      	mov	r1, r3
 80029ca:	4610      	mov	r0, r2
 80029cc:	f000 fcae 	bl	800332c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	2201      	movs	r2, #1
 80029d4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	2201      	movs	r2, #1
 80029dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	2201      	movs	r2, #1
 80029e4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	2201      	movs	r2, #1
 80029ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	2201      	movs	r2, #1
 80029f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	2201      	movs	r2, #1
 80029fc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	2201      	movs	r2, #1
 8002a04:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	2201      	movs	r2, #1
 8002a0c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	2201      	movs	r2, #1
 8002a14:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	2201      	movs	r2, #1
 8002a1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002a20:	2300      	movs	r3, #0
}
 8002a22:	4618      	mov	r0, r3
 8002a24:	3708      	adds	r7, #8
 8002a26:	46bd      	mov	sp, r7
 8002a28:	bd80      	pop	{r7, pc}
	...

08002a2c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002a2c:	b580      	push	{r7, lr}
 8002a2e:	b084      	sub	sp, #16
 8002a30:	af00      	add	r7, sp, #0
 8002a32:	6078      	str	r0, [r7, #4]
 8002a34:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002a36:	683b      	ldr	r3, [r7, #0]
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d109      	bne.n	8002a50 <HAL_TIM_PWM_Start+0x24>
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002a42:	b2db      	uxtb	r3, r3
 8002a44:	2b01      	cmp	r3, #1
 8002a46:	bf14      	ite	ne
 8002a48:	2301      	movne	r3, #1
 8002a4a:	2300      	moveq	r3, #0
 8002a4c:	b2db      	uxtb	r3, r3
 8002a4e:	e022      	b.n	8002a96 <HAL_TIM_PWM_Start+0x6a>
 8002a50:	683b      	ldr	r3, [r7, #0]
 8002a52:	2b04      	cmp	r3, #4
 8002a54:	d109      	bne.n	8002a6a <HAL_TIM_PWM_Start+0x3e>
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002a5c:	b2db      	uxtb	r3, r3
 8002a5e:	2b01      	cmp	r3, #1
 8002a60:	bf14      	ite	ne
 8002a62:	2301      	movne	r3, #1
 8002a64:	2300      	moveq	r3, #0
 8002a66:	b2db      	uxtb	r3, r3
 8002a68:	e015      	b.n	8002a96 <HAL_TIM_PWM_Start+0x6a>
 8002a6a:	683b      	ldr	r3, [r7, #0]
 8002a6c:	2b08      	cmp	r3, #8
 8002a6e:	d109      	bne.n	8002a84 <HAL_TIM_PWM_Start+0x58>
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002a76:	b2db      	uxtb	r3, r3
 8002a78:	2b01      	cmp	r3, #1
 8002a7a:	bf14      	ite	ne
 8002a7c:	2301      	movne	r3, #1
 8002a7e:	2300      	moveq	r3, #0
 8002a80:	b2db      	uxtb	r3, r3
 8002a82:	e008      	b.n	8002a96 <HAL_TIM_PWM_Start+0x6a>
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002a8a:	b2db      	uxtb	r3, r3
 8002a8c:	2b01      	cmp	r3, #1
 8002a8e:	bf14      	ite	ne
 8002a90:	2301      	movne	r3, #1
 8002a92:	2300      	moveq	r3, #0
 8002a94:	b2db      	uxtb	r3, r3
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d001      	beq.n	8002a9e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8002a9a:	2301      	movs	r3, #1
 8002a9c:	e05e      	b.n	8002b5c <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002a9e:	683b      	ldr	r3, [r7, #0]
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d104      	bne.n	8002aae <HAL_TIM_PWM_Start+0x82>
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	2202      	movs	r2, #2
 8002aa8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002aac:	e013      	b.n	8002ad6 <HAL_TIM_PWM_Start+0xaa>
 8002aae:	683b      	ldr	r3, [r7, #0]
 8002ab0:	2b04      	cmp	r3, #4
 8002ab2:	d104      	bne.n	8002abe <HAL_TIM_PWM_Start+0x92>
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	2202      	movs	r2, #2
 8002ab8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002abc:	e00b      	b.n	8002ad6 <HAL_TIM_PWM_Start+0xaa>
 8002abe:	683b      	ldr	r3, [r7, #0]
 8002ac0:	2b08      	cmp	r3, #8
 8002ac2:	d104      	bne.n	8002ace <HAL_TIM_PWM_Start+0xa2>
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	2202      	movs	r2, #2
 8002ac8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002acc:	e003      	b.n	8002ad6 <HAL_TIM_PWM_Start+0xaa>
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	2202      	movs	r2, #2
 8002ad2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	2201      	movs	r2, #1
 8002adc:	6839      	ldr	r1, [r7, #0]
 8002ade:	4618      	mov	r0, r3
 8002ae0:	f000 fea4 	bl	800382c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	4a1e      	ldr	r2, [pc, #120]	; (8002b64 <HAL_TIM_PWM_Start+0x138>)
 8002aea:	4293      	cmp	r3, r2
 8002aec:	d107      	bne.n	8002afe <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002afc:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	4a18      	ldr	r2, [pc, #96]	; (8002b64 <HAL_TIM_PWM_Start+0x138>)
 8002b04:	4293      	cmp	r3, r2
 8002b06:	d00e      	beq.n	8002b26 <HAL_TIM_PWM_Start+0xfa>
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b10:	d009      	beq.n	8002b26 <HAL_TIM_PWM_Start+0xfa>
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	4a14      	ldr	r2, [pc, #80]	; (8002b68 <HAL_TIM_PWM_Start+0x13c>)
 8002b18:	4293      	cmp	r3, r2
 8002b1a:	d004      	beq.n	8002b26 <HAL_TIM_PWM_Start+0xfa>
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	4a12      	ldr	r2, [pc, #72]	; (8002b6c <HAL_TIM_PWM_Start+0x140>)
 8002b22:	4293      	cmp	r3, r2
 8002b24:	d111      	bne.n	8002b4a <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	689b      	ldr	r3, [r3, #8]
 8002b2c:	f003 0307 	and.w	r3, r3, #7
 8002b30:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	2b06      	cmp	r3, #6
 8002b36:	d010      	beq.n	8002b5a <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	681a      	ldr	r2, [r3, #0]
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	f042 0201 	orr.w	r2, r2, #1
 8002b46:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002b48:	e007      	b.n	8002b5a <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	681a      	ldr	r2, [r3, #0]
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	f042 0201 	orr.w	r2, r2, #1
 8002b58:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002b5a:	2300      	movs	r3, #0
}
 8002b5c:	4618      	mov	r0, r3
 8002b5e:	3710      	adds	r7, #16
 8002b60:	46bd      	mov	sp, r7
 8002b62:	bd80      	pop	{r7, pc}
 8002b64:	40012c00 	.word	0x40012c00
 8002b68:	40000400 	.word	0x40000400
 8002b6c:	40000800 	.word	0x40000800

08002b70 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8002b70:	b580      	push	{r7, lr}
 8002b72:	b086      	sub	sp, #24
 8002b74:	af00      	add	r7, sp, #0
 8002b76:	6078      	str	r0, [r7, #4]
 8002b78:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d101      	bne.n	8002b84 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8002b80:	2301      	movs	r3, #1
 8002b82:	e093      	b.n	8002cac <HAL_TIM_Encoder_Init+0x13c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b8a:	b2db      	uxtb	r3, r3
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d106      	bne.n	8002b9e <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	2200      	movs	r2, #0
 8002b94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8002b98:	6878      	ldr	r0, [r7, #4]
 8002b9a:	f7fe fe25 	bl	80017e8 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	2202      	movs	r2, #2
 8002ba2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	689b      	ldr	r3, [r3, #8]
 8002bac:	687a      	ldr	r2, [r7, #4]
 8002bae:	6812      	ldr	r2, [r2, #0]
 8002bb0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002bb4:	f023 0307 	bic.w	r3, r3, #7
 8002bb8:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681a      	ldr	r2, [r3, #0]
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	3304      	adds	r3, #4
 8002bc2:	4619      	mov	r1, r3
 8002bc4:	4610      	mov	r0, r2
 8002bc6:	f000 fbb1 	bl	800332c <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	689b      	ldr	r3, [r3, #8]
 8002bd0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	699b      	ldr	r3, [r3, #24]
 8002bd8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	6a1b      	ldr	r3, [r3, #32]
 8002be0:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8002be2:	683b      	ldr	r3, [r7, #0]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	697a      	ldr	r2, [r7, #20]
 8002be8:	4313      	orrs	r3, r2
 8002bea:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8002bec:	693b      	ldr	r3, [r7, #16]
 8002bee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002bf2:	f023 0303 	bic.w	r3, r3, #3
 8002bf6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8002bf8:	683b      	ldr	r3, [r7, #0]
 8002bfa:	689a      	ldr	r2, [r3, #8]
 8002bfc:	683b      	ldr	r3, [r7, #0]
 8002bfe:	699b      	ldr	r3, [r3, #24]
 8002c00:	021b      	lsls	r3, r3, #8
 8002c02:	4313      	orrs	r3, r2
 8002c04:	693a      	ldr	r2, [r7, #16]
 8002c06:	4313      	orrs	r3, r2
 8002c08:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8002c0a:	693b      	ldr	r3, [r7, #16]
 8002c0c:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8002c10:	f023 030c 	bic.w	r3, r3, #12
 8002c14:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8002c16:	693b      	ldr	r3, [r7, #16]
 8002c18:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002c1c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002c20:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8002c22:	683b      	ldr	r3, [r7, #0]
 8002c24:	68da      	ldr	r2, [r3, #12]
 8002c26:	683b      	ldr	r3, [r7, #0]
 8002c28:	69db      	ldr	r3, [r3, #28]
 8002c2a:	021b      	lsls	r3, r3, #8
 8002c2c:	4313      	orrs	r3, r2
 8002c2e:	693a      	ldr	r2, [r7, #16]
 8002c30:	4313      	orrs	r3, r2
 8002c32:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8002c34:	683b      	ldr	r3, [r7, #0]
 8002c36:	691b      	ldr	r3, [r3, #16]
 8002c38:	011a      	lsls	r2, r3, #4
 8002c3a:	683b      	ldr	r3, [r7, #0]
 8002c3c:	6a1b      	ldr	r3, [r3, #32]
 8002c3e:	031b      	lsls	r3, r3, #12
 8002c40:	4313      	orrs	r3, r2
 8002c42:	693a      	ldr	r2, [r7, #16]
 8002c44:	4313      	orrs	r3, r2
 8002c46:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8002c4e:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8002c50:	683b      	ldr	r3, [r7, #0]
 8002c52:	685a      	ldr	r2, [r3, #4]
 8002c54:	683b      	ldr	r3, [r7, #0]
 8002c56:	695b      	ldr	r3, [r3, #20]
 8002c58:	011b      	lsls	r3, r3, #4
 8002c5a:	4313      	orrs	r3, r2
 8002c5c:	68fa      	ldr	r2, [r7, #12]
 8002c5e:	4313      	orrs	r3, r2
 8002c60:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	697a      	ldr	r2, [r7, #20]
 8002c68:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	693a      	ldr	r2, [r7, #16]
 8002c70:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	68fa      	ldr	r2, [r7, #12]
 8002c78:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	2201      	movs	r2, #1
 8002c7e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	2201      	movs	r2, #1
 8002c86:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	2201      	movs	r2, #1
 8002c8e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	2201      	movs	r2, #1
 8002c96:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	2201      	movs	r2, #1
 8002c9e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	2201      	movs	r2, #1
 8002ca6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002caa:	2300      	movs	r3, #0
}
 8002cac:	4618      	mov	r0, r3
 8002cae:	3718      	adds	r7, #24
 8002cb0:	46bd      	mov	sp, r7
 8002cb2:	bd80      	pop	{r7, pc}

08002cb4 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002cb4:	b580      	push	{r7, lr}
 8002cb6:	b084      	sub	sp, #16
 8002cb8:	af00      	add	r7, sp, #0
 8002cba:	6078      	str	r0, [r7, #4]
 8002cbc:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002cc4:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002ccc:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002cd4:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8002cdc:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8002cde:	683b      	ldr	r3, [r7, #0]
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d110      	bne.n	8002d06 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8002ce4:	7bfb      	ldrb	r3, [r7, #15]
 8002ce6:	2b01      	cmp	r3, #1
 8002ce8:	d102      	bne.n	8002cf0 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8002cea:	7b7b      	ldrb	r3, [r7, #13]
 8002cec:	2b01      	cmp	r3, #1
 8002cee:	d001      	beq.n	8002cf4 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8002cf0:	2301      	movs	r3, #1
 8002cf2:	e069      	b.n	8002dc8 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	2202      	movs	r2, #2
 8002cf8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	2202      	movs	r2, #2
 8002d00:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002d04:	e031      	b.n	8002d6a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8002d06:	683b      	ldr	r3, [r7, #0]
 8002d08:	2b04      	cmp	r3, #4
 8002d0a:	d110      	bne.n	8002d2e <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8002d0c:	7bbb      	ldrb	r3, [r7, #14]
 8002d0e:	2b01      	cmp	r3, #1
 8002d10:	d102      	bne.n	8002d18 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8002d12:	7b3b      	ldrb	r3, [r7, #12]
 8002d14:	2b01      	cmp	r3, #1
 8002d16:	d001      	beq.n	8002d1c <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8002d18:	2301      	movs	r3, #1
 8002d1a:	e055      	b.n	8002dc8 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	2202      	movs	r2, #2
 8002d20:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	2202      	movs	r2, #2
 8002d28:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002d2c:	e01d      	b.n	8002d6a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8002d2e:	7bfb      	ldrb	r3, [r7, #15]
 8002d30:	2b01      	cmp	r3, #1
 8002d32:	d108      	bne.n	8002d46 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8002d34:	7bbb      	ldrb	r3, [r7, #14]
 8002d36:	2b01      	cmp	r3, #1
 8002d38:	d105      	bne.n	8002d46 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8002d3a:	7b7b      	ldrb	r3, [r7, #13]
 8002d3c:	2b01      	cmp	r3, #1
 8002d3e:	d102      	bne.n	8002d46 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8002d40:	7b3b      	ldrb	r3, [r7, #12]
 8002d42:	2b01      	cmp	r3, #1
 8002d44:	d001      	beq.n	8002d4a <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8002d46:	2301      	movs	r3, #1
 8002d48:	e03e      	b.n	8002dc8 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	2202      	movs	r2, #2
 8002d4e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	2202      	movs	r2, #2
 8002d56:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	2202      	movs	r2, #2
 8002d5e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	2202      	movs	r2, #2
 8002d66:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8002d6a:	683b      	ldr	r3, [r7, #0]
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d003      	beq.n	8002d78 <HAL_TIM_Encoder_Start+0xc4>
 8002d70:	683b      	ldr	r3, [r7, #0]
 8002d72:	2b04      	cmp	r3, #4
 8002d74:	d008      	beq.n	8002d88 <HAL_TIM_Encoder_Start+0xd4>
 8002d76:	e00f      	b.n	8002d98 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	2201      	movs	r2, #1
 8002d7e:	2100      	movs	r1, #0
 8002d80:	4618      	mov	r0, r3
 8002d82:	f000 fd53 	bl	800382c <TIM_CCxChannelCmd>
      break;
 8002d86:	e016      	b.n	8002db6 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	2201      	movs	r2, #1
 8002d8e:	2104      	movs	r1, #4
 8002d90:	4618      	mov	r0, r3
 8002d92:	f000 fd4b 	bl	800382c <TIM_CCxChannelCmd>
      break;
 8002d96:	e00e      	b.n	8002db6 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	2201      	movs	r2, #1
 8002d9e:	2100      	movs	r1, #0
 8002da0:	4618      	mov	r0, r3
 8002da2:	f000 fd43 	bl	800382c <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	2201      	movs	r2, #1
 8002dac:	2104      	movs	r1, #4
 8002dae:	4618      	mov	r0, r3
 8002db0:	f000 fd3c 	bl	800382c <TIM_CCxChannelCmd>
      break;
 8002db4:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	681a      	ldr	r2, [r3, #0]
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	f042 0201 	orr.w	r2, r2, #1
 8002dc4:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8002dc6:	2300      	movs	r3, #0
}
 8002dc8:	4618      	mov	r0, r3
 8002dca:	3710      	adds	r7, #16
 8002dcc:	46bd      	mov	sp, r7
 8002dce:	bd80      	pop	{r7, pc}

08002dd0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002dd0:	b580      	push	{r7, lr}
 8002dd2:	b082      	sub	sp, #8
 8002dd4:	af00      	add	r7, sp, #0
 8002dd6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	691b      	ldr	r3, [r3, #16]
 8002dde:	f003 0302 	and.w	r3, r3, #2
 8002de2:	2b02      	cmp	r3, #2
 8002de4:	d122      	bne.n	8002e2c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	68db      	ldr	r3, [r3, #12]
 8002dec:	f003 0302 	and.w	r3, r3, #2
 8002df0:	2b02      	cmp	r3, #2
 8002df2:	d11b      	bne.n	8002e2c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	f06f 0202 	mvn.w	r2, #2
 8002dfc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	2201      	movs	r2, #1
 8002e02:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	699b      	ldr	r3, [r3, #24]
 8002e0a:	f003 0303 	and.w	r3, r3, #3
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d003      	beq.n	8002e1a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002e12:	6878      	ldr	r0, [r7, #4]
 8002e14:	f000 fa6f 	bl	80032f6 <HAL_TIM_IC_CaptureCallback>
 8002e18:	e005      	b.n	8002e26 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002e1a:	6878      	ldr	r0, [r7, #4]
 8002e1c:	f000 fa62 	bl	80032e4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002e20:	6878      	ldr	r0, [r7, #4]
 8002e22:	f000 fa71 	bl	8003308 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	2200      	movs	r2, #0
 8002e2a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	691b      	ldr	r3, [r3, #16]
 8002e32:	f003 0304 	and.w	r3, r3, #4
 8002e36:	2b04      	cmp	r3, #4
 8002e38:	d122      	bne.n	8002e80 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	68db      	ldr	r3, [r3, #12]
 8002e40:	f003 0304 	and.w	r3, r3, #4
 8002e44:	2b04      	cmp	r3, #4
 8002e46:	d11b      	bne.n	8002e80 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	f06f 0204 	mvn.w	r2, #4
 8002e50:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	2202      	movs	r2, #2
 8002e56:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	699b      	ldr	r3, [r3, #24]
 8002e5e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d003      	beq.n	8002e6e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002e66:	6878      	ldr	r0, [r7, #4]
 8002e68:	f000 fa45 	bl	80032f6 <HAL_TIM_IC_CaptureCallback>
 8002e6c:	e005      	b.n	8002e7a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002e6e:	6878      	ldr	r0, [r7, #4]
 8002e70:	f000 fa38 	bl	80032e4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002e74:	6878      	ldr	r0, [r7, #4]
 8002e76:	f000 fa47 	bl	8003308 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	2200      	movs	r2, #0
 8002e7e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	691b      	ldr	r3, [r3, #16]
 8002e86:	f003 0308 	and.w	r3, r3, #8
 8002e8a:	2b08      	cmp	r3, #8
 8002e8c:	d122      	bne.n	8002ed4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	68db      	ldr	r3, [r3, #12]
 8002e94:	f003 0308 	and.w	r3, r3, #8
 8002e98:	2b08      	cmp	r3, #8
 8002e9a:	d11b      	bne.n	8002ed4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	f06f 0208 	mvn.w	r2, #8
 8002ea4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	2204      	movs	r2, #4
 8002eaa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	69db      	ldr	r3, [r3, #28]
 8002eb2:	f003 0303 	and.w	r3, r3, #3
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d003      	beq.n	8002ec2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002eba:	6878      	ldr	r0, [r7, #4]
 8002ebc:	f000 fa1b 	bl	80032f6 <HAL_TIM_IC_CaptureCallback>
 8002ec0:	e005      	b.n	8002ece <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002ec2:	6878      	ldr	r0, [r7, #4]
 8002ec4:	f000 fa0e 	bl	80032e4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ec8:	6878      	ldr	r0, [r7, #4]
 8002eca:	f000 fa1d 	bl	8003308 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	2200      	movs	r2, #0
 8002ed2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	691b      	ldr	r3, [r3, #16]
 8002eda:	f003 0310 	and.w	r3, r3, #16
 8002ede:	2b10      	cmp	r3, #16
 8002ee0:	d122      	bne.n	8002f28 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	68db      	ldr	r3, [r3, #12]
 8002ee8:	f003 0310 	and.w	r3, r3, #16
 8002eec:	2b10      	cmp	r3, #16
 8002eee:	d11b      	bne.n	8002f28 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	f06f 0210 	mvn.w	r2, #16
 8002ef8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	2208      	movs	r2, #8
 8002efe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	69db      	ldr	r3, [r3, #28]
 8002f06:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d003      	beq.n	8002f16 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002f0e:	6878      	ldr	r0, [r7, #4]
 8002f10:	f000 f9f1 	bl	80032f6 <HAL_TIM_IC_CaptureCallback>
 8002f14:	e005      	b.n	8002f22 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f16:	6878      	ldr	r0, [r7, #4]
 8002f18:	f000 f9e4 	bl	80032e4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f1c:	6878      	ldr	r0, [r7, #4]
 8002f1e:	f000 f9f3 	bl	8003308 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	2200      	movs	r2, #0
 8002f26:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	691b      	ldr	r3, [r3, #16]
 8002f2e:	f003 0301 	and.w	r3, r3, #1
 8002f32:	2b01      	cmp	r3, #1
 8002f34:	d10e      	bne.n	8002f54 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	68db      	ldr	r3, [r3, #12]
 8002f3c:	f003 0301 	and.w	r3, r3, #1
 8002f40:	2b01      	cmp	r3, #1
 8002f42:	d107      	bne.n	8002f54 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	f06f 0201 	mvn.w	r2, #1
 8002f4c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002f4e:	6878      	ldr	r0, [r7, #4]
 8002f50:	f7fe f8d8 	bl	8001104 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	691b      	ldr	r3, [r3, #16]
 8002f5a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f5e:	2b80      	cmp	r3, #128	; 0x80
 8002f60:	d10e      	bne.n	8002f80 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	68db      	ldr	r3, [r3, #12]
 8002f68:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f6c:	2b80      	cmp	r3, #128	; 0x80
 8002f6e:	d107      	bne.n	8002f80 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002f78:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002f7a:	6878      	ldr	r0, [r7, #4]
 8002f7c:	f000 fce1 	bl	8003942 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	691b      	ldr	r3, [r3, #16]
 8002f86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f8a:	2b40      	cmp	r3, #64	; 0x40
 8002f8c:	d10e      	bne.n	8002fac <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	68db      	ldr	r3, [r3, #12]
 8002f94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f98:	2b40      	cmp	r3, #64	; 0x40
 8002f9a:	d107      	bne.n	8002fac <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002fa4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002fa6:	6878      	ldr	r0, [r7, #4]
 8002fa8:	f000 f9b7 	bl	800331a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	691b      	ldr	r3, [r3, #16]
 8002fb2:	f003 0320 	and.w	r3, r3, #32
 8002fb6:	2b20      	cmp	r3, #32
 8002fb8:	d10e      	bne.n	8002fd8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	68db      	ldr	r3, [r3, #12]
 8002fc0:	f003 0320 	and.w	r3, r3, #32
 8002fc4:	2b20      	cmp	r3, #32
 8002fc6:	d107      	bne.n	8002fd8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	f06f 0220 	mvn.w	r2, #32
 8002fd0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002fd2:	6878      	ldr	r0, [r7, #4]
 8002fd4:	f000 fcac 	bl	8003930 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002fd8:	bf00      	nop
 8002fda:	3708      	adds	r7, #8
 8002fdc:	46bd      	mov	sp, r7
 8002fde:	bd80      	pop	{r7, pc}

08002fe0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002fe0:	b580      	push	{r7, lr}
 8002fe2:	b084      	sub	sp, #16
 8002fe4:	af00      	add	r7, sp, #0
 8002fe6:	60f8      	str	r0, [r7, #12]
 8002fe8:	60b9      	str	r1, [r7, #8]
 8002fea:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002ff2:	2b01      	cmp	r3, #1
 8002ff4:	d101      	bne.n	8002ffa <HAL_TIM_PWM_ConfigChannel+0x1a>
 8002ff6:	2302      	movs	r3, #2
 8002ff8:	e0ac      	b.n	8003154 <HAL_TIM_PWM_ConfigChannel+0x174>
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	2201      	movs	r2, #1
 8002ffe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	2b0c      	cmp	r3, #12
 8003006:	f200 809f 	bhi.w	8003148 <HAL_TIM_PWM_ConfigChannel+0x168>
 800300a:	a201      	add	r2, pc, #4	; (adr r2, 8003010 <HAL_TIM_PWM_ConfigChannel+0x30>)
 800300c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003010:	08003045 	.word	0x08003045
 8003014:	08003149 	.word	0x08003149
 8003018:	08003149 	.word	0x08003149
 800301c:	08003149 	.word	0x08003149
 8003020:	08003085 	.word	0x08003085
 8003024:	08003149 	.word	0x08003149
 8003028:	08003149 	.word	0x08003149
 800302c:	08003149 	.word	0x08003149
 8003030:	080030c7 	.word	0x080030c7
 8003034:	08003149 	.word	0x08003149
 8003038:	08003149 	.word	0x08003149
 800303c:	08003149 	.word	0x08003149
 8003040:	08003107 	.word	0x08003107
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	68b9      	ldr	r1, [r7, #8]
 800304a:	4618      	mov	r0, r3
 800304c:	f000 f9d0 	bl	80033f0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	699a      	ldr	r2, [r3, #24]
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	f042 0208 	orr.w	r2, r2, #8
 800305e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	699a      	ldr	r2, [r3, #24]
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	f022 0204 	bic.w	r2, r2, #4
 800306e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	6999      	ldr	r1, [r3, #24]
 8003076:	68bb      	ldr	r3, [r7, #8]
 8003078:	691a      	ldr	r2, [r3, #16]
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	430a      	orrs	r2, r1
 8003080:	619a      	str	r2, [r3, #24]
      break;
 8003082:	e062      	b.n	800314a <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	68b9      	ldr	r1, [r7, #8]
 800308a:	4618      	mov	r0, r3
 800308c:	f000 fa16 	bl	80034bc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	699a      	ldr	r2, [r3, #24]
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800309e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	699a      	ldr	r2, [r3, #24]
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80030ae:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	6999      	ldr	r1, [r3, #24]
 80030b6:	68bb      	ldr	r3, [r7, #8]
 80030b8:	691b      	ldr	r3, [r3, #16]
 80030ba:	021a      	lsls	r2, r3, #8
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	430a      	orrs	r2, r1
 80030c2:	619a      	str	r2, [r3, #24]
      break;
 80030c4:	e041      	b.n	800314a <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	68b9      	ldr	r1, [r7, #8]
 80030cc:	4618      	mov	r0, r3
 80030ce:	f000 fa5f 	bl	8003590 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	69da      	ldr	r2, [r3, #28]
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	f042 0208 	orr.w	r2, r2, #8
 80030e0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	69da      	ldr	r2, [r3, #28]
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	f022 0204 	bic.w	r2, r2, #4
 80030f0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	69d9      	ldr	r1, [r3, #28]
 80030f8:	68bb      	ldr	r3, [r7, #8]
 80030fa:	691a      	ldr	r2, [r3, #16]
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	430a      	orrs	r2, r1
 8003102:	61da      	str	r2, [r3, #28]
      break;
 8003104:	e021      	b.n	800314a <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	68b9      	ldr	r1, [r7, #8]
 800310c:	4618      	mov	r0, r3
 800310e:	f000 faa9 	bl	8003664 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	69da      	ldr	r2, [r3, #28]
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003120:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	69da      	ldr	r2, [r3, #28]
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003130:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	69d9      	ldr	r1, [r3, #28]
 8003138:	68bb      	ldr	r3, [r7, #8]
 800313a:	691b      	ldr	r3, [r3, #16]
 800313c:	021a      	lsls	r2, r3, #8
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	430a      	orrs	r2, r1
 8003144:	61da      	str	r2, [r3, #28]
      break;
 8003146:	e000      	b.n	800314a <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8003148:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	2200      	movs	r2, #0
 800314e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003152:	2300      	movs	r3, #0
}
 8003154:	4618      	mov	r0, r3
 8003156:	3710      	adds	r7, #16
 8003158:	46bd      	mov	sp, r7
 800315a:	bd80      	pop	{r7, pc}

0800315c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800315c:	b580      	push	{r7, lr}
 800315e:	b084      	sub	sp, #16
 8003160:	af00      	add	r7, sp, #0
 8003162:	6078      	str	r0, [r7, #4]
 8003164:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800316c:	2b01      	cmp	r3, #1
 800316e:	d101      	bne.n	8003174 <HAL_TIM_ConfigClockSource+0x18>
 8003170:	2302      	movs	r3, #2
 8003172:	e0b3      	b.n	80032dc <HAL_TIM_ConfigClockSource+0x180>
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	2201      	movs	r2, #1
 8003178:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	2202      	movs	r2, #2
 8003180:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	689b      	ldr	r3, [r3, #8]
 800318a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003192:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800319a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	68fa      	ldr	r2, [r7, #12]
 80031a2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80031a4:	683b      	ldr	r3, [r7, #0]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80031ac:	d03e      	beq.n	800322c <HAL_TIM_ConfigClockSource+0xd0>
 80031ae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80031b2:	f200 8087 	bhi.w	80032c4 <HAL_TIM_ConfigClockSource+0x168>
 80031b6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80031ba:	f000 8085 	beq.w	80032c8 <HAL_TIM_ConfigClockSource+0x16c>
 80031be:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80031c2:	d87f      	bhi.n	80032c4 <HAL_TIM_ConfigClockSource+0x168>
 80031c4:	2b70      	cmp	r3, #112	; 0x70
 80031c6:	d01a      	beq.n	80031fe <HAL_TIM_ConfigClockSource+0xa2>
 80031c8:	2b70      	cmp	r3, #112	; 0x70
 80031ca:	d87b      	bhi.n	80032c4 <HAL_TIM_ConfigClockSource+0x168>
 80031cc:	2b60      	cmp	r3, #96	; 0x60
 80031ce:	d050      	beq.n	8003272 <HAL_TIM_ConfigClockSource+0x116>
 80031d0:	2b60      	cmp	r3, #96	; 0x60
 80031d2:	d877      	bhi.n	80032c4 <HAL_TIM_ConfigClockSource+0x168>
 80031d4:	2b50      	cmp	r3, #80	; 0x50
 80031d6:	d03c      	beq.n	8003252 <HAL_TIM_ConfigClockSource+0xf6>
 80031d8:	2b50      	cmp	r3, #80	; 0x50
 80031da:	d873      	bhi.n	80032c4 <HAL_TIM_ConfigClockSource+0x168>
 80031dc:	2b40      	cmp	r3, #64	; 0x40
 80031de:	d058      	beq.n	8003292 <HAL_TIM_ConfigClockSource+0x136>
 80031e0:	2b40      	cmp	r3, #64	; 0x40
 80031e2:	d86f      	bhi.n	80032c4 <HAL_TIM_ConfigClockSource+0x168>
 80031e4:	2b30      	cmp	r3, #48	; 0x30
 80031e6:	d064      	beq.n	80032b2 <HAL_TIM_ConfigClockSource+0x156>
 80031e8:	2b30      	cmp	r3, #48	; 0x30
 80031ea:	d86b      	bhi.n	80032c4 <HAL_TIM_ConfigClockSource+0x168>
 80031ec:	2b20      	cmp	r3, #32
 80031ee:	d060      	beq.n	80032b2 <HAL_TIM_ConfigClockSource+0x156>
 80031f0:	2b20      	cmp	r3, #32
 80031f2:	d867      	bhi.n	80032c4 <HAL_TIM_ConfigClockSource+0x168>
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d05c      	beq.n	80032b2 <HAL_TIM_ConfigClockSource+0x156>
 80031f8:	2b10      	cmp	r3, #16
 80031fa:	d05a      	beq.n	80032b2 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80031fc:	e062      	b.n	80032c4 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	6818      	ldr	r0, [r3, #0]
 8003202:	683b      	ldr	r3, [r7, #0]
 8003204:	6899      	ldr	r1, [r3, #8]
 8003206:	683b      	ldr	r3, [r7, #0]
 8003208:	685a      	ldr	r2, [r3, #4]
 800320a:	683b      	ldr	r3, [r7, #0]
 800320c:	68db      	ldr	r3, [r3, #12]
 800320e:	f000 faee 	bl	80037ee <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	689b      	ldr	r3, [r3, #8]
 8003218:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003220:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	68fa      	ldr	r2, [r7, #12]
 8003228:	609a      	str	r2, [r3, #8]
      break;
 800322a:	e04e      	b.n	80032ca <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	6818      	ldr	r0, [r3, #0]
 8003230:	683b      	ldr	r3, [r7, #0]
 8003232:	6899      	ldr	r1, [r3, #8]
 8003234:	683b      	ldr	r3, [r7, #0]
 8003236:	685a      	ldr	r2, [r3, #4]
 8003238:	683b      	ldr	r3, [r7, #0]
 800323a:	68db      	ldr	r3, [r3, #12]
 800323c:	f000 fad7 	bl	80037ee <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	689a      	ldr	r2, [r3, #8]
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800324e:	609a      	str	r2, [r3, #8]
      break;
 8003250:	e03b      	b.n	80032ca <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	6818      	ldr	r0, [r3, #0]
 8003256:	683b      	ldr	r3, [r7, #0]
 8003258:	6859      	ldr	r1, [r3, #4]
 800325a:	683b      	ldr	r3, [r7, #0]
 800325c:	68db      	ldr	r3, [r3, #12]
 800325e:	461a      	mov	r2, r3
 8003260:	f000 fa4e 	bl	8003700 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	2150      	movs	r1, #80	; 0x50
 800326a:	4618      	mov	r0, r3
 800326c:	f000 faa5 	bl	80037ba <TIM_ITRx_SetConfig>
      break;
 8003270:	e02b      	b.n	80032ca <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	6818      	ldr	r0, [r3, #0]
 8003276:	683b      	ldr	r3, [r7, #0]
 8003278:	6859      	ldr	r1, [r3, #4]
 800327a:	683b      	ldr	r3, [r7, #0]
 800327c:	68db      	ldr	r3, [r3, #12]
 800327e:	461a      	mov	r2, r3
 8003280:	f000 fa6c 	bl	800375c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	2160      	movs	r1, #96	; 0x60
 800328a:	4618      	mov	r0, r3
 800328c:	f000 fa95 	bl	80037ba <TIM_ITRx_SetConfig>
      break;
 8003290:	e01b      	b.n	80032ca <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	6818      	ldr	r0, [r3, #0]
 8003296:	683b      	ldr	r3, [r7, #0]
 8003298:	6859      	ldr	r1, [r3, #4]
 800329a:	683b      	ldr	r3, [r7, #0]
 800329c:	68db      	ldr	r3, [r3, #12]
 800329e:	461a      	mov	r2, r3
 80032a0:	f000 fa2e 	bl	8003700 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	2140      	movs	r1, #64	; 0x40
 80032aa:	4618      	mov	r0, r3
 80032ac:	f000 fa85 	bl	80037ba <TIM_ITRx_SetConfig>
      break;
 80032b0:	e00b      	b.n	80032ca <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681a      	ldr	r2, [r3, #0]
 80032b6:	683b      	ldr	r3, [r7, #0]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	4619      	mov	r1, r3
 80032bc:	4610      	mov	r0, r2
 80032be:	f000 fa7c 	bl	80037ba <TIM_ITRx_SetConfig>
        break;
 80032c2:	e002      	b.n	80032ca <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80032c4:	bf00      	nop
 80032c6:	e000      	b.n	80032ca <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80032c8:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	2201      	movs	r2, #1
 80032ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	2200      	movs	r2, #0
 80032d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80032da:	2300      	movs	r3, #0
}
 80032dc:	4618      	mov	r0, r3
 80032de:	3710      	adds	r7, #16
 80032e0:	46bd      	mov	sp, r7
 80032e2:	bd80      	pop	{r7, pc}

080032e4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80032e4:	b480      	push	{r7}
 80032e6:	b083      	sub	sp, #12
 80032e8:	af00      	add	r7, sp, #0
 80032ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80032ec:	bf00      	nop
 80032ee:	370c      	adds	r7, #12
 80032f0:	46bd      	mov	sp, r7
 80032f2:	bc80      	pop	{r7}
 80032f4:	4770      	bx	lr

080032f6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80032f6:	b480      	push	{r7}
 80032f8:	b083      	sub	sp, #12
 80032fa:	af00      	add	r7, sp, #0
 80032fc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80032fe:	bf00      	nop
 8003300:	370c      	adds	r7, #12
 8003302:	46bd      	mov	sp, r7
 8003304:	bc80      	pop	{r7}
 8003306:	4770      	bx	lr

08003308 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003308:	b480      	push	{r7}
 800330a:	b083      	sub	sp, #12
 800330c:	af00      	add	r7, sp, #0
 800330e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003310:	bf00      	nop
 8003312:	370c      	adds	r7, #12
 8003314:	46bd      	mov	sp, r7
 8003316:	bc80      	pop	{r7}
 8003318:	4770      	bx	lr

0800331a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800331a:	b480      	push	{r7}
 800331c:	b083      	sub	sp, #12
 800331e:	af00      	add	r7, sp, #0
 8003320:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003322:	bf00      	nop
 8003324:	370c      	adds	r7, #12
 8003326:	46bd      	mov	sp, r7
 8003328:	bc80      	pop	{r7}
 800332a:	4770      	bx	lr

0800332c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800332c:	b480      	push	{r7}
 800332e:	b085      	sub	sp, #20
 8003330:	af00      	add	r7, sp, #0
 8003332:	6078      	str	r0, [r7, #4]
 8003334:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	4a29      	ldr	r2, [pc, #164]	; (80033e4 <TIM_Base_SetConfig+0xb8>)
 8003340:	4293      	cmp	r3, r2
 8003342:	d00b      	beq.n	800335c <TIM_Base_SetConfig+0x30>
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800334a:	d007      	beq.n	800335c <TIM_Base_SetConfig+0x30>
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	4a26      	ldr	r2, [pc, #152]	; (80033e8 <TIM_Base_SetConfig+0xbc>)
 8003350:	4293      	cmp	r3, r2
 8003352:	d003      	beq.n	800335c <TIM_Base_SetConfig+0x30>
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	4a25      	ldr	r2, [pc, #148]	; (80033ec <TIM_Base_SetConfig+0xc0>)
 8003358:	4293      	cmp	r3, r2
 800335a:	d108      	bne.n	800336e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003362:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003364:	683b      	ldr	r3, [r7, #0]
 8003366:	685b      	ldr	r3, [r3, #4]
 8003368:	68fa      	ldr	r2, [r7, #12]
 800336a:	4313      	orrs	r3, r2
 800336c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	4a1c      	ldr	r2, [pc, #112]	; (80033e4 <TIM_Base_SetConfig+0xb8>)
 8003372:	4293      	cmp	r3, r2
 8003374:	d00b      	beq.n	800338e <TIM_Base_SetConfig+0x62>
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800337c:	d007      	beq.n	800338e <TIM_Base_SetConfig+0x62>
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	4a19      	ldr	r2, [pc, #100]	; (80033e8 <TIM_Base_SetConfig+0xbc>)
 8003382:	4293      	cmp	r3, r2
 8003384:	d003      	beq.n	800338e <TIM_Base_SetConfig+0x62>
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	4a18      	ldr	r2, [pc, #96]	; (80033ec <TIM_Base_SetConfig+0xc0>)
 800338a:	4293      	cmp	r3, r2
 800338c:	d108      	bne.n	80033a0 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003394:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003396:	683b      	ldr	r3, [r7, #0]
 8003398:	68db      	ldr	r3, [r3, #12]
 800339a:	68fa      	ldr	r2, [r7, #12]
 800339c:	4313      	orrs	r3, r2
 800339e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80033a6:	683b      	ldr	r3, [r7, #0]
 80033a8:	695b      	ldr	r3, [r3, #20]
 80033aa:	4313      	orrs	r3, r2
 80033ac:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	68fa      	ldr	r2, [r7, #12]
 80033b2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80033b4:	683b      	ldr	r3, [r7, #0]
 80033b6:	689a      	ldr	r2, [r3, #8]
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80033bc:	683b      	ldr	r3, [r7, #0]
 80033be:	681a      	ldr	r2, [r3, #0]
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	4a07      	ldr	r2, [pc, #28]	; (80033e4 <TIM_Base_SetConfig+0xb8>)
 80033c8:	4293      	cmp	r3, r2
 80033ca:	d103      	bne.n	80033d4 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80033cc:	683b      	ldr	r3, [r7, #0]
 80033ce:	691a      	ldr	r2, [r3, #16]
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	2201      	movs	r2, #1
 80033d8:	615a      	str	r2, [r3, #20]
}
 80033da:	bf00      	nop
 80033dc:	3714      	adds	r7, #20
 80033de:	46bd      	mov	sp, r7
 80033e0:	bc80      	pop	{r7}
 80033e2:	4770      	bx	lr
 80033e4:	40012c00 	.word	0x40012c00
 80033e8:	40000400 	.word	0x40000400
 80033ec:	40000800 	.word	0x40000800

080033f0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80033f0:	b480      	push	{r7}
 80033f2:	b087      	sub	sp, #28
 80033f4:	af00      	add	r7, sp, #0
 80033f6:	6078      	str	r0, [r7, #4]
 80033f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	6a1b      	ldr	r3, [r3, #32]
 80033fe:	f023 0201 	bic.w	r2, r3, #1
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	6a1b      	ldr	r3, [r3, #32]
 800340a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	685b      	ldr	r3, [r3, #4]
 8003410:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	699b      	ldr	r3, [r3, #24]
 8003416:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800341e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	f023 0303 	bic.w	r3, r3, #3
 8003426:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003428:	683b      	ldr	r3, [r7, #0]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	68fa      	ldr	r2, [r7, #12]
 800342e:	4313      	orrs	r3, r2
 8003430:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003432:	697b      	ldr	r3, [r7, #20]
 8003434:	f023 0302 	bic.w	r3, r3, #2
 8003438:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800343a:	683b      	ldr	r3, [r7, #0]
 800343c:	689b      	ldr	r3, [r3, #8]
 800343e:	697a      	ldr	r2, [r7, #20]
 8003440:	4313      	orrs	r3, r2
 8003442:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	4a1c      	ldr	r2, [pc, #112]	; (80034b8 <TIM_OC1_SetConfig+0xc8>)
 8003448:	4293      	cmp	r3, r2
 800344a:	d10c      	bne.n	8003466 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800344c:	697b      	ldr	r3, [r7, #20]
 800344e:	f023 0308 	bic.w	r3, r3, #8
 8003452:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003454:	683b      	ldr	r3, [r7, #0]
 8003456:	68db      	ldr	r3, [r3, #12]
 8003458:	697a      	ldr	r2, [r7, #20]
 800345a:	4313      	orrs	r3, r2
 800345c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800345e:	697b      	ldr	r3, [r7, #20]
 8003460:	f023 0304 	bic.w	r3, r3, #4
 8003464:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	4a13      	ldr	r2, [pc, #76]	; (80034b8 <TIM_OC1_SetConfig+0xc8>)
 800346a:	4293      	cmp	r3, r2
 800346c:	d111      	bne.n	8003492 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800346e:	693b      	ldr	r3, [r7, #16]
 8003470:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003474:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003476:	693b      	ldr	r3, [r7, #16]
 8003478:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800347c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800347e:	683b      	ldr	r3, [r7, #0]
 8003480:	695b      	ldr	r3, [r3, #20]
 8003482:	693a      	ldr	r2, [r7, #16]
 8003484:	4313      	orrs	r3, r2
 8003486:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003488:	683b      	ldr	r3, [r7, #0]
 800348a:	699b      	ldr	r3, [r3, #24]
 800348c:	693a      	ldr	r2, [r7, #16]
 800348e:	4313      	orrs	r3, r2
 8003490:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	693a      	ldr	r2, [r7, #16]
 8003496:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	68fa      	ldr	r2, [r7, #12]
 800349c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800349e:	683b      	ldr	r3, [r7, #0]
 80034a0:	685a      	ldr	r2, [r3, #4]
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	697a      	ldr	r2, [r7, #20]
 80034aa:	621a      	str	r2, [r3, #32]
}
 80034ac:	bf00      	nop
 80034ae:	371c      	adds	r7, #28
 80034b0:	46bd      	mov	sp, r7
 80034b2:	bc80      	pop	{r7}
 80034b4:	4770      	bx	lr
 80034b6:	bf00      	nop
 80034b8:	40012c00 	.word	0x40012c00

080034bc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80034bc:	b480      	push	{r7}
 80034be:	b087      	sub	sp, #28
 80034c0:	af00      	add	r7, sp, #0
 80034c2:	6078      	str	r0, [r7, #4]
 80034c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	6a1b      	ldr	r3, [r3, #32]
 80034ca:	f023 0210 	bic.w	r2, r3, #16
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	6a1b      	ldr	r3, [r3, #32]
 80034d6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	685b      	ldr	r3, [r3, #4]
 80034dc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	699b      	ldr	r3, [r3, #24]
 80034e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80034ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80034f2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80034f4:	683b      	ldr	r3, [r7, #0]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	021b      	lsls	r3, r3, #8
 80034fa:	68fa      	ldr	r2, [r7, #12]
 80034fc:	4313      	orrs	r3, r2
 80034fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003500:	697b      	ldr	r3, [r7, #20]
 8003502:	f023 0320 	bic.w	r3, r3, #32
 8003506:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003508:	683b      	ldr	r3, [r7, #0]
 800350a:	689b      	ldr	r3, [r3, #8]
 800350c:	011b      	lsls	r3, r3, #4
 800350e:	697a      	ldr	r2, [r7, #20]
 8003510:	4313      	orrs	r3, r2
 8003512:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	4a1d      	ldr	r2, [pc, #116]	; (800358c <TIM_OC2_SetConfig+0xd0>)
 8003518:	4293      	cmp	r3, r2
 800351a:	d10d      	bne.n	8003538 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800351c:	697b      	ldr	r3, [r7, #20]
 800351e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003522:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003524:	683b      	ldr	r3, [r7, #0]
 8003526:	68db      	ldr	r3, [r3, #12]
 8003528:	011b      	lsls	r3, r3, #4
 800352a:	697a      	ldr	r2, [r7, #20]
 800352c:	4313      	orrs	r3, r2
 800352e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003530:	697b      	ldr	r3, [r7, #20]
 8003532:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003536:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	4a14      	ldr	r2, [pc, #80]	; (800358c <TIM_OC2_SetConfig+0xd0>)
 800353c:	4293      	cmp	r3, r2
 800353e:	d113      	bne.n	8003568 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003540:	693b      	ldr	r3, [r7, #16]
 8003542:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003546:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003548:	693b      	ldr	r3, [r7, #16]
 800354a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800354e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003550:	683b      	ldr	r3, [r7, #0]
 8003552:	695b      	ldr	r3, [r3, #20]
 8003554:	009b      	lsls	r3, r3, #2
 8003556:	693a      	ldr	r2, [r7, #16]
 8003558:	4313      	orrs	r3, r2
 800355a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800355c:	683b      	ldr	r3, [r7, #0]
 800355e:	699b      	ldr	r3, [r3, #24]
 8003560:	009b      	lsls	r3, r3, #2
 8003562:	693a      	ldr	r2, [r7, #16]
 8003564:	4313      	orrs	r3, r2
 8003566:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	693a      	ldr	r2, [r7, #16]
 800356c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	68fa      	ldr	r2, [r7, #12]
 8003572:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003574:	683b      	ldr	r3, [r7, #0]
 8003576:	685a      	ldr	r2, [r3, #4]
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	697a      	ldr	r2, [r7, #20]
 8003580:	621a      	str	r2, [r3, #32]
}
 8003582:	bf00      	nop
 8003584:	371c      	adds	r7, #28
 8003586:	46bd      	mov	sp, r7
 8003588:	bc80      	pop	{r7}
 800358a:	4770      	bx	lr
 800358c:	40012c00 	.word	0x40012c00

08003590 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003590:	b480      	push	{r7}
 8003592:	b087      	sub	sp, #28
 8003594:	af00      	add	r7, sp, #0
 8003596:	6078      	str	r0, [r7, #4]
 8003598:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	6a1b      	ldr	r3, [r3, #32]
 800359e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	6a1b      	ldr	r3, [r3, #32]
 80035aa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	685b      	ldr	r3, [r3, #4]
 80035b0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	69db      	ldr	r3, [r3, #28]
 80035b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80035be:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	f023 0303 	bic.w	r3, r3, #3
 80035c6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80035c8:	683b      	ldr	r3, [r7, #0]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	68fa      	ldr	r2, [r7, #12]
 80035ce:	4313      	orrs	r3, r2
 80035d0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80035d2:	697b      	ldr	r3, [r7, #20]
 80035d4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80035d8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80035da:	683b      	ldr	r3, [r7, #0]
 80035dc:	689b      	ldr	r3, [r3, #8]
 80035de:	021b      	lsls	r3, r3, #8
 80035e0:	697a      	ldr	r2, [r7, #20]
 80035e2:	4313      	orrs	r3, r2
 80035e4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	4a1d      	ldr	r2, [pc, #116]	; (8003660 <TIM_OC3_SetConfig+0xd0>)
 80035ea:	4293      	cmp	r3, r2
 80035ec:	d10d      	bne.n	800360a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80035ee:	697b      	ldr	r3, [r7, #20]
 80035f0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80035f4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80035f6:	683b      	ldr	r3, [r7, #0]
 80035f8:	68db      	ldr	r3, [r3, #12]
 80035fa:	021b      	lsls	r3, r3, #8
 80035fc:	697a      	ldr	r2, [r7, #20]
 80035fe:	4313      	orrs	r3, r2
 8003600:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003602:	697b      	ldr	r3, [r7, #20]
 8003604:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003608:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	4a14      	ldr	r2, [pc, #80]	; (8003660 <TIM_OC3_SetConfig+0xd0>)
 800360e:	4293      	cmp	r3, r2
 8003610:	d113      	bne.n	800363a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003612:	693b      	ldr	r3, [r7, #16]
 8003614:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003618:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800361a:	693b      	ldr	r3, [r7, #16]
 800361c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003620:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003622:	683b      	ldr	r3, [r7, #0]
 8003624:	695b      	ldr	r3, [r3, #20]
 8003626:	011b      	lsls	r3, r3, #4
 8003628:	693a      	ldr	r2, [r7, #16]
 800362a:	4313      	orrs	r3, r2
 800362c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800362e:	683b      	ldr	r3, [r7, #0]
 8003630:	699b      	ldr	r3, [r3, #24]
 8003632:	011b      	lsls	r3, r3, #4
 8003634:	693a      	ldr	r2, [r7, #16]
 8003636:	4313      	orrs	r3, r2
 8003638:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	693a      	ldr	r2, [r7, #16]
 800363e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	68fa      	ldr	r2, [r7, #12]
 8003644:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003646:	683b      	ldr	r3, [r7, #0]
 8003648:	685a      	ldr	r2, [r3, #4]
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	697a      	ldr	r2, [r7, #20]
 8003652:	621a      	str	r2, [r3, #32]
}
 8003654:	bf00      	nop
 8003656:	371c      	adds	r7, #28
 8003658:	46bd      	mov	sp, r7
 800365a:	bc80      	pop	{r7}
 800365c:	4770      	bx	lr
 800365e:	bf00      	nop
 8003660:	40012c00 	.word	0x40012c00

08003664 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003664:	b480      	push	{r7}
 8003666:	b087      	sub	sp, #28
 8003668:	af00      	add	r7, sp, #0
 800366a:	6078      	str	r0, [r7, #4]
 800366c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	6a1b      	ldr	r3, [r3, #32]
 8003672:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	6a1b      	ldr	r3, [r3, #32]
 800367e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	685b      	ldr	r3, [r3, #4]
 8003684:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	69db      	ldr	r3, [r3, #28]
 800368a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003692:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800369a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800369c:	683b      	ldr	r3, [r7, #0]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	021b      	lsls	r3, r3, #8
 80036a2:	68fa      	ldr	r2, [r7, #12]
 80036a4:	4313      	orrs	r3, r2
 80036a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80036a8:	693b      	ldr	r3, [r7, #16]
 80036aa:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80036ae:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80036b0:	683b      	ldr	r3, [r7, #0]
 80036b2:	689b      	ldr	r3, [r3, #8]
 80036b4:	031b      	lsls	r3, r3, #12
 80036b6:	693a      	ldr	r2, [r7, #16]
 80036b8:	4313      	orrs	r3, r2
 80036ba:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	4a0f      	ldr	r2, [pc, #60]	; (80036fc <TIM_OC4_SetConfig+0x98>)
 80036c0:	4293      	cmp	r3, r2
 80036c2:	d109      	bne.n	80036d8 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80036c4:	697b      	ldr	r3, [r7, #20]
 80036c6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80036ca:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80036cc:	683b      	ldr	r3, [r7, #0]
 80036ce:	695b      	ldr	r3, [r3, #20]
 80036d0:	019b      	lsls	r3, r3, #6
 80036d2:	697a      	ldr	r2, [r7, #20]
 80036d4:	4313      	orrs	r3, r2
 80036d6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	697a      	ldr	r2, [r7, #20]
 80036dc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	68fa      	ldr	r2, [r7, #12]
 80036e2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80036e4:	683b      	ldr	r3, [r7, #0]
 80036e6:	685a      	ldr	r2, [r3, #4]
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	693a      	ldr	r2, [r7, #16]
 80036f0:	621a      	str	r2, [r3, #32]
}
 80036f2:	bf00      	nop
 80036f4:	371c      	adds	r7, #28
 80036f6:	46bd      	mov	sp, r7
 80036f8:	bc80      	pop	{r7}
 80036fa:	4770      	bx	lr
 80036fc:	40012c00 	.word	0x40012c00

08003700 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003700:	b480      	push	{r7}
 8003702:	b087      	sub	sp, #28
 8003704:	af00      	add	r7, sp, #0
 8003706:	60f8      	str	r0, [r7, #12]
 8003708:	60b9      	str	r1, [r7, #8]
 800370a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	6a1b      	ldr	r3, [r3, #32]
 8003710:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	6a1b      	ldr	r3, [r3, #32]
 8003716:	f023 0201 	bic.w	r2, r3, #1
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	699b      	ldr	r3, [r3, #24]
 8003722:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003724:	693b      	ldr	r3, [r7, #16]
 8003726:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800372a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	011b      	lsls	r3, r3, #4
 8003730:	693a      	ldr	r2, [r7, #16]
 8003732:	4313      	orrs	r3, r2
 8003734:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003736:	697b      	ldr	r3, [r7, #20]
 8003738:	f023 030a 	bic.w	r3, r3, #10
 800373c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800373e:	697a      	ldr	r2, [r7, #20]
 8003740:	68bb      	ldr	r3, [r7, #8]
 8003742:	4313      	orrs	r3, r2
 8003744:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	693a      	ldr	r2, [r7, #16]
 800374a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	697a      	ldr	r2, [r7, #20]
 8003750:	621a      	str	r2, [r3, #32]
}
 8003752:	bf00      	nop
 8003754:	371c      	adds	r7, #28
 8003756:	46bd      	mov	sp, r7
 8003758:	bc80      	pop	{r7}
 800375a:	4770      	bx	lr

0800375c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800375c:	b480      	push	{r7}
 800375e:	b087      	sub	sp, #28
 8003760:	af00      	add	r7, sp, #0
 8003762:	60f8      	str	r0, [r7, #12]
 8003764:	60b9      	str	r1, [r7, #8]
 8003766:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	6a1b      	ldr	r3, [r3, #32]
 800376c:	f023 0210 	bic.w	r2, r3, #16
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	699b      	ldr	r3, [r3, #24]
 8003778:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	6a1b      	ldr	r3, [r3, #32]
 800377e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003780:	697b      	ldr	r3, [r7, #20]
 8003782:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003786:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	031b      	lsls	r3, r3, #12
 800378c:	697a      	ldr	r2, [r7, #20]
 800378e:	4313      	orrs	r3, r2
 8003790:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003792:	693b      	ldr	r3, [r7, #16]
 8003794:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003798:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800379a:	68bb      	ldr	r3, [r7, #8]
 800379c:	011b      	lsls	r3, r3, #4
 800379e:	693a      	ldr	r2, [r7, #16]
 80037a0:	4313      	orrs	r3, r2
 80037a2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	697a      	ldr	r2, [r7, #20]
 80037a8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	693a      	ldr	r2, [r7, #16]
 80037ae:	621a      	str	r2, [r3, #32]
}
 80037b0:	bf00      	nop
 80037b2:	371c      	adds	r7, #28
 80037b4:	46bd      	mov	sp, r7
 80037b6:	bc80      	pop	{r7}
 80037b8:	4770      	bx	lr

080037ba <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80037ba:	b480      	push	{r7}
 80037bc:	b085      	sub	sp, #20
 80037be:	af00      	add	r7, sp, #0
 80037c0:	6078      	str	r0, [r7, #4]
 80037c2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	689b      	ldr	r3, [r3, #8]
 80037c8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80037d0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80037d2:	683a      	ldr	r2, [r7, #0]
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	4313      	orrs	r3, r2
 80037d8:	f043 0307 	orr.w	r3, r3, #7
 80037dc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	68fa      	ldr	r2, [r7, #12]
 80037e2:	609a      	str	r2, [r3, #8]
}
 80037e4:	bf00      	nop
 80037e6:	3714      	adds	r7, #20
 80037e8:	46bd      	mov	sp, r7
 80037ea:	bc80      	pop	{r7}
 80037ec:	4770      	bx	lr

080037ee <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80037ee:	b480      	push	{r7}
 80037f0:	b087      	sub	sp, #28
 80037f2:	af00      	add	r7, sp, #0
 80037f4:	60f8      	str	r0, [r7, #12]
 80037f6:	60b9      	str	r1, [r7, #8]
 80037f8:	607a      	str	r2, [r7, #4]
 80037fa:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	689b      	ldr	r3, [r3, #8]
 8003800:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003802:	697b      	ldr	r3, [r7, #20]
 8003804:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003808:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800380a:	683b      	ldr	r3, [r7, #0]
 800380c:	021a      	lsls	r2, r3, #8
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	431a      	orrs	r2, r3
 8003812:	68bb      	ldr	r3, [r7, #8]
 8003814:	4313      	orrs	r3, r2
 8003816:	697a      	ldr	r2, [r7, #20]
 8003818:	4313      	orrs	r3, r2
 800381a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	697a      	ldr	r2, [r7, #20]
 8003820:	609a      	str	r2, [r3, #8]
}
 8003822:	bf00      	nop
 8003824:	371c      	adds	r7, #28
 8003826:	46bd      	mov	sp, r7
 8003828:	bc80      	pop	{r7}
 800382a:	4770      	bx	lr

0800382c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800382c:	b480      	push	{r7}
 800382e:	b087      	sub	sp, #28
 8003830:	af00      	add	r7, sp, #0
 8003832:	60f8      	str	r0, [r7, #12]
 8003834:	60b9      	str	r1, [r7, #8]
 8003836:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003838:	68bb      	ldr	r3, [r7, #8]
 800383a:	f003 031f 	and.w	r3, r3, #31
 800383e:	2201      	movs	r2, #1
 8003840:	fa02 f303 	lsl.w	r3, r2, r3
 8003844:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	6a1a      	ldr	r2, [r3, #32]
 800384a:	697b      	ldr	r3, [r7, #20]
 800384c:	43db      	mvns	r3, r3
 800384e:	401a      	ands	r2, r3
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	6a1a      	ldr	r2, [r3, #32]
 8003858:	68bb      	ldr	r3, [r7, #8]
 800385a:	f003 031f 	and.w	r3, r3, #31
 800385e:	6879      	ldr	r1, [r7, #4]
 8003860:	fa01 f303 	lsl.w	r3, r1, r3
 8003864:	431a      	orrs	r2, r3
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	621a      	str	r2, [r3, #32]
}
 800386a:	bf00      	nop
 800386c:	371c      	adds	r7, #28
 800386e:	46bd      	mov	sp, r7
 8003870:	bc80      	pop	{r7}
 8003872:	4770      	bx	lr

08003874 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003874:	b480      	push	{r7}
 8003876:	b085      	sub	sp, #20
 8003878:	af00      	add	r7, sp, #0
 800387a:	6078      	str	r0, [r7, #4]
 800387c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003884:	2b01      	cmp	r3, #1
 8003886:	d101      	bne.n	800388c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003888:	2302      	movs	r3, #2
 800388a:	e046      	b.n	800391a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	2201      	movs	r2, #1
 8003890:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	2202      	movs	r2, #2
 8003898:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	685b      	ldr	r3, [r3, #4]
 80038a2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	689b      	ldr	r3, [r3, #8]
 80038aa:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80038b2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80038b4:	683b      	ldr	r3, [r7, #0]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	68fa      	ldr	r2, [r7, #12]
 80038ba:	4313      	orrs	r3, r2
 80038bc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	68fa      	ldr	r2, [r7, #12]
 80038c4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	4a16      	ldr	r2, [pc, #88]	; (8003924 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80038cc:	4293      	cmp	r3, r2
 80038ce:	d00e      	beq.n	80038ee <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80038d8:	d009      	beq.n	80038ee <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	4a12      	ldr	r2, [pc, #72]	; (8003928 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80038e0:	4293      	cmp	r3, r2
 80038e2:	d004      	beq.n	80038ee <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	4a10      	ldr	r2, [pc, #64]	; (800392c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80038ea:	4293      	cmp	r3, r2
 80038ec:	d10c      	bne.n	8003908 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80038ee:	68bb      	ldr	r3, [r7, #8]
 80038f0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80038f4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80038f6:	683b      	ldr	r3, [r7, #0]
 80038f8:	685b      	ldr	r3, [r3, #4]
 80038fa:	68ba      	ldr	r2, [r7, #8]
 80038fc:	4313      	orrs	r3, r2
 80038fe:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	68ba      	ldr	r2, [r7, #8]
 8003906:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	2201      	movs	r2, #1
 800390c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	2200      	movs	r2, #0
 8003914:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003918:	2300      	movs	r3, #0
}
 800391a:	4618      	mov	r0, r3
 800391c:	3714      	adds	r7, #20
 800391e:	46bd      	mov	sp, r7
 8003920:	bc80      	pop	{r7}
 8003922:	4770      	bx	lr
 8003924:	40012c00 	.word	0x40012c00
 8003928:	40000400 	.word	0x40000400
 800392c:	40000800 	.word	0x40000800

08003930 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003930:	b480      	push	{r7}
 8003932:	b083      	sub	sp, #12
 8003934:	af00      	add	r7, sp, #0
 8003936:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003938:	bf00      	nop
 800393a:	370c      	adds	r7, #12
 800393c:	46bd      	mov	sp, r7
 800393e:	bc80      	pop	{r7}
 8003940:	4770      	bx	lr

08003942 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003942:	b480      	push	{r7}
 8003944:	b083      	sub	sp, #12
 8003946:	af00      	add	r7, sp, #0
 8003948:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800394a:	bf00      	nop
 800394c:	370c      	adds	r7, #12
 800394e:	46bd      	mov	sp, r7
 8003950:	bc80      	pop	{r7}
 8003952:	4770      	bx	lr

08003954 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003954:	b580      	push	{r7, lr}
 8003956:	b082      	sub	sp, #8
 8003958:	af00      	add	r7, sp, #0
 800395a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	2b00      	cmp	r3, #0
 8003960:	d101      	bne.n	8003966 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003962:	2301      	movs	r3, #1
 8003964:	e03f      	b.n	80039e6 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800396c:	b2db      	uxtb	r3, r3
 800396e:	2b00      	cmp	r3, #0
 8003970:	d106      	bne.n	8003980 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	2200      	movs	r2, #0
 8003976:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800397a:	6878      	ldr	r0, [r7, #4]
 800397c:	f7fd ffcc 	bl	8001918 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	2224      	movs	r2, #36	; 0x24
 8003984:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	68da      	ldr	r2, [r3, #12]
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003996:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003998:	6878      	ldr	r0, [r7, #4]
 800399a:	f000 f829 	bl	80039f0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	691a      	ldr	r2, [r3, #16]
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80039ac:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	695a      	ldr	r2, [r3, #20]
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80039bc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	68da      	ldr	r2, [r3, #12]
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80039cc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	2200      	movs	r2, #0
 80039d2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	2220      	movs	r2, #32
 80039d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	2220      	movs	r2, #32
 80039e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80039e4:	2300      	movs	r3, #0
}
 80039e6:	4618      	mov	r0, r3
 80039e8:	3708      	adds	r7, #8
 80039ea:	46bd      	mov	sp, r7
 80039ec:	bd80      	pop	{r7, pc}
	...

080039f0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80039f0:	b580      	push	{r7, lr}
 80039f2:	b084      	sub	sp, #16
 80039f4:	af00      	add	r7, sp, #0
 80039f6:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	691b      	ldr	r3, [r3, #16]
 80039fe:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	68da      	ldr	r2, [r3, #12]
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	430a      	orrs	r2, r1
 8003a0c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	689a      	ldr	r2, [r3, #8]
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	691b      	ldr	r3, [r3, #16]
 8003a16:	431a      	orrs	r2, r3
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	695b      	ldr	r3, [r3, #20]
 8003a1c:	4313      	orrs	r3, r2
 8003a1e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	68db      	ldr	r3, [r3, #12]
 8003a26:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8003a2a:	f023 030c 	bic.w	r3, r3, #12
 8003a2e:	687a      	ldr	r2, [r7, #4]
 8003a30:	6812      	ldr	r2, [r2, #0]
 8003a32:	68b9      	ldr	r1, [r7, #8]
 8003a34:	430b      	orrs	r3, r1
 8003a36:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	695b      	ldr	r3, [r3, #20]
 8003a3e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	699a      	ldr	r2, [r3, #24]
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	430a      	orrs	r2, r1
 8003a4c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	4a2c      	ldr	r2, [pc, #176]	; (8003b04 <UART_SetConfig+0x114>)
 8003a54:	4293      	cmp	r3, r2
 8003a56:	d103      	bne.n	8003a60 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003a58:	f7fe fec4 	bl	80027e4 <HAL_RCC_GetPCLK2Freq>
 8003a5c:	60f8      	str	r0, [r7, #12]
 8003a5e:	e002      	b.n	8003a66 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003a60:	f7fe feac 	bl	80027bc <HAL_RCC_GetPCLK1Freq>
 8003a64:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003a66:	68fa      	ldr	r2, [r7, #12]
 8003a68:	4613      	mov	r3, r2
 8003a6a:	009b      	lsls	r3, r3, #2
 8003a6c:	4413      	add	r3, r2
 8003a6e:	009a      	lsls	r2, r3, #2
 8003a70:	441a      	add	r2, r3
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	685b      	ldr	r3, [r3, #4]
 8003a76:	009b      	lsls	r3, r3, #2
 8003a78:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a7c:	4a22      	ldr	r2, [pc, #136]	; (8003b08 <UART_SetConfig+0x118>)
 8003a7e:	fba2 2303 	umull	r2, r3, r2, r3
 8003a82:	095b      	lsrs	r3, r3, #5
 8003a84:	0119      	lsls	r1, r3, #4
 8003a86:	68fa      	ldr	r2, [r7, #12]
 8003a88:	4613      	mov	r3, r2
 8003a8a:	009b      	lsls	r3, r3, #2
 8003a8c:	4413      	add	r3, r2
 8003a8e:	009a      	lsls	r2, r3, #2
 8003a90:	441a      	add	r2, r3
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	685b      	ldr	r3, [r3, #4]
 8003a96:	009b      	lsls	r3, r3, #2
 8003a98:	fbb2 f2f3 	udiv	r2, r2, r3
 8003a9c:	4b1a      	ldr	r3, [pc, #104]	; (8003b08 <UART_SetConfig+0x118>)
 8003a9e:	fba3 0302 	umull	r0, r3, r3, r2
 8003aa2:	095b      	lsrs	r3, r3, #5
 8003aa4:	2064      	movs	r0, #100	; 0x64
 8003aa6:	fb00 f303 	mul.w	r3, r0, r3
 8003aaa:	1ad3      	subs	r3, r2, r3
 8003aac:	011b      	lsls	r3, r3, #4
 8003aae:	3332      	adds	r3, #50	; 0x32
 8003ab0:	4a15      	ldr	r2, [pc, #84]	; (8003b08 <UART_SetConfig+0x118>)
 8003ab2:	fba2 2303 	umull	r2, r3, r2, r3
 8003ab6:	095b      	lsrs	r3, r3, #5
 8003ab8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003abc:	4419      	add	r1, r3
 8003abe:	68fa      	ldr	r2, [r7, #12]
 8003ac0:	4613      	mov	r3, r2
 8003ac2:	009b      	lsls	r3, r3, #2
 8003ac4:	4413      	add	r3, r2
 8003ac6:	009a      	lsls	r2, r3, #2
 8003ac8:	441a      	add	r2, r3
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	685b      	ldr	r3, [r3, #4]
 8003ace:	009b      	lsls	r3, r3, #2
 8003ad0:	fbb2 f2f3 	udiv	r2, r2, r3
 8003ad4:	4b0c      	ldr	r3, [pc, #48]	; (8003b08 <UART_SetConfig+0x118>)
 8003ad6:	fba3 0302 	umull	r0, r3, r3, r2
 8003ada:	095b      	lsrs	r3, r3, #5
 8003adc:	2064      	movs	r0, #100	; 0x64
 8003ade:	fb00 f303 	mul.w	r3, r0, r3
 8003ae2:	1ad3      	subs	r3, r2, r3
 8003ae4:	011b      	lsls	r3, r3, #4
 8003ae6:	3332      	adds	r3, #50	; 0x32
 8003ae8:	4a07      	ldr	r2, [pc, #28]	; (8003b08 <UART_SetConfig+0x118>)
 8003aea:	fba2 2303 	umull	r2, r3, r2, r3
 8003aee:	095b      	lsrs	r3, r3, #5
 8003af0:	f003 020f 	and.w	r2, r3, #15
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	440a      	add	r2, r1
 8003afa:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003afc:	bf00      	nop
 8003afe:	3710      	adds	r7, #16
 8003b00:	46bd      	mov	sp, r7
 8003b02:	bd80      	pop	{r7, pc}
 8003b04:	40013800 	.word	0x40013800
 8003b08:	51eb851f 	.word	0x51eb851f

08003b0c <__libc_init_array>:
 8003b0c:	b570      	push	{r4, r5, r6, lr}
 8003b0e:	2600      	movs	r6, #0
 8003b10:	4d0c      	ldr	r5, [pc, #48]	; (8003b44 <__libc_init_array+0x38>)
 8003b12:	4c0d      	ldr	r4, [pc, #52]	; (8003b48 <__libc_init_array+0x3c>)
 8003b14:	1b64      	subs	r4, r4, r5
 8003b16:	10a4      	asrs	r4, r4, #2
 8003b18:	42a6      	cmp	r6, r4
 8003b1a:	d109      	bne.n	8003b30 <__libc_init_array+0x24>
 8003b1c:	f000 f822 	bl	8003b64 <_init>
 8003b20:	2600      	movs	r6, #0
 8003b22:	4d0a      	ldr	r5, [pc, #40]	; (8003b4c <__libc_init_array+0x40>)
 8003b24:	4c0a      	ldr	r4, [pc, #40]	; (8003b50 <__libc_init_array+0x44>)
 8003b26:	1b64      	subs	r4, r4, r5
 8003b28:	10a4      	asrs	r4, r4, #2
 8003b2a:	42a6      	cmp	r6, r4
 8003b2c:	d105      	bne.n	8003b3a <__libc_init_array+0x2e>
 8003b2e:	bd70      	pop	{r4, r5, r6, pc}
 8003b30:	f855 3b04 	ldr.w	r3, [r5], #4
 8003b34:	4798      	blx	r3
 8003b36:	3601      	adds	r6, #1
 8003b38:	e7ee      	b.n	8003b18 <__libc_init_array+0xc>
 8003b3a:	f855 3b04 	ldr.w	r3, [r5], #4
 8003b3e:	4798      	blx	r3
 8003b40:	3601      	adds	r6, #1
 8003b42:	e7f2      	b.n	8003b2a <__libc_init_array+0x1e>
 8003b44:	08003ba4 	.word	0x08003ba4
 8003b48:	08003ba4 	.word	0x08003ba4
 8003b4c:	08003ba4 	.word	0x08003ba4
 8003b50:	08003ba8 	.word	0x08003ba8

08003b54 <memset>:
 8003b54:	4603      	mov	r3, r0
 8003b56:	4402      	add	r2, r0
 8003b58:	4293      	cmp	r3, r2
 8003b5a:	d100      	bne.n	8003b5e <memset+0xa>
 8003b5c:	4770      	bx	lr
 8003b5e:	f803 1b01 	strb.w	r1, [r3], #1
 8003b62:	e7f9      	b.n	8003b58 <memset+0x4>

08003b64 <_init>:
 8003b64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b66:	bf00      	nop
 8003b68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003b6a:	bc08      	pop	{r3}
 8003b6c:	469e      	mov	lr, r3
 8003b6e:	4770      	bx	lr

08003b70 <_fini>:
 8003b70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b72:	bf00      	nop
 8003b74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003b76:	bc08      	pop	{r3}
 8003b78:	469e      	mov	lr, r3
 8003b7a:	4770      	bx	lr
